{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_baseURIAttestor",
          "type": "address"
        },
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        },
        {
          "internalType": "contract OptimistAllowlist",
          "name": "_optimistAllowlist",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_ALLOWLIST",
      "outputs": [
        {
          "internalType": "contract OptimistAllowlist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "isOnAllowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokenIdOfAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101406040523480156200001257600080fd5b5060405162002389380380620023898339810160408190526200003591620003ee565b6002608052600060a081905260c0526001600160a01b0380841660e052828116610100528116610120526200006b858562000076565b5050505050620005f4565b600054610100900460ff1615808015620000975750600054600160ff909116105b80620000c75750620000b430620001b660201b62000a9d1760201c565b158015620000c7575060005460ff166001145b620001305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000154576000805461ff0019166101001790555b620001608383620001c5565b6200016a62000231565b8015620001b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b03163b151590565b600054610100900460ff16620002215760405162461bcd60e51b815260206004820152602b60248201526000805160206200236983398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b6200022d82826200028f565b5050565b600054610100900460ff166200028d5760405162461bcd60e51b815260206004820152602b60248201526000805160206200236983398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b565b600054610100900460ff16620002eb5760405162461bcd60e51b815260206004820152602b60248201526000805160206200236983398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b6065620002f9838262000528565b506066620001b1828262000528565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033057600080fd5b81516001600160401b03808211156200034d576200034d62000308565b604051601f8301601f19908116603f0116810190828211818310171562000378576200037862000308565b816040528381526020925086838588010111156200039557600080fd5b600091505b83821015620003b957858201830151818301840152908201906200039a565b83821115620003cb5760008385830101525b9695505050505050565b6001600160a01b0381168114620003eb57600080fd5b50565b600080600080600060a086880312156200040757600080fd5b85516001600160401b03808211156200041f57600080fd5b6200042d89838a016200031e565b965060208801519150808211156200044457600080fd5b5062000453888289016200031e565b94505060408601516200046681620003d5565b60608701519093506200047981620003d5565b60808701519092506200048c81620003d5565b809150509295509295909350565b600181811c90821680620004af57607f821691505b602082108103620004d057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b157600081815260208120601f850160051c81016020861015620004ff5750805b601f850160051c820191505b8181101562000520578281556001016200050b565b505050505050565b81516001600160401b0381111562000544576200054462000308565b6200055c816200055584546200049a565b84620004d6565b602080601f8311600181146200059457600084156200057b5750858301515b600019600386901b1c1916600185901b17855562000520565b600085815260208120601f198616915b82811015620005c557888601518255948401946001909101908401620005a4565b5085821015620005e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161012051611d10620006596000396000818161032d01526109ad01526000818161035401526108840152600081816101df015261083901526000610702015260006106d9015260006106b00152611d106000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636a627842116100c3578063a22cb4651161007c578063a22cb465146102f4578063b88d4fde14610302578063c87b56dd14610315578063ce5dd1b514610328578063db083d711461034f578063e985e9c51461037657600080fd5b80636a627842146102915780636c0360eb146102a457806370a08231146102ac5780637c08652f146102bf5780638f328a1f146102d957806395d89b41146102ec57600080fd5b806323b872dd1161011557806323b872dd1461022a57806342842e0e1461023d57806342966c68146102505780634cd88b761461026357806354fd4d50146102765780636352211e1461027e57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c557806319f463f2146101da57806321d3d5cf14610201575b600080fd5b61017061016b3660046114d3565b6103b2565b60405190151581526020015b60405180910390f35b61018d610404565b60405161017c9190611548565b6101ad6101a836600461155b565b610496565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611590565b6104bd565b005b6101ad7f000000000000000000000000000000000000000000000000000000000000000081565b61021c706f7074696d6973742e626173652d75726960781b81565b60405190815260200161017c565b6101d86102383660046115ba565b61050a565b6101d861024b3660046115ba565b610541565b6101d861025e36600461155b565b61055c565b6101d86102713660046116c3565b61058d565b61018d6106a9565b6101ad61028c36600461155b565b61074c565b6101d861029f366004611727565b6107ac565b61018d610822565b61021c6102ba366004611727565b610905565b61021c6102cd366004611727565b6001600160a01b031690565b6101706102e7366004611727565b61098b565b61018d610a1a565b6101d86101d3366004611750565b6101d8610310366004611787565b610a29565b61018d61032336600461155b565b610a61565b6101ad7f000000000000000000000000000000000000000000000000000000000000000081565b6101ad7f000000000000000000000000000000000000000000000000000000000000000081565b610170610384366004611803565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806103e357506001600160e01b03198216635b5e139f60e01b145b806103fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606065805461041390611836565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90611836565b801561048c5780601f106104615761010080835404028352916020019161048c565b820191906000526020600020905b81548152906001019060200180831161046f57829003601f168201915b5050505050905090565b60006104a182610aac565b506000908152606960205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e00000000000060448201526064015b60405180910390fd5b610515335b82610b0b565b6105315760405162461bcd60e51b815260040161050190611870565b61053c838383610b8a565b505050565b61053c83838360405180602001604052806000815250610a29565b6105653361050f565b6105815760405162461bcd60e51b815260040161050190611870565b61058a81610d31565b50565b600054610100900460ff16158080156105ad5750600054600160ff909116105b806105c75750303b1580156105c7575060005460ff166001145b61062a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b6000805460ff19166001179055801561064d576000805461ff0019166101001790555b6106578383610dd9565b61065f610e0a565b801561053c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60606106d47f0000000000000000000000000000000000000000000000000000000000000000610e33565b6106fd7f0000000000000000000000000000000000000000000000000000000000000000610e33565b6107267f0000000000000000000000000000000000000000000000000000000000000000610e33565b604051602001610738939291906118be565b604051602081830303815290604052905090565b6000818152606760205260408120546001600160a01b0316806103fe5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610501565b6107b58161098b565b61080f5760405162461bcd60e51b815260206004820152602560248201527f4f7074696d6973743a2061646472657373206973206e6f74206f6e20616c6c6f6044820152641dd31a5cdd60da1b6064820152608401610501565b61058a816001600160a01b038116610f34565b6040516329b42cb560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152706f7074696d6973742e626173652d75726960781b60448301526060917f0000000000000000000000000000000000000000000000000000000000000000909116906329b42cb590606401600060405180830381865afa1580156108cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f59190810190611918565b604051602001610738919061198f565b60006001600160a01b03821661096f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610501565b506001600160a01b031660009081526068602052604090205490565b604051632409ec5360e11b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634813d8a690602401602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe91906119ab565b60606066805461041390611836565b610a333383610b0b565b610a4f5760405162461bcd60e51b815260040161050190611870565b610a5b84848484610f4e565b50505050565b6060610a6b610822565b610a76836014610f81565b604051602001610a879291906119c8565b6040516020818303038152906040529050919050565b6001600160a01b03163b151590565b6000818152606760205260409020546001600160a01b031661058a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610501565b600080610b178361074c565b9050806001600160a01b0316846001600160a01b03161480610b5e57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80610b825750836001600160a01b0316610b7784610496565b6001600160a01b0316145b949350505050565b826001600160a01b0316610b9d8261074c565b6001600160a01b031614610c015760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610501565b6001600160a01b038216610c635760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610501565b610c6e838383611124565b610c7960008261118d565b6001600160a01b0383166000908152606860205260408120805460019290610ca2908490611a2c565b90915550506001600160a01b0382166000908152606860205260408120805460019290610cd0908490611a43565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610d3c8261074c565b9050610d4a81600084611124565b610d5560008361118d565b6001600160a01b0381166000908152606860205260408120805460019290610d7e908490611a2c565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45b5050565b600054610100900460ff16610e005760405162461bcd60e51b815260040161050190611a5b565b610dd582826111fb565b600054610100900460ff16610e315760405162461bcd60e51b815260040161050190611a5b565b565b606081600003610e5a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e845780610e6e81611aa6565b9150610e7d9050600a83611ad5565b9150610e5e565b60008167ffffffffffffffff811115610e9f57610e9f6115f6565b6040519080825280601f01601f191660200182016040528015610ec9576020820181803683370190505b5090505b8415610b8257610ede600183611a2c565b9150610eeb600a86611ae9565b610ef6906030611a43565b60f81b818381518110610f0b57610f0b611afd565b60200101906001600160f81b031916908160001a905350610f2d600a86611ad5565b9450610ecd565b610dd582826040518060200160405280600081525061123b565b610f59848484610b8a565b610f658484848461126e565b610a5b5760405162461bcd60e51b815260040161050190611b13565b60606000610f90836002611b65565b610f9b906002611a43565b67ffffffffffffffff811115610fb357610fb36115f6565b6040519080825280601f01601f191660200182016040528015610fdd576020820181803683370190505b509050600360fc1b81600081518110610ff857610ff8611afd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061102757611027611afd565b60200101906001600160f81b031916908160001a905350600061104b846002611b65565b611056906001611a43565b90505b60018111156110ce576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061108a5761108a611afd565b1a60f81b8282815181106110a0576110a0611afd565b60200101906001600160f81b031916908160001a90535060049490941c936110c781611b84565b9050611059565b50831561111d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610501565b9392505050565b6001600160a01b038316158061114157506001600160a01b038216155b61053c5760405162461bcd60e51b815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e0000000000006044820152606401610501565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111c28261074c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff166112225760405162461bcd60e51b815260040161050190611a5b565b606561122e8382611be9565b50606661053c8282611be9565b611245838361136f565b611252600084848461126e565b61053c5760405162461bcd60e51b815260040161050190611b13565b60006001600160a01b0384163b1561136457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906112b2903390899088908890600401611ca9565b6020604051808303816000875af19250505080156112ed575060408051601f3d908101601f191682019092526112ea91810190611ce6565b60015b61134a573d80801561131b576040519150601f19603f3d011682016040523d82523d6000602084013e611320565b606091505b5080516000036113425760405162461bcd60e51b815260040161050190611b13565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b82565b506001949350505050565b6001600160a01b0382166113c55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610501565b6000818152606760205260409020546001600160a01b03161561142a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610501565b61143660008383611124565b6001600160a01b038216600090815260686020526040812080546001929061145f908490611a43565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461058a57600080fd5b6000602082840312156114e557600080fd5b813561111d816114bd565b60005b8381101561150b5781810151838201526020016114f3565b83811115610a5b5750506000910152565b600081518084526115348160208601602086016114f0565b601f01601f19169290920160200192915050565b60208152600061111d602083018461151c565b60006020828403121561156d57600080fd5b5035919050565b80356001600160a01b038116811461158b57600080fd5b919050565b600080604083850312156115a357600080fd5b6115ac83611574565b946020939093013593505050565b6000806000606084860312156115cf57600080fd5b6115d884611574565b92506115e660208501611574565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611635576116356115f6565b604052919050565b600067ffffffffffffffff821115611657576116576115f6565b50601f01601f191660200190565b60006116786116738461163d565b61160c565b905082815283838301111561168c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126116b457600080fd5b61111d83833560208501611665565b600080604083850312156116d657600080fd5b823567ffffffffffffffff808211156116ee57600080fd5b6116fa868387016116a3565b9350602085013591508082111561171057600080fd5b5061171d858286016116a3565b9150509250929050565b60006020828403121561173957600080fd5b61111d82611574565b801515811461058a57600080fd5b6000806040838503121561176357600080fd5b61176c83611574565b9150602083013561177c81611742565b809150509250929050565b6000806000806080858703121561179d57600080fd5b6117a685611574565b93506117b460208601611574565b925060408501359150606085013567ffffffffffffffff8111156117d757600080fd5b8501601f810187136117e857600080fd5b6117f787823560208401611665565b91505092959194509250565b6000806040838503121561181657600080fd5b61181f83611574565b915061182d60208401611574565b90509250929050565b600181811c9082168061184a57607f821691505b60208210810361186a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600084516118d08184602089016114f0565b8083019050601760f91b80825285516118f0816001850160208a016114f0565b6001920191820152835161190b8160028401602088016114f0565b0160020195945050505050565b60006020828403121561192a57600080fd5b815167ffffffffffffffff81111561194157600080fd5b8201601f8101841361195257600080fd5b80516119606116738261163d565b81815285602083850101111561197557600080fd5b6119868260208301602086016114f0565b95945050505050565b600082516119a18184602087016114f0565b9190910192915050565b6000602082840312156119bd57600080fd5b815161111d81611742565b600083516119da8184602088016114f0565b602f60f81b90830190815283516119f88160018401602088016114f0565b64173539b7b760d91b60019290910191820152600601949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611a3e57611a3e611a16565b500390565b60008219821115611a5657611a56611a16565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060018201611ab857611ab8611a16565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611ae457611ae4611abf565b500490565b600082611af857611af8611abf565b500690565b634e487b7160e01b600052603260045260246000fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000816000190483118215151615611b7f57611b7f611a16565b500290565b600081611b9357611b93611a16565b506000190190565b601f82111561053c57600081815260208120601f850160051c81016020861015611bc25750805b601f850160051c820191505b81811015611be157828155600101611bce565b505050505050565b815167ffffffffffffffff811115611c0357611c036115f6565b611c1781611c118454611836565b84611b9b565b602080601f831160018114611c4c5760008415611c345750858301515b600019600386901b1c1916600185901b178555611be1565b600085815260208120601f198616915b82811015611c7b57888601518255948401946001909101908401611c5c565b5085821015611c995787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cdc9083018461151c565b9695505050505050565b600060208284031215611cf857600080fd5b815161111d816114bd56fea164736f6c634300080f000a496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
    "sourceMap": "613:5070:53:-:0;;;1594:411;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1807:1;762:22:57;;1810:1:53;794:22:57;;;;826;;-1:-1:-1;;;;;1826:36:53;;::::1;;::::0;1872:41;;::::1;;::::0;1923:39;::::1;;::::0;1972:26:::1;1983:5:::0;1990:7;1972:10:::1;:26::i;:::-;1594:411:::0;;;;;613:5070;;2154:162;3111:19:58;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:58;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;;3220:44;3258:4;3220:29;;;;;:44;;:::i;:::-;3219:45;:66;;;;-1:-1:-1;3268:12:58;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:58;;2394:2:101;3157:201:58;;;2376:21:101;2433:2;2413:18;;;2406:30;2472:34;2452:18;;;2445:62;-1:-1:-1;;;2523:18:101;;;2516:44;2577:19;;3157:201:58;;;;;;;;;3368:12;:16;;-1:-1:-1;;3368:16:58;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:58;;;;;3394:65;2247:29:53::1;2261:5:::0;2268:7;2247:13:::1;:29::i;:::-;2286:23;:21;:23::i;:::-;3483:14:58::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;3513:21:58;;;3553:14;;-1:-1:-1;2759:36:101;;3553:14:58;;2747:2:101;2732:18;3553:14:58;;;;;;;3479:99;3101:483;2154:162:53;;:::o;1186:320:64:-;-1:-1:-1;;;;;1476:19:64;;:23;;;1186:320::o;1605:149:59:-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;3008:2:101;4902:69:58;;;2990:21:101;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:101;;;3059:62;-1:-1:-1;;;3137:18:101;;;3130:41;3188:19;;4902:69:58;2806:407:101;4902:69:58;1708:39:59::1;1732:5:::0;1739:7;1708:23:::1;:39::i;:::-;1605:149:::0;;:::o;483:66:62:-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;3008:2:101;4902:69:58;;;2990:21:101;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:101;;;3059:62;-1:-1:-1;;;3137:18:101;;;3130:41;3188:19;;4902:69:58;2806:407:101;4902:69:58;483:66:62:o;1760:160:59:-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;3008:2:101;4902:69:58;;;2990:21:101;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:101;;;3059:62;-1:-1:-1;;;3137:18:101;;;3130:41;3188:19;;4902:69:58;2806:407:101;4902:69:58;1873:5:59::1;:13;1881:5:::0;1873;:13:::1;:::i;:::-;-1:-1:-1::0;1896:7:59::1;:17;1906:7:::0;1896;:17:::1;:::i;14:127:101:-:0;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:101;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:101;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:101:o;1036:131::-;-1:-1:-1;;;;;1111:31:101;;1101:42;;1091:70;;1157:1;1154;1147:12;1091:70;1036:131;:::o;1172:1015::-;1353:6;1361;1369;1377;1385;1438:3;1426:9;1417:7;1413:23;1409:33;1406:53;;;1455:1;1452;1445:12;1406:53;1482:16;;-1:-1:-1;;;;;1547:14:101;;;1544:34;;;1574:1;1571;1564:12;1544:34;1597:61;1650:7;1641:6;1630:9;1626:22;1597:61;:::i;:::-;1587:71;;1704:2;1693:9;1689:18;1683:25;1667:41;;1733:2;1723:8;1720:16;1717:36;;;1749:1;1746;1739:12;1717:36;;1772:63;1827:7;1816:8;1805:9;1801:24;1772:63;:::i;:::-;1762:73;;;1878:2;1867:9;1863:18;1857:25;1891:31;1916:5;1891:31;:::i;:::-;1991:2;1976:18;;1970:25;1941:5;;-1:-1:-1;2004:33:101;1970:25;2004:33;:::i;:::-;2108:3;2093:19;;2087:26;2056:7;;-1:-1:-1;2122:33:101;2087:26;2122:33;:::i;:::-;2174:7;2164:17;;;1172:1015;;;;;;;;:::o;3218:380::-;3297:1;3293:12;;;;3340;;;3361:61;;3415:4;3407:6;3403:17;3393:27;;3361:61;3468:2;3460:6;3457:14;3437:18;3434:38;3431:161;;3514:10;3509:3;3505:20;3502:1;3495:31;3549:4;3546:1;3539:15;3577:4;3574:1;3567:15;3431:161;;3218:380;;;:::o;3729:545::-;3831:2;3826:3;3823:11;3820:448;;;3867:1;3892:5;3888:2;3881:17;3937:4;3933:2;3923:19;4007:2;3995:10;3991:19;3988:1;3984:27;3978:4;3974:38;4043:4;4031:10;4028:20;4025:47;;;-1:-1:-1;4066:4:101;4025:47;4121:2;4116:3;4112:12;4109:1;4105:20;4099:4;4095:31;4085:41;;4176:82;4194:2;4187:5;4184:13;4176:82;;;4239:17;;;4220:1;4209:13;4176:82;;;4180:3;;;3729:545;;;:::o;4450:1352::-;4570:10;;-1:-1:-1;;;;;4592:30:101;;4589:56;;;4625:18;;:::i;:::-;4654:97;4744:6;4704:38;4736:4;4730:11;4704:38;:::i;:::-;4698:4;4654:97;:::i;:::-;4806:4;;4870:2;4859:14;;4887:1;4882:663;;;;5589:1;5606:6;5603:89;;;-1:-1:-1;5658:19:101;;;5652:26;5603:89;-1:-1:-1;;4407:1:101;4403:11;;;4399:24;4395:29;4385:40;4431:1;4427:11;;;4382:57;5705:81;;4852:944;;4882:663;3676:1;3669:14;;;3713:4;3700:18;;-1:-1:-1;;4918:20:101;;;5036:236;5050:7;5047:1;5044:14;5036:236;;;5139:19;;;5133:26;5118:42;;5231:27;;;;5199:1;5187:14;;;;5066:19;;5036:236;;;5040:3;5300:6;5291:7;5288:19;5285:201;;;5361:19;;;5355:26;-1:-1:-1;;5444:1:101;5440:14;;;5456:3;5436:24;5432:37;5428:42;5413:58;5398:74;;5285:201;-1:-1:-1;;;;;5532:1:101;5516:14;;;5512:22;5499:36;;-1:-1:-1;4450:1352:101:o;:::-;613:5070:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "613:5070:53:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1987:344:59;;;;;;:::i;:::-;;:::i;:::-;;;565:14:101;;558:22;540:41;;528:2;513:18;1987:344:59;;;;;;;;2931:98;;;:::i;:::-;;;;;;;:::i;4407:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:101;;;1674:51;;1662:2;1647:18;4407:167:59;1528:203:101;4943:109:53;;;;;;:::i;:::-;;:::i;:::-;;915:42;;;;;765:79;;-1:-1:-1;;;765:79:53;;;;;2319:25:101;;;2307:2;2292:18;765:79:53;2173:177:101;5084:327:59;;;;;;:::i;:::-;;:::i;5477:179::-;;;;;;:::i;:::-;;:::i;803:239:62:-;;;;;;:::i;:::-;;:::i;2154:162:53:-;;;;;;:::i;:::-;;:::i;972:372:57:-;;;:::i;2651:218:59:-;;;;;;:::i;:::-;;:::i;2658:194:53:-;;;;;;:::i;:::-;;:::i;2971:375::-;;;:::i;2390:204:59:-;;;;;;:::i;:::-;;:::i;4736:120:53:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4825:24:53;;4736:120;4353:140;;;;;;:::i;:::-;;:::i;3093:102:59:-;;;:::i;5139:119:53:-;;;;;;:::i;5722:315:59:-;;;;;;:::i;:::-;;:::i;3531:424:53:-;;;;;;:::i;:::-;;:::i;1175:53::-;;;;;1039:55;;;;;4860:162:59;;;;;;:::i;:::-;-1:-1:-1;;;;;4980:25:59;;;4957:4;4980:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4860:162;1987:344;2111:4;-1:-1:-1;;;;;;2146:51:59;;-1:-1:-1;;;2146:51:59;;:126;;-1:-1:-1;;;;;;;2213:59:59;;-1:-1:-1;;;2213:59:59;2146:126;:178;;;-1:-1:-1;;;;;;;;;;1168:51:69;;;2288:36:59;2127:197;1987:344;-1:-1:-1;;1987:344:59:o;2931:98::-;2985:13;3017:5;3010:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2931:98;:::o;4407:167::-;4483:7;4502:23;4517:7;4502:14;:23::i;:::-;-1:-1:-1;4543:24:59;;;;:15;:24;;;;;;-1:-1:-1;;;;;4543:24:59;;4407:167::o;4943:109:53:-;5009:36;;-1:-1:-1;;;5009:36:53;;7221:2:101;5009:36:53;;;7203:21:101;7260:2;7240:18;;;7233:30;7299:28;7279:18;;;7272:56;7345:18;;5009:36:53;;;;;;;;5084:327:59;5273:41;929:10:65;5292:12:59;5306:7;5273:18;:41::i;:::-;5265:100;;;;-1:-1:-1;;;5265:100:59;;;;;;;:::i;:::-;5376:28;5386:4;5392:2;5396:7;5376:9;:28::i;:::-;5084:327;;;:::o;5477:179::-;5610:39;5627:4;5633:2;5637:7;5610:39;;;;;;;;;;;;:16;:39::i;803:239:62:-;919:41;929:10:65;938:12:62;850:96:65;919:41:62;911:100;;;;-1:-1:-1;;;911:100:62;;;;;;;:::i;:::-;1021:14;1027:7;1021:5;:14::i;:::-;803:239;:::o;2154:162:53:-;3111:19:58;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:58;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:58;1476:19:64;:23;;;3219:66:58;;-1:-1:-1;3268:12:58;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:58;;7991:2:101;3157:201:58;;;7973:21:101;8030:2;8010:18;;;8003:30;8069:34;8049:18;;;8042:62;-1:-1:-1;;;8120:18:101;;;8113:44;8174:19;;3157:201:58;7789:410:101;3157:201:58;3368:12;:16;;-1:-1:-1;;3368:16:58;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:58;;;;;3394:65;2247:29:53::1;2261:5;2268:7;2247:13;:29::i;:::-;2286:23;:21;:23::i;:::-;3483:14:58::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;3513:21:58;;;3553:14;;-1:-1:-1;8356:36:101;;3553:14:58;;8344:2:101;8329:18;3553:14:58;;;;;;;3101:483;2154:162:53;;:::o;972:372:57:-;1012:13;1118:31;1135:13;1118:16;:31::i;:::-;1196;1213:13;1196:16;:31::i;:::-;1274;1291:13;1274:16;:31::i;:::-;1080:243;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1037:300;;972:372;:::o;2651:218:59:-;2723:7;2758:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2758:16:59;;2784:56;;;;-1:-1:-1;;;2784:56:59;;9570:2:101;2784:56:59;;;9552:21:101;9609:2;9589:18;;;9582:30;-1:-1:-1;;;9628:18:101;;;9621:54;9692:18;;2784:56:59;9368:348:101;2658:194:53;2717:25;2731:10;2717:13;:25::i;:::-;2709:75;;;;-1:-1:-1;;;2709:75:53;;9923:2:101;2709:75:53;;;9905:21:101;9962:2;9942:18;;;9935:30;10001:34;9981:18;;;9974:62;-1:-1:-1;;;10052:18:101;;;10045:35;10097:19;;2709:75:53;9721:401:101;2709:75:53;2794:51;2804:10;-1:-1:-1;;;;;4825:24:53;;2794:9;:51::i;2971:375::-;3117:190;;-1:-1:-1;;;3117:190:53;;-1:-1:-1;;;;;3175:17:53;10385:15:101;;3117:190:53;;;10367:34:101;3226:4:53;10417:18:101;;;10410:43;-1:-1:-1;;;10469:18:101;;;10462:34;3011:13:53;;3117:19;:32;;;;;;10302:18:101;;3117:190:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3117:190:53;;;;;;;;;;;;:::i;:::-;3079:246;;;;;;;;:::i;2390:204:59:-;2462:7;-1:-1:-1;;;;;2489:19:59;;2481:73;;;;-1:-1:-1;;;2481:73:59;;11628:2:101;2481:73:59;;;11610:21:101;11667:2;11647:18;;;11640:30;11706:34;11686:18;;;11679:62;-1:-1:-1;;;11757:18:101;;;11750:39;11806:19;;2481:73:59;11426:405:101;2481:73:59;-1:-1:-1;;;;;;2571:16:59;;;;;:9;:16;;;;;;;2390:204::o;4353:140:53:-;4440:46;;-1:-1:-1;;;4440:46:53;;-1:-1:-1;;;;;1692:32:101;;;4440:46:53;;;1674:51:101;4417:4:53;;4440:18;:34;;;;;;1647:18:101;;4440:46:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3093:102:59:-;3149:13;3181:7;3174:14;;;;;:::i;5722:315::-;5890:41;929:10:65;5923:7:59;5890:18;:41::i;:::-;5882:100;;;;-1:-1:-1;;;5882:100:59;;;;;;;:::i;:::-;5992:38;6006:4;6012:2;6016:7;6025:4;5992:13;:38::i;:::-;5722:315;;;;:::o;3531:424:53:-;3605:13;3711:9;:7;:9::i;:::-;3854:33;3874:8;3884:2;3854:19;:33::i;:::-;3673:261;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3630:318;;3531:424;;;:::o;1186:320:64:-;-1:-1:-1;;;;;1476:19:64;;:23;;;1186:320::o;12173:133:59:-;7571:4;7594:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7594:16:59;12246:53;;;;-1:-1:-1;;;12246:53:59;;9570:2:101;12246:53:59;;;9552:21:101;9609:2;9589:18;;;9582:30;-1:-1:-1;;;9628:18:101;;;9621:54;9692:18;;12246:53:59;9368:348:101;7789:272:59;7882:4;7898:13;7914:34;7940:7;7914:25;:34::i;:::-;7898:50;;7977:5;-1:-1:-1;;;;;7966:16:59;:7;-1:-1:-1;;;;;7966:16:59;;:52;;;-1:-1:-1;;;;;;4980:25:59;;;4957:4;4980:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7986:32;7966:87;;;;8046:7;-1:-1:-1;;;;;8022:31:59;:20;8034:7;8022:11;:20::i;:::-;-1:-1:-1;;;;;8022:31:59;;7966:87;7958:96;7789:272;-1:-1:-1;;;;7789:272:59:o;10736:616::-;10901:4;-1:-1:-1;;;;;10863:42:59;:34;10889:7;10863:25;:34::i;:::-;-1:-1:-1;;;;;10863:42:59;;10855:92;;;;-1:-1:-1;;;10855:92:59;;13065:2:101;10855:92:59;;;13047:21:101;13104:2;13084:18;;;13077:30;13143:34;13123:18;;;13116:62;-1:-1:-1;;;13194:18:101;;;13187:35;13239:19;;10855:92:59;12863:401:101;10855:92:59;-1:-1:-1;;;;;10965:16:59;;10957:65;;;;-1:-1:-1;;;10957:65:59;;13471:2:101;10957:65:59;;;13453:21:101;13510:2;13490:18;;;13483:30;13549:34;13529:18;;;13522:62;-1:-1:-1;;;13600:18:101;;;13593:34;13644:19;;10957:65:59;13269:400:101;10957:65:59;11033:39;11054:4;11060:2;11064:7;11033:20;:39::i;:::-;11134:29;11151:1;11155:7;11134:8;:29::i;:::-;-1:-1:-1;;;;;11174:15:59;;;;;;:9;:15;;;;;:20;;11193:1;;11174:15;:20;;11193:1;;11174:20;:::i;:::-;;;;-1:-1:-1;;;;;;;11204:13:59;;;;;;:9;:13;;;;;:18;;11221:1;;11204:13;:18;;11221:1;;11204:18;:::i;:::-;;;;-1:-1:-1;;11232:16:59;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;11232:21:59;-1:-1:-1;;;;;11232:21:59;;;;;;;;;11269:27;;11232:16;;11269:27;;;;;;;5084:327;;;:::o;9995:417::-;10054:13;10070:34;10096:7;10070:25;:34::i;:::-;10054:50;;10115:48;10136:5;10151:1;10155:7;10115:20;:48::i;:::-;10201:29;10218:1;10222:7;10201:8;:29::i;:::-;-1:-1:-1;;;;;10241:16:59;;;;;;:9;:16;;;;;:21;;10261:1;;10241:16;:21;;10261:1;;10241:21;:::i;:::-;;;;-1:-1:-1;;10279:16:59;;;;:7;:16;;;;;;10272:23;;-1:-1:-1;;;;;;10272:23:59;;;10311:36;10287:7;;10279:16;-1:-1:-1;;;;;10311:36:59;;;;;10279:16;;10311:36;10358:47;10044:368;9995:417;:::o;1605:149::-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;;;;;;:::i;:::-;1708:39:59::1;1732:5;1739:7;1708:23;:39::i;483:66:62:-:0;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;;;;;;:::i;:::-;483:66:62:o;392:703:76:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:76;;;;;;;;;;;;-1:-1:-1;;;691:10:76;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:76;;-1:-1:-1;837:2:76;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:76;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:76;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;966:56:76;;;;;;;;-1:-1:-1;1036:11:76;1045:2;1036:11;;:::i;:::-;;;908:150;;8391:108:59;8466:26;8476:2;8480:7;8466:26;;;;;;;;;;;;:9;:26::i;6898:305::-;7048:28;7058:4;7064:2;7068:7;7048:9;:28::i;:::-;7094:47;7117:4;7123:2;7127:7;7136:4;7094:22;:47::i;:::-;7086:110;;;;-1:-1:-1;;;7086:110:59;;;;;;;:::i;1652:441:76:-;1727:13;1752:19;1784:10;1788:6;1784:1;:10;:::i;:::-;:14;;1797:1;1784:14;:::i;:::-;1774:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1774:25:76;;1752:47;;-1:-1:-1;;;1809:6:76;1816:1;1809:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1809:15:76;;;;;;;;;-1:-1:-1;;;1834:6:76;1841:1;1834:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1834:15:76;;;;;;;;-1:-1:-1;1864:9:76;1876:10;1880:6;1876:1;:10;:::i;:::-;:14;;1889:1;1876:14;:::i;:::-;1864:26;;1859:132;1896:1;1892;:5;1859:132;;;-1:-1:-1;;;1943:5:76;1951:3;1943:11;1930:25;;;;;;;:::i;:::-;;;;1918:6;1925:1;1918:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1918:37:76;;;;;;;;-1:-1:-1;1979:1:76;1969:11;;;;;1899:3;;;:::i;:::-;;;1859:132;;;-1:-1:-1;2008:10:76;;2000:55;;;;-1:-1:-1;;;2000:55:76;;16062:2:101;2000:55:76;;;16044:21:101;;;16081:18;;;16074:30;16140:34;16120:18;;;16113:62;16192:18;;2000:55:76;15860:356:101;2000:55:76;2079:6;1652:441;-1:-1:-1;;;1652:441:76:o;5462:219:53:-;-1:-1:-1;;;;;5603:19:53;;;;:40;;-1:-1:-1;;;;;;5626:17:53;;;5603:40;5595:79;;;;-1:-1:-1;;;5595:79:53;;7221:2:101;5595:79:53;;;7203:21:101;7260:2;7240:18;;;7233:30;7299:28;7279:18;;;7272:56;7345:18;;5595:79:53;7019:350:101;11464:182:59;11538:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11538:29:59;-1:-1:-1;;;;;11538:29:59;;;;;;;;:24;;11591:34;11538:24;11591:25;:34::i;:::-;-1:-1:-1;;;;;11582:57:59;;;;;;;;;;;11464:182;;:::o;1760:160::-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;;;;;;:::i;:::-;1873:5:59::1;:13;1881:5:::0;1873;:13:::1;:::i;:::-;-1:-1:-1::0;1896:7:59::1;:17;1906:7:::0;1896;:17:::1;:::i;8720:309::-:0;8844:18;8850:2;8854:7;8844:5;:18::i;:::-;8893:53;8924:1;8928:2;8932:7;8941:4;8893:22;:53::i;:::-;8872:150;;;;-1:-1:-1;;;8872:150:59;;;;;;;:::i;12858:853::-;13007:4;-1:-1:-1;;;;;13027:13:59;;1476:19:64;:23;13023:682:59;;13062:82;;-1:-1:-1;;;13062:82:59;;-1:-1:-1;;;;;13062:47:59;;;;;:82;;929:10:65;;13124:4:59;;13130:7;;13139:4;;13062:82;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13062:82:59;;;;;;;;-1:-1:-1;;13062:82:59;;;;;;;;;;;;:::i;:::-;;;13058:595;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13322:6;:13;13339:1;13322:18;13318:321;;13364:60;;-1:-1:-1;;;13364:60:59;;;;;;;:::i;13318:321::-;13591:6;13585:13;13576:6;13572:2;13568:15;13561:38;13058:595;-1:-1:-1;;;;;;13194:62:59;-1:-1:-1;;;13194:62:59;;-1:-1:-1;13187:69:59;;13023:682;-1:-1:-1;13690:4:59;12858:853;;;;;;:::o;9351:427::-;-1:-1:-1;;;;;9430:16:59;;9422:61;;;;-1:-1:-1;;;9422:61:59;;19375:2:101;9422:61:59;;;19357:21:101;;;19394:18;;;19387:30;19453:34;19433:18;;;19426:62;19505:18;;9422:61:59;19173:356:101;9422:61:59;7571:4;7594:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7594:16:59;:30;9493:58;;;;-1:-1:-1;;;9493:58:59;;19736:2:101;9493:58:59;;;19718:21:101;19775:2;19755:18;;;19748:30;19814;19794:18;;;19787:58;19862:18;;9493:58:59;19534:352:101;9493:58:59;9562:45;9591:1;9595:2;9599:7;9562:20;:45::i;:::-;-1:-1:-1;;;;;9618:13:59;;;;;;:9;:13;;;;;:18;;9635:1;;9618:13;:18;;9635:1;;9618:18;:::i;:::-;;;;-1:-1:-1;;9646:16:59;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9646:21:59;-1:-1:-1;;;;;9646:21:59;;;;;;;;9683:33;;9646:16;;;9683:33;;9646:16;;9683:33;10044:368;9995:417;:::o;14:131:101:-;-1:-1:-1;;;;;;88:32:101;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:101;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:101;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:101:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:101;;1343:180;-1:-1:-1;1343:180:101:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:101;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:101:o;2355:328::-;2432:6;2440;2448;2501:2;2489:9;2480:7;2476:23;2472:32;2469:52;;;2517:1;2514;2507:12;2469:52;2540:29;2559:9;2540:29;:::i;:::-;2530:39;;2588:38;2622:2;2611:9;2607:18;2588:38;:::i;:::-;2578:48;;2673:2;2662:9;2658:18;2645:32;2635:42;;2355:328;;;;;:::o;2688:127::-;2749:10;2744:3;2740:20;2737:1;2730:31;2780:4;2777:1;2770:15;2804:4;2801:1;2794:15;2820:275;2891:2;2885:9;2956:2;2937:13;;-1:-1:-1;;2933:27:101;2921:40;;2991:18;2976:34;;3012:22;;;2973:62;2970:88;;;3038:18;;:::i;:::-;3074:2;3067:22;2820:275;;-1:-1:-1;2820:275:101:o;3100:187::-;3149:4;3182:18;3174:6;3171:30;3168:56;;;3204:18;;:::i;:::-;-1:-1:-1;3270:2:101;3249:15;-1:-1:-1;;3245:29:101;3276:4;3241:40;;3100:187::o;3292:338::-;3357:5;3386:53;3402:36;3431:6;3402:36;:::i;:::-;3386:53;:::i;:::-;3377:62;;3462:6;3455:5;3448:21;3502:3;3493:6;3488:3;3484:16;3481:25;3478:45;;;3519:1;3516;3509:12;3478:45;3568:6;3563:3;3556:4;3549:5;3545:16;3532:43;3622:1;3615:4;3606:6;3599:5;3595:18;3591:29;3584:40;3292:338;;;;;:::o;3635:222::-;3678:5;3731:3;3724:4;3716:6;3712:17;3708:27;3698:55;;3749:1;3746;3739:12;3698:55;3771:80;3847:3;3838:6;3825:20;3818:4;3810:6;3806:17;3771:80;:::i;3862:543::-;3950:6;3958;4011:2;3999:9;3990:7;3986:23;3982:32;3979:52;;;4027:1;4024;4017:12;3979:52;4067:9;4054:23;4096:18;4137:2;4129:6;4126:14;4123:34;;;4153:1;4150;4143:12;4123:34;4176:50;4218:7;4209:6;4198:9;4194:22;4176:50;:::i;:::-;4166:60;;4279:2;4268:9;4264:18;4251:32;4235:48;;4308:2;4298:8;4295:16;4292:36;;;4324:1;4321;4314:12;4292:36;;4347:52;4391:7;4380:8;4369:9;4365:24;4347:52;:::i;:::-;4337:62;;;3862:543;;;;;:::o;4410:186::-;4469:6;4522:2;4510:9;4501:7;4497:23;4493:32;4490:52;;;4538:1;4535;4528:12;4490:52;4561:29;4580:9;4561:29;:::i;4783:118::-;4869:5;4862:13;4855:21;4848:5;4845:32;4835:60;;4891:1;4888;4881:12;4906:315;4971:6;4979;5032:2;5020:9;5011:7;5007:23;5003:32;5000:52;;;5048:1;5045;5038:12;5000:52;5071:29;5090:9;5071:29;:::i;:::-;5061:39;;5150:2;5139:9;5135:18;5122:32;5163:28;5185:5;5163:28;:::i;:::-;5210:5;5200:15;;;4906:315;;;;;:::o;5226:667::-;5321:6;5329;5337;5345;5398:3;5386:9;5377:7;5373:23;5369:33;5366:53;;;5415:1;5412;5405:12;5366:53;5438:29;5457:9;5438:29;:::i;:::-;5428:39;;5486:38;5520:2;5509:9;5505:18;5486:38;:::i;:::-;5476:48;;5571:2;5560:9;5556:18;5543:32;5533:42;;5626:2;5615:9;5611:18;5598:32;5653:18;5645:6;5642:30;5639:50;;;5685:1;5682;5675:12;5639:50;5708:22;;5761:4;5753:13;;5749:27;-1:-1:-1;5739:55:101;;5790:1;5787;5780:12;5739:55;5813:74;5879:7;5874:2;5861:16;5856:2;5852;5848:11;5813:74;:::i;:::-;5803:84;;;5226:667;;;;;;;:::o;6369:260::-;6437:6;6445;6498:2;6486:9;6477:7;6473:23;6469:32;6466:52;;;6514:1;6511;6504:12;6466:52;6537:29;6556:9;6537:29;:::i;:::-;6527:39;;6585:38;6619:2;6608:9;6604:18;6585:38;:::i;:::-;6575:48;;6369:260;;;;;:::o;6634:380::-;6713:1;6709:12;;;;6756;;;6777:61;;6831:4;6823:6;6819:17;6809:27;;6777:61;6884:2;6876:6;6873:14;6853:18;6850:38;6847:161;;6930:10;6925:3;6921:20;6918:1;6911:31;6965:4;6962:1;6955:15;6993:4;6990:1;6983:15;6847:161;;6634:380;;;:::o;7374:410::-;7576:2;7558:21;;;7615:2;7595:18;;;7588:30;7654:34;7649:2;7634:18;;7627:62;-1:-1:-1;;;7720:2:101;7705:18;;7698:44;7774:3;7759:19;;7374:410::o;8403:960::-;8832:3;8870:6;8864:13;8886:53;8932:6;8927:3;8920:4;8912:6;8908:17;8886:53;:::i;:::-;8970:6;8965:3;8961:16;8948:29;;-1:-1:-1;;;9022:2:101;9015:5;9008:17;9056:6;9050:13;9072:65;9128:8;9124:1;9117:5;9113:13;9106:4;9098:6;9094:17;9072:65;:::i;:::-;9200:1;9156:20;;9192:10;;;9185:22;9232:13;;9254:62;9232:13;9303:1;9295:10;;9288:4;9276:17;;9254:62;:::i;:::-;9336:17;9355:1;9332:25;;8403:960;-1:-1:-1;;;;;8403:960:101:o;10507:635::-;10586:6;10639:2;10627:9;10618:7;10614:23;10610:32;10607:52;;;10655:1;10652;10645:12;10607:52;10688:9;10682:16;10721:18;10713:6;10710:30;10707:50;;;10753:1;10750;10743:12;10707:50;10776:22;;10829:4;10821:13;;10817:27;-1:-1:-1;10807:55:101;;10858:1;10855;10848:12;10807:55;10887:2;10881:9;10912:49;10928:32;10957:2;10928:32;:::i;10912:49::-;10984:2;10977:5;10970:17;11024:7;11019:2;11014;11010;11006:11;11002:20;10999:33;10996:53;;;11045:1;11042;11035:12;10996:53;11058:54;11109:2;11104;11097:5;11093:14;11088:2;11084;11080:11;11058:54;:::i;:::-;11131:5;10507:635;-1:-1:-1;;;;;10507:635:101:o;11147:274::-;11276:3;11314:6;11308:13;11330:53;11376:6;11371:3;11364:4;11356:6;11352:17;11330:53;:::i;:::-;11399:16;;;;;11147:274;-1:-1:-1;;11147:274:101:o;11836:245::-;11903:6;11956:2;11944:9;11935:7;11931:23;11927:32;11924:52;;;11972:1;11969;11962:12;11924:52;12004:9;11998:16;12023:28;12045:5;12023:28;:::i;12086:772::-;12467:3;12505:6;12499:13;12521:53;12567:6;12562:3;12555:4;12547:6;12543:17;12521:53;:::i;:::-;-1:-1:-1;;;12596:16:101;;;12621:18;;;12664:13;;12686:65;12664:13;12738:1;12727:13;;12720:4;12708:17;;12686:65;:::i;:::-;-1:-1:-1;;;12814:1:101;12770:20;;;;12806:10;;;12799:27;12850:1;12842:10;;12086:772;-1:-1:-1;;;;12086:772:101:o;13674:127::-;13735:10;13730:3;13726:20;13723:1;13716:31;13766:4;13763:1;13756:15;13790:4;13787:1;13780:15;13806:125;13846:4;13874:1;13871;13868:8;13865:34;;;13879:18;;:::i;:::-;-1:-1:-1;13916:9:101;;13806:125::o;13936:128::-;13976:3;14007:1;14003:6;14000:1;13997:13;13994:39;;;14013:18;;:::i;:::-;-1:-1:-1;14049:9:101;;13936:128::o;14069:407::-;14271:2;14253:21;;;14310:2;14290:18;;;14283:30;14349:34;14344:2;14329:18;;14322:62;-1:-1:-1;;;14415:2:101;14400:18;;14393:41;14466:3;14451:19;;14069:407::o;14481:135::-;14520:3;14541:17;;;14538:43;;14561:18;;:::i;:::-;-1:-1:-1;14608:1:101;14597:13;;14481:135::o;14621:127::-;14682:10;14677:3;14673:20;14670:1;14663:31;14713:4;14710:1;14703:15;14737:4;14734:1;14727:15;14753:120;14793:1;14819;14809:35;;14824:18;;:::i;:::-;-1:-1:-1;14858:9:101;;14753:120::o;14878:112::-;14910:1;14936;14926:35;;14941:18;;:::i;:::-;-1:-1:-1;14975:9:101;;14878:112::o;14995:127::-;15056:10;15051:3;15047:20;15044:1;15037:31;15087:4;15084:1;15077:15;15111:4;15108:1;15101:15;15127:414;15329:2;15311:21;;;15368:2;15348:18;;;15341:30;15407:34;15402:2;15387:18;;15380:62;-1:-1:-1;;;15473:2:101;15458:18;;15451:48;15531:3;15516:19;;15127:414::o;15546:168::-;15586:7;15652:1;15648;15644:6;15640:14;15637:1;15634:21;15629:1;15622:9;15615:17;15611:45;15608:71;;;15659:18;;:::i;:::-;-1:-1:-1;15699:9:101;;15546:168::o;15719:136::-;15758:3;15786:5;15776:39;;15795:18;;:::i;:::-;-1:-1:-1;;;15831:18:101;;15719:136::o;16347:545::-;16449:2;16444:3;16441:11;16438:448;;;16485:1;16510:5;16506:2;16499:17;16555:4;16551:2;16541:19;16625:2;16613:10;16609:19;16606:1;16602:27;16596:4;16592:38;16661:4;16649:10;16646:20;16643:47;;;-1:-1:-1;16684:4:101;16643:47;16739:2;16734:3;16730:12;16727:1;16723:20;16717:4;16713:31;16703:41;;16794:82;16812:2;16805:5;16802:13;16794:82;;;16857:17;;;16838:1;16827:13;16794:82;;;16798:3;;;16347:545;;;:::o;17068:1352::-;17194:3;17188:10;17221:18;17213:6;17210:30;17207:56;;;17243:18;;:::i;:::-;17272:97;17362:6;17322:38;17354:4;17348:11;17322:38;:::i;:::-;17316:4;17272:97;:::i;:::-;17424:4;;17488:2;17477:14;;17505:1;17500:663;;;;18207:1;18224:6;18221:89;;;-1:-1:-1;18276:19:101;;;18270:26;18221:89;-1:-1:-1;;17025:1:101;17021:11;;;17017:24;17013:29;17003:40;17049:1;17045:11;;;17000:57;18323:81;;17470:944;;17500:663;16294:1;16287:14;;;16331:4;16318:18;;-1:-1:-1;;17536:20:101;;;17654:236;17668:7;17665:1;17662:14;17654:236;;;17757:19;;;17751:26;17736:42;;17849:27;;;;17817:1;17805:14;;;;17684:19;;17654:236;;;17658:3;17918:6;17909:7;17906:19;17903:201;;;17979:19;;;17973:26;-1:-1:-1;;18062:1:101;18058:14;;;18074:3;18054:24;18050:37;18046:42;18031:58;18016:74;;17903:201;-1:-1:-1;;;;;18150:1:101;18134:14;;;18130:22;18117:36;;-1:-1:-1;17068:1352:101:o;18425:489::-;-1:-1:-1;;;;;18694:15:101;;;18676:34;;18746:15;;18741:2;18726:18;;18719:43;18793:2;18778:18;;18771:34;;;18841:3;18836:2;18821:18;;18814:31;;;18619:4;;18862:46;;18888:19;;18880:6;18862:46;:::i;:::-;18854:54;18425:489;-1:-1:-1;;;;;;18425:489:101:o;18919:249::-;18988:6;19041:2;19029:9;19020:7;19016:23;19012:32;19009:52;;;19057:1;19054;19047:12;19009:52;19089:9;19083:16;19108:30;19132:5;19108:30;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "39099": [
        {
          "start": 479,
          "length": 32
        },
        {
          "start": 2105,
          "length": 32
        }
      ],
      "39103": [
        {
          "start": 852,
          "length": 32
        },
        {
          "start": 2180,
          "length": 32
        }
      ],
      "39107": [
        {
          "start": 813,
          "length": 32
        },
        {
          "start": 2477,
          "length": 32
        }
      ],
      "39849": [
        {
          "start": 1712,
          "length": 32
        }
      ],
      "39852": [
        {
          "start": 1753,
          "length": 32
        }
      ],
      "39855": [
        {
          "start": 1794,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_STATION()": "db083d71",
    "BASE_URI_ATTESTATION_KEY()": "21d3d5cf",
    "BASE_URI_ATTESTOR()": "19f463f2",
    "OPTIMIST_ALLOWLIST()": "ce5dd1b5",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "baseURI()": "6c0360eb",
    "burn(uint256)": "42966c68",
    "getApproved(uint256)": "081812fc",
    "initialize(string,string)": "4cd88b76",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isOnAllowList(address)": "8f328a1f",
    "mint(address)": "6a627842",
    "name()": "06fdde03",
    "ownerOf(uint256)": "6352211e",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenIdOfAddress(address)": "7c08652f",
    "tokenURI(uint256)": "c87b56dd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_baseURIAttestor\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"},{\"internalType\":\"contract OptimistAllowlist\",\"name\":\"_optimistAllowlist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_ALLOWLIST\",\"outputs\":[{\"internalType\":\"contract OptimistAllowlist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"isOnAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIdOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Optimism CollectiveGitcoin\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"returns\":{\"_0\":\"BaseURI for all tokens.\"}},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"custom:semver\":\"2.0.0\",\"params\":{\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_baseURIAttestor\":\"Address of the baseURI attestor.\",\"_name\":\"Token name.\",\"_optimistAllowlist\":\"Address of the OptimistAllowlist contract\",\"_symbol\":\"Token symbol.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string)\":{\"params\":{\"_name\":\"Token name.\",\"_symbol\":\"Token symbol.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isOnAllowList(address)\":{\"returns\":{\"_0\":\"Whether or not the address is allowed to mint yet.\"}},\"mint(address)\":{\"params\":{\"_recipient\":\"Address of the token recipient.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenIdOfAddress(address)\":{\"returns\":{\"_0\":\"Token ID for the token owned by the given address.\"}},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"Token ID to query.\"},\"returns\":{\"_0\":\"Token URI for the given token by ID.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"Optimist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"BASE_URI_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by the attestor to attest the baseURI.\"},\"BASE_URI_ATTESTOR()\":{\"notice\":\"Attestor who attests to baseURI.\"},\"OPTIMIST_ALLOWLIST()\":{\"notice\":\"Address of the OptimistAllowlist contract.\"},\"approve(address,uint256)\":{\"notice\":\"Disabled for the Optimist NFT (Soul Bound Token).\"},\"baseURI()\":{\"notice\":\"Returns the baseURI for all tokens.\"},\"initialize(string,string)\":{\"notice\":\"Initializes the Optimist contract.\"},\"isOnAllowList(address)\":{\"notice\":\"Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.\"},\"mint(address)\":{\"notice\":\"Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Disabled for the Optimist NFT (Soul Bound Token).\"},\"tokenIdOfAddress(address)\":{\"notice\":\"Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the token URI for a given token by ID\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A Soul Bound Token for real humans only(tm).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal/op-nft/Optimist.sol\":\"Optimist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/universal/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0\",\"dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo\"]},\"contracts/universal/op-nft/Optimist.sol\":{\"keccak256\":\"0xf9c7973102666d1dc1b8a1918d6df82fa8fb470e1774aea840b300afb9699cac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6cc391ef9f663d551a7005f99613a07c767664d598d944297beaaa3b34e9014\",\"dweb:/ipfs/QmScmMT1UYTHmDHEz7HzkwaPoJHZb8nnTMFCSfL3jTpumK\"]},\"contracts/universal/op-nft/OptimistAllowlist.sol\":{\"keccak256\":\"0xd36a677571450d2d9be832beb80e5c37481fcdfc355e6a9b929ac9c8d4966ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ce185b077196faff837f0c3e57d97e1d332d5d7e72234e7838301cd4a8e3d94\",\"dweb:/ipfs/QmR8qZ4ZpRCoGLX9RGPP2oWTqefHttKstwNsJ4EG8veWha\"]},\"contracts/universal/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c\",\"dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr\"]},\"node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"keccak256\":\"0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482\",\"dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31c7d52f47a9174e236c0402654f42c16516c58c6851862f3bcb1b440b873498\",\"dweb:/ipfs/QmZQqiofa8jPJCCAfWyjNnBuoGXrR56Ct4HyW4ugRWfvCb\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a\",\"dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2\",\"dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77dec5f0117e876e485db228ec24a29b0e8215bf94762bfcc80fec670c5fad97\",\"dweb:/ipfs/Qmf1iZ7jqNWgGFs5zwrKVinZ8RsCZjzufqhE7zDnEgam5x\"]},\"node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3\",\"dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_baseURIAttestor",
              "type": "address"
            },
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            },
            {
              "internalType": "contract OptimistAllowlist",
              "name": "_optimistAllowlist",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE_URI_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE_URI_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_ALLOWLIST",
          "outputs": [
            {
              "internalType": "contract OptimistAllowlist",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isOnAllowList",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "tokenIdOfAddress",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "baseURI()": {
            "returns": {
              "_0": "BaseURI for all tokens."
            }
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
          },
          "constructor": {
            "custom:semver": "2.0.0",
            "params": {
              "_attestationStation": "Address of the AttestationStation contract.",
              "_baseURIAttestor": "Address of the baseURI attestor.",
              "_name": "Token name.",
              "_optimistAllowlist": "Address of the OptimistAllowlist contract",
              "_symbol": "Token symbol."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "initialize(string,string)": {
            "params": {
              "_name": "Token name.",
              "_symbol": "Token symbol."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isOnAllowList(address)": {
            "returns": {
              "_0": "Whether or not the address is allowed to mint yet."
            }
          },
          "mint(address)": {
            "params": {
              "_recipient": "Address of the token recipient."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenIdOfAddress(address)": {
            "returns": {
              "_0": "Token ID for the token owned by the given address."
            }
          },
          "tokenURI(uint256)": {
            "params": {
              "_tokenId": "Token ID to query."
            },
            "returns": {
              "_0": "Token URI for the given token by ID."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "BASE_URI_ATTESTATION_KEY()": {
            "notice": "Attestation key used by the attestor to attest the baseURI."
          },
          "BASE_URI_ATTESTOR()": {
            "notice": "Attestor who attests to baseURI."
          },
          "OPTIMIST_ALLOWLIST()": {
            "notice": "Address of the OptimistAllowlist contract."
          },
          "approve(address,uint256)": {
            "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
          },
          "baseURI()": {
            "notice": "Returns the baseURI for all tokens."
          },
          "initialize(string,string)": {
            "notice": "Initializes the Optimist contract."
          },
          "isOnAllowList(address)": {
            "notice": "Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint."
          },
          "mint(address)": {
            "notice": "Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address."
          },
          "setApprovalForAll(address,bool)": {
            "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
          },
          "tokenIdOfAddress(address)": {
            "notice": "Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the token URI for a given token by ID"
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/universal/op-nft/Optimist.sol": "Optimist"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/universal/op-nft/AttestationStation.sol": {
        "keccak256": "0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be",
        "urls": [
          "bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0",
          "dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/Optimist.sol": {
        "keccak256": "0xf9c7973102666d1dc1b8a1918d6df82fa8fb470e1774aea840b300afb9699cac",
        "urls": [
          "bzz-raw://f6cc391ef9f663d551a7005f99613a07c767664d598d944297beaaa3b34e9014",
          "dweb:/ipfs/QmScmMT1UYTHmDHEz7HzkwaPoJHZb8nnTMFCSfL3jTpumK"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/OptimistAllowlist.sol": {
        "keccak256": "0xd36a677571450d2d9be832beb80e5c37481fcdfc355e6a9b929ac9c8d4966ca0",
        "urls": [
          "bzz-raw://0ce185b077196faff837f0c3e57d97e1d332d5d7e72234e7838301cd4a8e3d94",
          "dweb:/ipfs/QmR8qZ4ZpRCoGLX9RGPP2oWTqefHttKstwNsJ4EG8veWha"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21",
        "urls": [
          "bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c",
          "dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr"
        ],
        "license": "MIT"
      },
      "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol": {
        "keccak256": "0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0",
        "urls": [
          "bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482",
          "dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
        "keccak256": "0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf",
        "urls": [
          "bzz-raw://31c7d52f47a9174e236c0402654f42c16516c58c6851862f3bcb1b440b873498",
          "dweb:/ipfs/QmZQqiofa8jPJCCAfWyjNnBuoGXrR56Ct4HyW4ugRWfvCb"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
        "keccak256": "0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5",
        "urls": [
          "bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a",
          "dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
        "keccak256": "0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005",
        "urls": [
          "bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2",
          "dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
        "keccak256": "0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d",
        "urls": [
          "bzz-raw://77dec5f0117e876e485db228ec24a29b0e8215bf94762bfcc80fec670c5fad97",
          "dweb:/ipfs/Qmf1iZ7jqNWgGFs5zwrKVinZ8RsCZjzufqhE7zDnEgam5x"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
        "keccak256": "0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70",
        "urls": [
          "bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3",
          "dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
        "keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
        "urls": [
          "bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
          "dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
        "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
        "urls": [
          "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
          "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/universal/op-nft/Optimist.sol",
    "id": 39328,
    "exportedSymbols": {
      "AttestationStation": [
        39072
      ],
      "ERC721BurnableUpgradeable": [
        39957
      ],
      "Optimist": [
        39327
      ],
      "OptimistAllowlist": [
        39491
      ],
      "Semver": [
        39907
      ],
      "Strings": [
        40964
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:5652:53",
    "nodes": [
      {
        "id": 39074,
        "nodeType": "PragmaDirective",
        "src": "32:23:53",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 39076,
        "nodeType": "ImportDirective",
        "src": "57:88:53",
        "nodes": [],
        "absolutePath": "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "file": "@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39328,
        "sourceUnit": 39908,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39075,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39907,
              "src": "66:6:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39078,
        "nodeType": "ImportDirective",
        "src": "146:138:53",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39328,
        "sourceUnit": 39958,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39077,
              "name": "ERC721BurnableUpgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39957,
              "src": "159:25:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39080,
        "nodeType": "ImportDirective",
        "src": "285:62:53",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39328,
        "sourceUnit": 39073,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39079,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39072,
              "src": "294:18:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39082,
        "nodeType": "ImportDirective",
        "src": "348:60:53",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/OptimistAllowlist.sol",
        "file": "./OptimistAllowlist.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39328,
        "sourceUnit": 39492,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39081,
              "name": "OptimistAllowlist",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39491,
              "src": "357:17:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39084,
        "nodeType": "ImportDirective",
        "src": "409:68:53",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/Strings.sol",
        "file": "@openzeppelin/contracts/utils/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39328,
        "sourceUnit": 40965,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39083,
              "name": "Strings",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40964,
              "src": "418:7:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39327,
        "nodeType": "ContractDefinition",
        "src": "613:5070:53",
        "nodes": [
          {
            "id": 39096,
            "nodeType": "VariableDeclaration",
            "src": "765:79:53",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39090,
              "nodeType": "StructuredDocumentation",
              "src": "674:86:53",
              "text": " @notice Attestation key used by the attestor to attest the baseURI."
            },
            "functionSelector": "21d3d5cf",
            "mutability": "constant",
            "name": "BASE_URI_ATTESTATION_KEY",
            "nameLocation": "789:24:53",
            "scope": 39327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 39091,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "765:7:53",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e626173652d757269",
                  "id": 39094,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "824:19:53",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                    "typeString": "literal_string \"optimist.base-uri\""
                  },
                  "value": "optimist.base-uri"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                    "typeString": "literal_string \"optimist.base-uri\""
                  }
                ],
                "id": 39093,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "816:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 39092,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "816:7:53",
                  "typeDescriptions": {}
                }
              },
              "id": 39095,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "816:28:53",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39099,
            "nodeType": "VariableDeclaration",
            "src": "915:42:53",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39097,
              "nodeType": "StructuredDocumentation",
              "src": "851:59:53",
              "text": " @notice Attestor who attests to baseURI."
            },
            "functionSelector": "19f463f2",
            "mutability": "immutable",
            "name": "BASE_URI_ATTESTOR",
            "nameLocation": "940:17:53",
            "scope": 39327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 39098,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "915:7:53",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39103,
            "nodeType": "VariableDeclaration",
            "src": "1039:55:53",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39100,
              "nodeType": "StructuredDocumentation",
              "src": "964:70:53",
              "text": " @notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "1075:19:53",
            "scope": 39327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$39072",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 39102,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 39101,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 39072,
                "src": "1039:18:53"
              },
              "referencedDeclaration": 39072,
              "src": "1039:18:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$39072",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39107,
            "nodeType": "VariableDeclaration",
            "src": "1175:53:53",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39104,
              "nodeType": "StructuredDocumentation",
              "src": "1101:69:53",
              "text": " @notice Address of the OptimistAllowlist contract."
            },
            "functionSelector": "ce5dd1b5",
            "mutability": "immutable",
            "name": "OPTIMIST_ALLOWLIST",
            "nameLocation": "1210:18:53",
            "scope": 39327,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
              "typeString": "contract OptimistAllowlist"
            },
            "typeName": {
              "id": 39106,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 39105,
                "name": "OptimistAllowlist",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 39491,
                "src": "1175:17:53"
              },
              "referencedDeclaration": 39491,
              "src": "1175:17:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                "typeString": "contract OptimistAllowlist"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39146,
            "nodeType": "FunctionDefinition",
            "src": "1594:411:53",
            "nodes": [],
            "body": {
              "id": 39145,
              "nodeType": "Block",
              "src": "1816:189:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 39130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39128,
                      "name": "BASE_URI_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39099,
                      "src": "1826:17:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39129,
                      "name": "_baseURIAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39114,
                      "src": "1846:16:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1826:36:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 39131,
                  "nodeType": "ExpressionStatement",
                  "src": "1826:36:53"
                },
                {
                  "expression": {
                    "id": 39134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39132,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39103,
                      "src": "1872:19:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39133,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39117,
                      "src": "1894:19:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "1872:41:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 39135,
                  "nodeType": "ExpressionStatement",
                  "src": "1872:41:53"
                },
                {
                  "expression": {
                    "id": 39138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39136,
                      "name": "OPTIMIST_ALLOWLIST",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39107,
                      "src": "1923:18:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                        "typeString": "contract OptimistAllowlist"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39137,
                      "name": "_optimistAllowlist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39120,
                      "src": "1944:18:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                        "typeString": "contract OptimistAllowlist"
                      }
                    },
                    "src": "1923:39:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                      "typeString": "contract OptimistAllowlist"
                    }
                  },
                  "id": 39139,
                  "nodeType": "ExpressionStatement",
                  "src": "1923:39:53"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39141,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39110,
                        "src": "1983:5:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 39142,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39112,
                        "src": "1990:7:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 39140,
                      "name": "initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39165,
                      "src": "1972:10:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 39143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1972:26:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39144,
                  "nodeType": "ExpressionStatement",
                  "src": "1972:26:53"
                }
              ]
            },
            "documentation": {
              "id": 39108,
              "nodeType": "StructuredDocumentation",
              "src": "1235:354:53",
              "text": " @custom:semver 2.0.0\n @param _name               Token name.\n @param _symbol             Token symbol.\n @param _baseURIAttestor    Address of the baseURI attestor.\n @param _attestationStation Address of the AttestationStation contract.\n @param _optimistAllowlist  Address of the OptimistAllowlist contract"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 39123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1807:1:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  {
                    "hexValue": "30",
                    "id": 39124,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1810:1:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "30",
                    "id": 39125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1813:1:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 39126,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 39122,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 39907,
                  "src": "1800:6:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "1800:15:53"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 39121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39110,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1629:5:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39146,
                  "src": "1615:19:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39109,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1615:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39112,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1658:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39146,
                  "src": "1644:21:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39111,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1644:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39114,
                  "mutability": "mutable",
                  "name": "_baseURIAttestor",
                  "nameLocation": "1683:16:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39146,
                  "src": "1675:24:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39113,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1675:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39117,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "1728:19:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39146,
                  "src": "1709:38:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$39072",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 39116,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39115,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39072,
                      "src": "1709:18:53"
                    },
                    "referencedDeclaration": 39072,
                    "src": "1709:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39120,
                  "mutability": "mutable",
                  "name": "_optimistAllowlist",
                  "nameLocation": "1775:18:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39146,
                  "src": "1757:36:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                    "typeString": "contract OptimistAllowlist"
                  },
                  "typeName": {
                    "id": 39119,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39118,
                      "name": "OptimistAllowlist",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39491,
                      "src": "1757:17:53"
                    },
                    "referencedDeclaration": 39491,
                    "src": "1757:17:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                      "typeString": "contract OptimistAllowlist"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1605:194:53"
            },
            "returnParameters": {
              "id": 39127,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1816:0:53"
            },
            "scope": 39327,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39165,
            "nodeType": "FunctionDefinition",
            "src": "2154:162:53",
            "nodes": [],
            "body": {
              "id": 39164,
              "nodeType": "Block",
              "src": "2237:79:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39157,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39149,
                        "src": "2261:5:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 39158,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39151,
                        "src": "2268:7:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 39156,
                      "name": "__ERC721_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44653,
                      "src": "2247:13:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 39159,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2247:29:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39160,
                  "nodeType": "ExpressionStatement",
                  "src": "2247:29:53"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 39161,
                      "name": "__ERC721Burnable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39925,
                      "src": "2286:21:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 39162,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2286:23:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39163,
                  "nodeType": "ExpressionStatement",
                  "src": "2286:23:53"
                }
              ]
            },
            "documentation": {
              "id": 39147,
              "nodeType": "StructuredDocumentation",
              "src": "2011:138:53",
              "text": " @notice Initializes the Optimist contract.\n @param _name   Token name.\n @param _symbol Token symbol."
            },
            "functionSelector": "4cd88b76",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 39154,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 39153,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 44508,
                  "src": "2225:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "2225:11:53"
              }
            ],
            "name": "initialize",
            "nameLocation": "2163:10:53",
            "parameters": {
              "id": 39152,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39149,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2188:5:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39165,
                  "src": "2174:19:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39148,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2174:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39151,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2209:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39165,
                  "src": "2195:21:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39150,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2195:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2173:44:53"
            },
            "returnParameters": {
              "id": 39155,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2237:0:53"
            },
            "scope": 39327,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39186,
            "nodeType": "FunctionDefinition",
            "src": "2658:194:53",
            "nodes": [],
            "body": {
              "id": 39185,
              "nodeType": "Block",
              "src": "2699:153:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 39173,
                            "name": "_recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39168,
                            "src": "2731:10:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 39172,
                          "name": "isOnAllowList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39252,
                          "src": "2717:13:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 39174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2717:25:53",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d6973743a2061646472657373206973206e6f74206f6e20616c6c6f774c697374",
                        "id": 39175,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2744:39:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c7b6182f789be6fc394fdc8ce80534d330b0ece65731aa1c69c0f6b325757aaf",
                          "typeString": "literal_string \"Optimist: address is not on allowList\""
                        },
                        "value": "Optimist: address is not on allowList"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c7b6182f789be6fc394fdc8ce80534d330b0ece65731aa1c69c0f6b325757aaf",
                          "typeString": "literal_string \"Optimist: address is not on allowList\""
                        }
                      ],
                      "id": 39171,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2709:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2709:75:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39177,
                  "nodeType": "ExpressionStatement",
                  "src": "2709:75:53"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39179,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39168,
                        "src": "2804:10:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 39181,
                            "name": "_recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39168,
                            "src": "2833:10:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 39180,
                          "name": "tokenIdOfAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39269,
                          "src": "2816:16:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) pure returns (uint256)"
                          }
                        },
                        "id": 39182,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2816:28:53",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 39178,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        45090,
                        45119
                      ],
                      "referencedDeclaration": 45090,
                      "src": "2794:9:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 39183,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2794:51:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39184,
                  "nodeType": "ExpressionStatement",
                  "src": "2794:51:53"
                }
              ]
            },
            "documentation": {
              "id": 39166,
              "nodeType": "StructuredDocumentation",
              "src": "2322:331:53",
              "text": " @notice Allows an address to mint an Optimist NFT. Token ID is the uint256 representation\n         of the recipient's address. Recipients must be permitted to mint, eventually anyone\n         will be able to mint. One token per address.\n @param _recipient Address of the token recipient."
            },
            "functionSelector": "6a627842",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nameLocation": "2667:4:53",
            "parameters": {
              "id": 39169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39168,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "2680:10:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39186,
                  "src": "2672:18:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39167,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2672:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2671:20:53"
            },
            "returnParameters": {
              "id": 39170,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2699:0:53"
            },
            "scope": 39327,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39212,
            "nodeType": "FunctionDefinition",
            "src": "2971:375:53",
            "nodes": [],
            "body": {
              "id": 39211,
              "nodeType": "Block",
              "src": "3026:320:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 39198,
                                "name": "BASE_URI_ATTESTOR",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39099,
                                "src": "3175:17:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 39201,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "3226:4:53",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Optimist_$39327",
                                      "typeString": "contract Optimist"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Optimist_$39327",
                                      "typeString": "contract Optimist"
                                    }
                                  ],
                                  "id": 39200,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3218:7:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 39199,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3218:7:53",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 39202,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3218:13:53",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "6f7074696d6973742e626173652d757269",
                                    "id": 39205,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3265:19:53",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                                      "typeString": "literal_string \"optimist.base-uri\""
                                    },
                                    "value": "optimist.base-uri"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                                      "typeString": "literal_string \"optimist.base-uri\""
                                    }
                                  ],
                                  "id": 39204,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3257:7:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 39203,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3257:7:53",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 39206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3257:28:53",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 39196,
                                "name": "ATTESTATION_STATION",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39103,
                                "src": "3117:19:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_AttestationStation_$39072",
                                  "typeString": "contract AttestationStation"
                                }
                              },
                              "id": 39197,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "attestations",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 38977,
                              "src": "3117:32:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (address,address,bytes32) view external returns (bytes memory)"
                              }
                            },
                            "id": 39207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3117:190:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 39194,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3079:3:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 39195,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3079:16:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 39208,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3079:246:53",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 39193,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3055:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 39192,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3055:6:53",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 39209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3055:284:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 39191,
                  "id": 39210,
                  "nodeType": "Return",
                  "src": "3036:303:53"
                }
              ]
            },
            "documentation": {
              "id": 39187,
              "nodeType": "StructuredDocumentation",
              "src": "2858:108:53",
              "text": " @notice Returns the baseURI for all tokens.\n @return BaseURI for all tokens."
            },
            "functionSelector": "6c0360eb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "baseURI",
            "nameLocation": "2980:7:53",
            "parameters": {
              "id": 39188,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2987:2:53"
            },
            "returnParameters": {
              "id": 39191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39190,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39212,
                  "src": "3011:13:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39189,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3011:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3010:15:53"
            },
            "scope": 39327,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39238,
            "nodeType": "FunctionDefinition",
            "src": "3531:424:53",
            "nodes": [],
            "body": {
              "id": 39237,
              "nodeType": "Block",
              "src": "3620:335:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 39225,
                              "name": "baseURI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39212,
                              "src": "3711:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                                "typeString": "function () view returns (string memory)"
                              }
                            },
                            "id": 39226,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3711:9:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "hexValue": "2f",
                            "id": 39227,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3742:3:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
                              "typeString": "literal_string \"/\""
                            },
                            "value": "/"
                          },
                          {
                            "arguments": [
                              {
                                "id": 39230,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39215,
                                "src": "3874:8:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "hexValue": "3230",
                                "id": 39231,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3884:2:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                }
                              ],
                              "expression": {
                                "id": 39228,
                                "name": "Strings",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40964,
                                "src": "3854:7:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Strings_$40964_$",
                                  "typeString": "type(library Strings)"
                                }
                              },
                              "id": 39229,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toHexString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 40943,
                              "src": "3854:19:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256,uint256) pure returns (string memory)"
                              }
                            },
                            "id": 39232,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3854:33:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "hexValue": "2e6a736f6e",
                            "id": 39233,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3909:7:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                              "typeString": "literal_string \".json\""
                            },
                            "value": ".json"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
                              "typeString": "literal_string \"/\""
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                              "typeString": "literal_string \".json\""
                            }
                          ],
                          "expression": {
                            "id": 39223,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3673:3:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 39224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3673:16:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 39234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3673:261:53",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 39222,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3649:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 39221,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3649:6:53",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 39235,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3649:299:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 39220,
                  "id": 39236,
                  "nodeType": "Return",
                  "src": "3630:318:53"
                }
              ]
            },
            "baseFunctions": [
              44813
            ],
            "documentation": {
              "id": 39213,
              "nodeType": "StructuredDocumentation",
              "src": "3352:174:53",
              "text": " @notice Returns the token URI for a given token by ID\n @param _tokenId Token ID to query.\n @return Token URI for the given token by ID."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3540:8:53",
            "overrides": {
              "id": 39217,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3587:8:53"
            },
            "parameters": {
              "id": 39216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39215,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3557:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39238,
                  "src": "3549:16:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39214,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3548:18:53"
            },
            "returnParameters": {
              "id": 39220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39219,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39238,
                  "src": "3605:13:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39218,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3605:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3604:15:53"
            },
            "scope": 39327,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 39252,
            "nodeType": "FunctionDefinition",
            "src": "4353:140:53",
            "nodes": [],
            "body": {
              "id": 39251,
              "nodeType": "Block",
              "src": "4423:70:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39248,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39241,
                        "src": "4475:10:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 39246,
                        "name": "OPTIMIST_ALLOWLIST",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39107,
                        "src": "4440:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_OptimistAllowlist_$39491",
                          "typeString": "contract OptimistAllowlist"
                        }
                      },
                      "id": 39247,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isAllowedToMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39421,
                      "src": "4440:34:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view external returns (bool)"
                      }
                    },
                    "id": 39249,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4440:46:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39245,
                  "id": 39250,
                  "nodeType": "Return",
                  "src": "4433:53:53"
                }
              ]
            },
            "documentation": {
              "id": 39239,
              "nodeType": "StructuredDocumentation",
              "src": "3961:387:53",
              "text": " @notice Checks OptimistAllowlist to determine whether a given address is allowed to mint\n         the Optimist NFT. Since the Optimist NFT will also be used as part of the\n         Citizens House, mints are currently restricted. Eventually anyone will be able\n         to mint.\n @return Whether or not the address is allowed to mint yet."
            },
            "functionSelector": "8f328a1f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isOnAllowList",
            "nameLocation": "4362:13:53",
            "parameters": {
              "id": 39242,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39241,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "4384:10:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39252,
                  "src": "4376:18:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4376:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4375:20:53"
            },
            "returnParameters": {
              "id": 39245,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39244,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39252,
                  "src": "4417:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39243,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4417:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4416:6:53"
            },
            "scope": 39327,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39269,
            "nodeType": "FunctionDefinition",
            "src": "4736:120:53",
            "nodes": [],
            "body": {
              "id": 39268,
              "nodeType": "Block",
              "src": "4808:48:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 39264,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39255,
                            "src": "4841:6:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 39263,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4833:7:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": {
                            "id": 39262,
                            "name": "uint160",
                            "nodeType": "ElementaryTypeName",
                            "src": "4833:7:53",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 39265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4833:15:53",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "id": 39261,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4825:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 39260,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4825:7:53",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 39266,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4825:24:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 39259,
                  "id": 39267,
                  "nodeType": "Return",
                  "src": "4818:31:53"
                }
              ]
            },
            "documentation": {
              "id": 39253,
              "nodeType": "StructuredDocumentation",
              "src": "4499:232:53",
              "text": " @notice Returns the token ID for the token owned by a given address. This is the uint256\n         representation of the given address.\n @return Token ID for the token owned by the given address."
            },
            "functionSelector": "7c08652f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenIdOfAddress",
            "nameLocation": "4745:16:53",
            "parameters": {
              "id": 39256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39255,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "4770:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39269,
                  "src": "4762:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39254,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4762:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4761:16:53"
            },
            "returnParameters": {
              "id": 39259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39258,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39269,
                  "src": "4799:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39257,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4799:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4798:9:53"
            },
            "scope": 39327,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39283,
            "nodeType": "FunctionDefinition",
            "src": "4943:109:53",
            "nodes": [],
            "body": {
              "id": 39282,
              "nodeType": "Block",
              "src": "4999:53:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 39279,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5016:28:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 39278,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "5009:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 39280,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5009:36:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39281,
                  "nodeType": "ExpressionStatement",
                  "src": "5009:36:53"
                }
              ]
            },
            "baseFunctions": [
              44865
            ],
            "documentation": {
              "id": 39270,
              "nodeType": "StructuredDocumentation",
              "src": "4862:76:53",
              "text": " @notice Disabled for the Optimist NFT (Soul Bound Token)."
            },
            "functionSelector": "095ea7b3",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "4952:7:53",
            "overrides": {
              "id": 39276,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4990:8:53"
            },
            "parameters": {
              "id": 39275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39272,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39283,
                  "src": "4960:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39271,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4960:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39274,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39283,
                  "src": "4969:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39273,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4969:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4959:18:53"
            },
            "returnParameters": {
              "id": 39277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4999:0:53"
            },
            "scope": 39327,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39297,
            "nodeType": "FunctionDefinition",
            "src": "5139:119:53",
            "nodes": [],
            "body": {
              "id": 39296,
              "nodeType": "Block",
              "src": "5205:53:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 39293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5222:28:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 39292,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "5215:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 39294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5215:36:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39295,
                  "nodeType": "ExpressionStatement",
                  "src": "5215:36:53"
                }
              ]
            },
            "baseFunctions": [
              44900
            ],
            "documentation": {
              "id": 39284,
              "nodeType": "StructuredDocumentation",
              "src": "5058:76:53",
              "text": " @notice Disabled for the Optimist NFT (Soul Bound Token)."
            },
            "functionSelector": "a22cb465",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForAll",
            "nameLocation": "5148:17:53",
            "overrides": {
              "id": 39290,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5196:8:53"
            },
            "parameters": {
              "id": 39289,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39286,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39297,
                  "src": "5166:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39285,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5166:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39288,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39297,
                  "src": "5175:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39287,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5175:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5165:15:53"
            },
            "returnParameters": {
              "id": 39291,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5205:0:53"
            },
            "scope": 39327,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 39326,
            "nodeType": "FunctionDefinition",
            "src": "5462:219:53",
            "nodes": [],
            "body": {
              "id": 39325,
              "nodeType": "Block",
              "src": "5585:96:53",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 39321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 39314,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 39309,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39300,
                            "src": "5603:5:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 39312,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5620:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 39311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5612:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 39310,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5612:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 39313,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5612:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5603:19:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 39320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 39315,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39302,
                            "src": "5626:3:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 39318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5641:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 39317,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5633:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 39316,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5633:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 39319,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5633:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5626:17:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "5603:40:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 39322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5645:28:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 39308,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5595:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5595:79:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39324,
                  "nodeType": "ExpressionStatement",
                  "src": "5595:79:53"
                }
              ]
            },
            "baseFunctions": [
              45463
            ],
            "documentation": {
              "id": 39298,
              "nodeType": "StructuredDocumentation",
              "src": "5264:193:53",
              "text": " @notice Prevents transfers of the Optimist NFT (Soul Bound Token).\n @param _from Address of the token sender.\n @param _to   Address of the token recipient."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "5471:20:53",
            "overrides": {
              "id": 39306,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5576:8:53"
            },
            "parameters": {
              "id": 39305,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39300,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "5509:5:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39326,
                  "src": "5501:13:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39299,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5501:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39302,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5532:3:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39326,
                  "src": "5524:11:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39301,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5524:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39304,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39326,
                  "src": "5545:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39303,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5545:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5491:67:53"
            },
            "returnParameters": {
              "id": 39307,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5585:0:53"
            },
            "scope": 39327,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39086,
              "name": "ERC721BurnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39957,
              "src": "634:25:53"
            },
            "id": 39087,
            "nodeType": "InheritanceSpecifier",
            "src": "634:25:53"
          },
          {
            "baseName": {
              "id": 39088,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39907,
              "src": "661:6:53"
            },
            "id": 39089,
            "nodeType": "InheritanceSpecifier",
            "src": "661:6:53"
          }
        ],
        "canonicalName": "Optimist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 39085,
          "nodeType": "StructuredDocumentation",
          "src": "479:133:53",
          "text": " @author Optimism Collective\n @author Gitcoin\n @title  Optimist\n @notice A Soul Bound Token for real humans only(tm)."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          39327,
          39907,
          39957,
          45480,
          73307,
          73280,
          73351,
          73526,
          45522,
          44588
        ],
        "name": "Optimist",
        "nameLocation": "622:8:53",
        "scope": 39328,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 53
}