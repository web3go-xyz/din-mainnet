{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAttestor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coinbaseQuestAttestor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optimistInviter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALLOWLIST_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COINBASE_QUEST_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_INVITER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "isAllowedToMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x61016060405234801561001157600080fd5b506040516108e33803806108e38339810160408190526100309161007c565b6001608052600060a081905260c0526001600160a01b0393841660e0529183166101005282166101205216610140526100db565b6001600160a01b038116811461007957600080fd5b50565b6000806000806080858703121561009257600080fd5b845161009d81610064565b60208601519094506100ae81610064565b60408601519093506100bf81610064565b60608601519092506100d081610064565b939692955090935050565b60805160a05160c05160e0516101005161012051610140516107936101506000396000818161010e0152610329015260008181609201526102e201526000818161018b01526102a101526000818161016401526104ab0152600061025001526000610227015260006101fe01526107936000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063819f7e841161005b578063819f7e8414610130578063db083d711461015f578063db3c316314610186578063e7bd804e146101ad57600080fd5b80633ac52df71461008d5780634813d8a6146100d157806354fd4d50146100f45780635e4f489a14610109575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e46100df366004610524565b6101c8565b60405190151581526020016100c8565b6100fc6101f7565b6040516100c89190610584565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61015176636f696e626173652e71756573742d656c696769626c6560481b81565b6040519081526020016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b610151701bdc1d1a5b5a5cdd0b98d85b8b5b5a5b9d607a1b81565b60006101d38261029a565b806101e257506101e2826102db565b806101f157506101f182610322565b92915050565b60606102227f000000000000000000000000000000000000000000000000000000000000000061036f565b61024b7f000000000000000000000000000000000000000000000000000000000000000061036f565b6102747f000000000000000000000000000000000000000000000000000000000000000061036f565b604051602001610286939291906105b7565b604051602081830303815290604052905090565b60006101f17f000000000000000000000000000000000000000000000000000000000000000083701bdc1d1a5b5a5cdd0b98d85b8b5b5a5b9d607a1b610478565b60006101f17f00000000000000000000000000000000000000000000000000000000000000008376636f696e626173652e71756573742d656c696769626c6560481b610478565b60006101f17f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e76697465000000610478565b6060816000036103965750506040805180820190915260018152600360fc1b602082015290565b8160005b81156103c057806103aa81610627565b91506103b99050600a83610656565b915061039a565b60008167ffffffffffffffff8111156103db576103db61066a565b6040519080825280601f01601f191660200182016040528015610405576020820181803683370190505b5090505b84156104705761041a600183610680565b9150610427600a86610697565b6104329060306106ab565b60f81b818381518110610447576104476106c3565b60200101906001600160f81b031916908160001a905350610469600a86610656565b9450610409565b949350505050565b6040516329b42cb560e01b81526001600160a01b03848116600483015283811660248301526044820183905260009182917f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa1580156104f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051a91908101906106d9565b5111949350505050565b60006020828403121561053657600080fd5b81356001600160a01b038116811461054d57600080fd5b9392505050565b60005b8381101561056f578181015183820152602001610557565b8381111561057e576000848401525b50505050565b60208152600082518060208401526105a3816040850160208701610554565b601f01601f19169190910160400192915050565b600084516105c9818460208901610554565b8083019050601760f91b80825285516105e9816001850160208a01610554565b60019201918201528351610604816002840160208801610554565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161063957610639610611565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261066557610665610640565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561069257610692610611565b500390565b6000826106a6576106a6610640565b500690565b600082198211156106be576106be610611565b500190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106eb57600080fd5b815167ffffffffffffffff8082111561070357600080fd5b818401915084601f83011261071757600080fd5b8151818111156107295761072961066a565b604051601f8201601f19908116603f011681019083821181831017156107515761075161066a565b8160405282815287602084870101111561076a57600080fd5b61077b836020830160208801610554565b97965050505050505056fea164736f6c634300080f000a",
    "sourceMap": "538:5380:54:-:0;;;2004:402;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2187:1;762:22:57;;2190:1:54;794:22:57;;;;826;;-1:-1:-1;;;;;2206:41:54;;::::1;;::::0;2257:39;;::::1;;::::0;2306:48;::::1;;::::0;2364:35:::1;;::::0;538:5380;;14:151:101;-1:-1:-1;;;;;109:31:101;;99:42;;89:70;;155:1;152;145:12;89:70;14:151;:::o;170:762::-;295:6;303;311;319;372:3;360:9;351:7;347:23;343:33;340:53;;;389:1;386;379:12;340:53;421:9;415:16;440:51;485:5;440:51;:::i;:::-;560:2;545:18;;539:25;510:5;;-1:-1:-1;573:53:101;539:25;573:53;:::i;:::-;697:2;682:18;;676:25;645:7;;-1:-1:-1;710:53:101;676:25;710:53;:::i;:::-;834:2;819:18;;813:25;782:7;;-1:-1:-1;847:53:101;813:25;847:53;:::i;:::-;170:762;;;;-1:-1:-1;170:762:101;;-1:-1:-1;;170:762:101:o;:::-;538:5380:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063819f7e841161005b578063819f7e8414610130578063db083d711461015f578063db3c316314610186578063e7bd804e146101ad57600080fd5b80633ac52df71461008d5780634813d8a6146100d157806354fd4d50146100f45780635e4f489a14610109575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e46100df366004610524565b6101c8565b60405190151581526020016100c8565b6100fc6101f7565b6040516100c89190610584565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61015176636f696e626173652e71756573742d656c696769626c6560481b81565b6040519081526020016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b610151701bdc1d1a5b5a5cdd0b98d85b8b5b5a5b9d607a1b81565b60006101d38261029a565b806101e257506101e2826102db565b806101f157506101f182610322565b92915050565b60606102227f000000000000000000000000000000000000000000000000000000000000000061036f565b61024b7f000000000000000000000000000000000000000000000000000000000000000061036f565b6102747f000000000000000000000000000000000000000000000000000000000000000061036f565b604051602001610286939291906105b7565b604051602081830303815290604052905090565b60006101f17f000000000000000000000000000000000000000000000000000000000000000083701bdc1d1a5b5a5cdd0b98d85b8b5b5a5b9d607a1b610478565b60006101f17f00000000000000000000000000000000000000000000000000000000000000008376636f696e626173652e71756573742d656c696769626c6560481b610478565b60006101f17f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e76697465000000610478565b6060816000036103965750506040805180820190915260018152600360fc1b602082015290565b8160005b81156103c057806103aa81610627565b91506103b99050600a83610656565b915061039a565b60008167ffffffffffffffff8111156103db576103db61066a565b6040519080825280601f01601f191660200182016040528015610405576020820181803683370190505b5090505b84156104705761041a600183610680565b9150610427600a86610697565b6104329060306106ab565b60f81b818381518110610447576104476106c3565b60200101906001600160f81b031916908160001a905350610469600a86610656565b9450610409565b949350505050565b6040516329b42cb560e01b81526001600160a01b03848116600483015283811660248301526044820183905260009182917f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa1580156104f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051a91908101906106d9565b5111949350505050565b60006020828403121561053657600080fd5b81356001600160a01b038116811461054d57600080fd5b9392505050565b60005b8381101561056f578181015183820152602001610557565b8381111561057e576000848401525b50505050565b60208152600082518060208401526105a3816040850160208701610554565b601f01601f19169190910160400192915050565b600084516105c9818460208901610554565b8083019050601760f91b80825285516105e9816001850160208a01610554565b60019201918201528351610604816002840160208801610554565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161063957610639610611565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261066557610665610640565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561069257610692610611565b500390565b6000826106a6576106a6610640565b500690565b600082198211156106be576106be610611565b500190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106eb57600080fd5b815167ffffffffffffffff8082111561070357600080fd5b818401915084601f83011261071757600080fd5b8151818111156107295761072961066a565b604051601f8201601f19908116603f011681019083821181831017156107515761075161066a565b8160405282815287602084870101111561076a57600080fd5b61077b836020830160208801610554565b97965050505050505056fea164736f6c634300080f000a",
    "sourceMap": "538:5380:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1402:48;;;;;;;;-1:-1:-1;;;;;178:32:101;;;160:51;;148:2;133:18;1402:48:54;;;;;;;;3223:278;;;;;;:::i;:::-;;:::i;:::-;;;678:14:101;;671:22;653:41;;641:2;626:18;3223:278:54;513:187:101;972:372:57;;;:::i;:::-;;;;;;;:::i;1597:41:54:-;;;;;922:108;;-1:-1:-1;;;922:108:54;;;;;1502:25:101;;;1490:2;1475:18;922:108:54;1356:177:101;1112:55:54;;;;;1260:43;;;;;717:88;;-1:-1:-1;;;717:88:54;;3223:278;3287:4;3322:46;3359:8;3322:36;:46::i;:::-;:112;;;;3384:50;3425:8;3384:40;:50::i;:::-;3322:172;;;;3450:44;3485:8;3450:34;:44::i;:::-;3303:191;3223:278;-1:-1:-1;;3223:278:54:o;972:372:57:-;1012:13;1118:31;1135:13;1118:16;:31::i;:::-;1196;1213:13;1196:16;:31::i;:::-;1274;1291:13;1274:16;:31::i;:::-;1080:243;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1037:300;;972:372;:::o;3774:271:54:-;3861:4;3953:85;3974:18;3994:8;-1:-1:-1;;;3953:20:54;:85::i;4282:376::-;4397:4;4493:158;4531:23;4572:8;-1:-1:-1;;;4493:20:54;:158::i;4902:365::-;4987:4;5085:175;5123:16;5157:8;418:40:56;5085:20:54;:175::i;392:703:76:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:76;;;;;;;;;;;;-1:-1:-1;;;691:10:76;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:76;;-1:-1:-1;837:2:76;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:76;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:76;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;966:56:76;;;;;;;;-1:-1:-1;1036:11:76;1045:2;1036:11;;:::i;:::-;;;908:150;;;1081:6;392:703;-1:-1:-1;;;;392:703:76:o;5688:228:54:-;5842:56;;-1:-1:-1;;;5842:56:54;;-1:-1:-1;;;;;4170:15:101;;;5842:56:54;;;4152:34:101;4222:15;;;4202:18;;;4195:43;4254:18;;;4247:34;;;5819:4:54;;;;5842:19;:32;;;;4087:18:101;;5842:56:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5842:56:54;;;;;;;;;;;;:::i;:::-;:63;:67;;5688:228;-1:-1:-1;;;;5688:228:54:o;222:286:101:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:101;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:101:o;705:258::-;777:1;787:113;801:6;798:1;795:13;787:113;;;877:11;;;871:18;858:11;;;851:39;823:2;816:10;787:113;;;918:6;915:1;912:13;909:48;;;953:1;944:6;939:3;935:16;928:27;909:48;;705:258;;;:::o;968:383::-;1117:2;1106:9;1099:21;1080:4;1149:6;1143:13;1192:6;1187:2;1176:9;1172:18;1165:34;1208:66;1267:6;1262:2;1251:9;1247:18;1242:2;1234:6;1230:15;1208:66;:::i;:::-;1335:2;1314:15;-1:-1:-1;;1310:29:101;1295:45;;;;1342:2;1291:54;;968:383;-1:-1:-1;;968:383:101:o;1774:960::-;2203:3;2241:6;2235:13;2257:53;2303:6;2298:3;2291:4;2283:6;2279:17;2257:53;:::i;:::-;2341:6;2336:3;2332:16;2319:29;;-1:-1:-1;;;2393:2:101;2386:5;2379:17;2427:6;2421:13;2443:65;2499:8;2495:1;2488:5;2484:13;2477:4;2469:6;2465:17;2443:65;:::i;:::-;2571:1;2527:20;;2563:10;;;2556:22;2603:13;;2625:62;2603:13;2674:1;2666:10;;2659:4;2647:17;;2625:62;:::i;:::-;2707:17;2726:1;2703:25;;1774:960;-1:-1:-1;;;;;1774:960:101:o;2739:127::-;2800:10;2795:3;2791:20;2788:1;2781:31;2831:4;2828:1;2821:15;2855:4;2852:1;2845:15;2871:135;2910:3;2931:17;;;2928:43;;2951:18;;:::i;:::-;-1:-1:-1;2998:1:101;2987:13;;2871:135::o;3011:127::-;3072:10;3067:3;3063:20;3060:1;3053:31;3103:4;3100:1;3093:15;3127:4;3124:1;3117:15;3143:120;3183:1;3209;3199:35;;3214:18;;:::i;:::-;-1:-1:-1;3248:9:101;;3143:120::o;3268:127::-;3329:10;3324:3;3320:20;3317:1;3310:31;3360:4;3357:1;3350:15;3384:4;3381:1;3374:15;3400:125;3440:4;3468:1;3465;3462:8;3459:34;;;3473:18;;:::i;:::-;-1:-1:-1;3510:9:101;;3400:125::o;3530:112::-;3562:1;3588;3578:35;;3593:18;;:::i;:::-;-1:-1:-1;3627:9:101;;3530:112::o;3647:128::-;3687:3;3718:1;3714:6;3711:1;3708:13;3705:39;;;3724:18;;:::i;:::-;-1:-1:-1;3760:9:101;;3647:128::o;3780:127::-;3841:10;3836:3;3832:20;3829:1;3822:31;3872:4;3869:1;3862:15;3896:4;3893:1;3886:15;4292:883;4371:6;4424:2;4412:9;4403:7;4399:23;4395:32;4392:52;;;4440:1;4437;4430:12;4392:52;4473:9;4467:16;4502:18;4543:2;4535:6;4532:14;4529:34;;;4559:1;4556;4549:12;4529:34;4597:6;4586:9;4582:22;4572:32;;4642:7;4635:4;4631:2;4627:13;4623:27;4613:55;;4664:1;4661;4654:12;4613:55;4693:2;4687:9;4715:2;4711;4708:10;4705:36;;;4721:18;;:::i;:::-;4796:2;4790:9;4764:2;4850:13;;-1:-1:-1;;4846:22:101;;;4870:2;4842:31;4838:40;4826:53;;;4894:18;;;4914:22;;;4891:46;4888:72;;;4940:18;;:::i;:::-;4980:10;4976:2;4969:22;5015:2;5007:6;5000:18;5055:7;5050:2;5045;5041;5037:11;5033:20;5030:33;5027:53;;;5076:1;5073;5066:12;5027:53;5089:55;5141:2;5136;5128:6;5124:15;5119:2;5115;5111:11;5089:55;:::i;:::-;5163:6;4292:883;-1:-1:-1;;;;;;;4292:883:101:o",
    "linkReferences": {},
    "immutableReferences": {
      "39356": [
        {
          "start": 356,
          "length": 32
        },
        {
          "start": 1195,
          "length": 32
        }
      ],
      "39359": [
        {
          "start": 395,
          "length": 32
        },
        {
          "start": 673,
          "length": 32
        }
      ],
      "39362": [
        {
          "start": 146,
          "length": 32
        },
        {
          "start": 738,
          "length": 32
        }
      ],
      "39365": [
        {
          "start": 270,
          "length": 32
        },
        {
          "start": 809,
          "length": 32
        }
      ],
      "39849": [
        {
          "start": 510,
          "length": 32
        }
      ],
      "39852": [
        {
          "start": 551,
          "length": 32
        }
      ],
      "39855": [
        {
          "start": 592,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ALLOWLIST_ATTESTOR()": "db3c3163",
    "ATTESTATION_STATION()": "db083d71",
    "COINBASE_QUEST_ATTESTOR()": "3ac52df7",
    "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": "819f7e84",
    "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": "e7bd804e",
    "OPTIMIST_INVITER()": "5e4f489a",
    "isAllowedToMint(address)": "4813d8a6",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAttestor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coinbaseQuestAttestor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optimistInviter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLOWLIST_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COINBASE_QUEST_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_CAN_MINT_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_INVITER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"isAllowedToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:semver\":\"1.0.0\",\"params\":{\"_allowlistAttestor\":\"Address of the allowlist attestor.\",\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_coinbaseQuestAttestor\":\"Address of the Coinbase Quest attestor.\",\"_optimistInviter\":\"Address of the OptimistInviter contract.\"}},\"isAllowedToMint(address)\":{\"params\":{\"_claimer\":\"Address to check.\"},\"returns\":{\"_0\":\"Whether or not the address is allowed to mint yet.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"OptimistAllowlist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ALLOWLIST_ATTESTOR()\":{\"notice\":\"Attestor that issues 'optimist.can-mint' attestations.\"},\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"COINBASE_QUEST_ATTESTOR()\":{\"notice\":\"Attestor that issues 'coinbase.quest-eligible' attestations.\"},\"COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by Coinbase to issue attestations for Quest participants.\"},\"OPTIMIST_CAN_MINT_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.\"},\"OPTIMIST_INVITER()\":{\"notice\":\"Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.\"},\"isAllowedToMint(address)\":{\"notice\":\"Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:         1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.         2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor         3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter            contract.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"Source of truth for whether an address is able to mint an Optimist NFT. isAllowedToMint function checks various signals to return boolean value for whether an address is eligible or not.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal/op-nft/OptimistAllowlist.sol\":\"OptimistAllowlist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/universal/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0\",\"dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo\"]},\"contracts/universal/op-nft/OptimistAllowlist.sol\":{\"keccak256\":\"0xd36a677571450d2d9be832beb80e5c37481fcdfc355e6a9b929ac9c8d4966ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ce185b077196faff837f0c3e57d97e1d332d5d7e72234e7838301cd4a8e3d94\",\"dweb:/ipfs/QmR8qZ4ZpRCoGLX9RGPP2oWTqefHttKstwNsJ4EG8veWha\"]},\"contracts/universal/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c\",\"dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr\"]},\"node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"keccak256\":\"0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482\",\"dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_allowlistAttestor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_coinbaseQuestAttestor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_optimistInviter",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ALLOWLIST_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COINBASE_QUEST_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_INVITER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isAllowedToMint",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "constructor": {
            "custom:semver": "1.0.0",
            "params": {
              "_allowlistAttestor": "Address of the allowlist attestor.",
              "_attestationStation": "Address of the AttestationStation contract.",
              "_coinbaseQuestAttestor": "Address of the Coinbase Quest attestor.",
              "_optimistInviter": "Address of the OptimistInviter contract."
            }
          },
          "isAllowedToMint(address)": {
            "params": {
              "_claimer": "Address to check."
            },
            "returns": {
              "_0": "Whether or not the address is allowed to mint yet."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ALLOWLIST_ATTESTOR()": {
            "notice": "Attestor that issues 'optimist.can-mint' attestations."
          },
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "COINBASE_QUEST_ATTESTOR()": {
            "notice": "Attestor that issues 'coinbase.quest-eligible' attestations."
          },
          "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": {
            "notice": "Attestation key used by Coinbase to issue attestations for Quest participants."
          },
          "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": {
            "notice": "Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist."
          },
          "OPTIMIST_INVITER()": {
            "notice": "Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations."
          },
          "isAllowedToMint(address)": {
            "notice": "Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:         1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.         2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor         3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter            contract."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/universal/op-nft/OptimistAllowlist.sol": "OptimistAllowlist"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/universal/op-nft/AttestationStation.sol": {
        "keccak256": "0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be",
        "urls": [
          "bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0",
          "dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/OptimistAllowlist.sol": {
        "keccak256": "0xd36a677571450d2d9be832beb80e5c37481fcdfc355e6a9b929ac9c8d4966ca0",
        "urls": [
          "bzz-raw://0ce185b077196faff837f0c3e57d97e1d332d5d7e72234e7838301cd4a8e3d94",
          "dweb:/ipfs/QmR8qZ4ZpRCoGLX9RGPP2oWTqefHttKstwNsJ4EG8veWha"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21",
        "urls": [
          "bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c",
          "dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr"
        ],
        "license": "MIT"
      },
      "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol": {
        "keccak256": "0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0",
        "urls": [
          "bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482",
          "dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/universal/op-nft/OptimistAllowlist.sol",
    "id": 39492,
    "exportedSymbols": {
      "AttestationStation": [
        39072
      ],
      "OptimistAllowlist": [
        39491
      ],
      "OptimistConstants": [
        39841
      ],
      "Semver": [
        39907
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:5887:54",
    "nodes": [
      {
        "id": 39329,
        "nodeType": "PragmaDirective",
        "src": "32:23:54",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 39331,
        "nodeType": "ImportDirective",
        "src": "57:88:54",
        "nodes": [],
        "absolutePath": "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "file": "@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39492,
        "sourceUnit": 39908,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39330,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39907,
              "src": "66:6:54",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39333,
        "nodeType": "ImportDirective",
        "src": "146:62:54",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39492,
        "sourceUnit": 39073,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39332,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39072,
              "src": "155:18:54",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39335,
        "nodeType": "ImportDirective",
        "src": "209:70:54",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/libraries/OptimistConstants.sol",
        "file": "./libraries/OptimistConstants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39492,
        "sourceUnit": 39842,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39334,
              "name": "OptimistConstants",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39841,
              "src": "218:17:54",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39491,
        "nodeType": "ContractDefinition",
        "src": "538:5380:54",
        "nodes": [
          {
            "id": 39345,
            "nodeType": "VariableDeclaration",
            "src": "717:88:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39339,
              "nodeType": "StructuredDocumentation",
              "src": "581:131:54",
              "text": " @notice Attestation key used by the AllowlistAttestor to manually add addresses to the\n         allowlist."
            },
            "functionSelector": "e7bd804e",
            "mutability": "constant",
            "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
            "nameLocation": "741:33:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 39340,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "717:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e63616e2d6d696e74",
                  "id": 39343,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "785:19:54",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_052936ee16d89f9e65a9b7bbd8d9b2bc86423aed8540d6da93edb9c52fb226e4",
                    "typeString": "literal_string \"optimist.can-mint\""
                  },
                  "value": "optimist.can-mint"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_052936ee16d89f9e65a9b7bbd8d9b2bc86423aed8540d6da93edb9c52fb226e4",
                    "typeString": "literal_string \"optimist.can-mint\""
                  }
                ],
                "id": 39342,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "777:7:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 39341,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "777:7:54",
                  "typeDescriptions": {}
                }
              },
              "id": 39344,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "777:28:54",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39352,
            "nodeType": "VariableDeclaration",
            "src": "922:108:54",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39346,
              "nodeType": "StructuredDocumentation",
              "src": "812:105:54",
              "text": " @notice Attestation key used by Coinbase to issue attestations for Quest participants."
            },
            "functionSelector": "819f7e84",
            "mutability": "constant",
            "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
            "nameLocation": "946:39:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 39347,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "922:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "636f696e626173652e71756573742d656c696769626c65",
                  "id": 39350,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1004:25:54",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_061d62794d2ee045bbdaae9451ac28b2b9e4531061a0cbeb1046dbda1ca3528a",
                    "typeString": "literal_string \"coinbase.quest-eligible\""
                  },
                  "value": "coinbase.quest-eligible"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_061d62794d2ee045bbdaae9451ac28b2b9e4531061a0cbeb1046dbda1ca3528a",
                    "typeString": "literal_string \"coinbase.quest-eligible\""
                  }
                ],
                "id": 39349,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "996:7:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 39348,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "996:7:54",
                  "typeDescriptions": {}
                }
              },
              "id": 39351,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "996:34:54",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39356,
            "nodeType": "VariableDeclaration",
            "src": "1112:55:54",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39353,
              "nodeType": "StructuredDocumentation",
              "src": "1037:70:54",
              "text": " @notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "1148:19:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$39072",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 39355,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 39354,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 39072,
                "src": "1112:18:54"
              },
              "referencedDeclaration": 39072,
              "src": "1112:18:54",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$39072",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39359,
            "nodeType": "VariableDeclaration",
            "src": "1260:43:54",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39357,
              "nodeType": "StructuredDocumentation",
              "src": "1174:81:54",
              "text": " @notice Attestor that issues 'optimist.can-mint' attestations."
            },
            "functionSelector": "db3c3163",
            "mutability": "immutable",
            "name": "ALLOWLIST_ATTESTOR",
            "nameLocation": "1285:18:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 39358,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1260:7:54",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39362,
            "nodeType": "VariableDeclaration",
            "src": "1402:48:54",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39360,
              "nodeType": "StructuredDocumentation",
              "src": "1310:87:54",
              "text": " @notice Attestor that issues 'coinbase.quest-eligible' attestations."
            },
            "functionSelector": "3ac52df7",
            "mutability": "immutable",
            "name": "COINBASE_QUEST_ATTESTOR",
            "nameLocation": "1427:23:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 39361,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1402:7:54",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39365,
            "nodeType": "VariableDeclaration",
            "src": "1597:41:54",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39363,
              "nodeType": "StructuredDocumentation",
              "src": "1457:135:54",
              "text": " @notice Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'\n         attestations."
            },
            "functionSelector": "5e4f489a",
            "mutability": "immutable",
            "name": "OPTIMIST_INVITER",
            "nameLocation": "1622:16:54",
            "scope": 39491,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 39364,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1597:7:54",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39400,
            "nodeType": "FunctionDefinition",
            "src": "2004:402:54",
            "nodes": [],
            "body": {
              "id": 39399,
              "nodeType": "Block",
              "src": "2196:210:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 39385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39383,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39356,
                      "src": "2206:19:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39384,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39369,
                      "src": "2228:19:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "2206:41:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 39386,
                  "nodeType": "ExpressionStatement",
                  "src": "2206:41:54"
                },
                {
                  "expression": {
                    "id": 39389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39387,
                      "name": "ALLOWLIST_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39359,
                      "src": "2257:18:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39388,
                      "name": "_allowlistAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39371,
                      "src": "2278:18:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2257:39:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 39390,
                  "nodeType": "ExpressionStatement",
                  "src": "2257:39:54"
                },
                {
                  "expression": {
                    "id": 39393,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39391,
                      "name": "COINBASE_QUEST_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39362,
                      "src": "2306:23:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39392,
                      "name": "_coinbaseQuestAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39373,
                      "src": "2332:22:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2306:48:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 39394,
                  "nodeType": "ExpressionStatement",
                  "src": "2306:48:54"
                },
                {
                  "expression": {
                    "id": 39397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39395,
                      "name": "OPTIMIST_INVITER",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39365,
                      "src": "2364:16:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39396,
                      "name": "_optimistInviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39375,
                      "src": "2383:16:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2364:35:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 39398,
                  "nodeType": "ExpressionStatement",
                  "src": "2364:35:54"
                }
              ]
            },
            "documentation": {
              "id": 39366,
              "nodeType": "StructuredDocumentation",
              "src": "1645:354:54",
              "text": " @custom:semver 1.0.0\n @param _attestationStation    Address of the AttestationStation contract.\n @param _allowlistAttestor     Address of the allowlist attestor.\n @param _coinbaseQuestAttestor Address of the Coinbase Quest attestor.\n @param _optimistInviter       Address of the OptimistInviter contract."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "31",
                    "id": 39378,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2187:1:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "30",
                    "id": 39379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2190:1:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "30",
                    "id": 39380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2193:1:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 39381,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 39377,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 39907,
                  "src": "2180:6:54"
                },
                "nodeType": "ModifierInvocation",
                "src": "2180:15:54"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 39376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39369,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "2044:19:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39400,
                  "src": "2025:38:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$39072",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 39368,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39367,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39072,
                      "src": "2025:18:54"
                    },
                    "referencedDeclaration": 39072,
                    "src": "2025:18:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39371,
                  "mutability": "mutable",
                  "name": "_allowlistAttestor",
                  "nameLocation": "2081:18:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39400,
                  "src": "2073:26:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39370,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2073:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39373,
                  "mutability": "mutable",
                  "name": "_coinbaseQuestAttestor",
                  "nameLocation": "2117:22:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39400,
                  "src": "2109:30:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39372,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2109:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39375,
                  "mutability": "mutable",
                  "name": "_optimistInviter",
                  "nameLocation": "2157:16:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39400,
                  "src": "2149:24:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39374,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2149:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2015:164:54"
            },
            "returnParameters": {
              "id": 39382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2196:0:54"
            },
            "scope": 39491,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39421,
            "nodeType": "FunctionDefinition",
            "src": "3223:278:54",
            "nodes": [],
            "body": {
              "id": 39420,
              "nodeType": "Block",
              "src": "3293:208:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 39418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 39414,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "id": 39409,
                            "name": "_claimer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39403,
                            "src": "3359:8:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 39408,
                          "name": "_hasAttestationFromAllowlistAttestor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39436,
                          "src": "3322:36:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 39410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3322:46:54",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 39412,
                            "name": "_claimer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39403,
                            "src": "3425:8:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 39411,
                          "name": "_hasAttestationFromCoinbaseQuestAttestor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39451,
                          "src": "3384:40:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 39413,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3384:50:54",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3322:112:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 39416,
                          "name": "_claimer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39403,
                          "src": "3485:8:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 39415,
                        "name": "_hasAttestationFromOptimistInviter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39467,
                        "src": "3450:34:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 39417,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3450:44:54",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3322:172:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39407,
                  "id": 39419,
                  "nodeType": "Return",
                  "src": "3303:191:54"
                }
              ]
            },
            "documentation": {
              "id": 39401,
              "nodeType": "StructuredDocumentation",
              "src": "2412:806:54",
              "text": " @notice Checks whether a given address is allowed to mint the Optimist NFT yet. Since the\n         Optimist NFT will also be used as part of the Citizens House, mints are currently\n         restricted. Eventually anyone will be able to mint.\n         Currently, address is allowed to mint if it satisfies any of the following:\n         1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.\n         2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor\n         3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter\n            contract.\n @param _claimer Address to check.\n @return Whether or not the address is allowed to mint yet."
            },
            "functionSelector": "4813d8a6",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isAllowedToMint",
            "nameLocation": "3232:15:54",
            "parameters": {
              "id": 39404,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39403,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "3256:8:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39421,
                  "src": "3248:16:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39402,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3248:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3247:18:54"
            },
            "returnParameters": {
              "id": 39407,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39406,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39421,
                  "src": "3287:4:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39405,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3287:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3286:6:54"
            },
            "scope": 39491,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39436,
            "nodeType": "FunctionDefinition",
            "src": "3774:271:54",
            "nodes": [],
            "body": {
              "id": 39435,
              "nodeType": "Block",
              "src": "3867:178:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39430,
                        "name": "ALLOWLIST_ATTESTOR",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39359,
                        "src": "3974:18:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39431,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39424,
                        "src": "3994:8:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39432,
                        "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39345,
                        "src": "4004:33:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 39429,
                      "name": "_hasValidAttestation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39490,
                      "src": "3953:20:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                        "typeString": "function (address,address,bytes32) view returns (bool)"
                      }
                    },
                    "id": 39433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3953:85:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39428,
                  "id": 39434,
                  "nodeType": "Return",
                  "src": "3934:104:54"
                }
              ]
            },
            "documentation": {
              "id": 39422,
              "nodeType": "StructuredDocumentation",
              "src": "3507:262:54",
              "text": " @notice Checks whether an address has a valid 'optimist.can-mint' attestation from the\n         allowlist attestor.\n @param _claimer Address to check.\n @return Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromAllowlistAttestor",
            "nameLocation": "3783:36:54",
            "parameters": {
              "id": 39425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39424,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "3828:8:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39436,
                  "src": "3820:16:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39423,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3820:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3819:18:54"
            },
            "returnParameters": {
              "id": 39428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39427,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39436,
                  "src": "3861:4:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39426,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3861:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3860:6:54"
            },
            "scope": 39491,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 39451,
            "nodeType": "FunctionDefinition",
            "src": "4282:376:54",
            "nodes": [],
            "body": {
              "id": 39450,
              "nodeType": "Block",
              "src": "4407:251:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39445,
                        "name": "COINBASE_QUEST_ATTESTOR",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39362,
                        "src": "4531:23:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39446,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39439,
                        "src": "4572:8:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39447,
                        "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39352,
                        "src": "4598:39:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 39444,
                      "name": "_hasValidAttestation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39490,
                      "src": "4493:20:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                        "typeString": "function (address,address,bytes32) view returns (bool)"
                      }
                    },
                    "id": 39448,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4493:158:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39443,
                  "id": 39449,
                  "nodeType": "Return",
                  "src": "4474:177:54"
                }
              ]
            },
            "documentation": {
              "id": 39437,
              "nodeType": "StructuredDocumentation",
              "src": "4051:226:54",
              "text": " @notice Checks whether an address has a valid attestation from the Coinbase attestor.\n @param _claimer Address to check.\n @return Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromCoinbaseQuestAttestor",
            "nameLocation": "4291:40:54",
            "parameters": {
              "id": 39440,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39439,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "4340:8:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39451,
                  "src": "4332:16:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39438,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4332:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4331:18:54"
            },
            "returnParameters": {
              "id": 39443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39442,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39451,
                  "src": "4397:4:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39441,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4397:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4396:6:54"
            },
            "scope": 39491,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 39467,
            "nodeType": "FunctionDefinition",
            "src": "4902:365:54",
            "nodes": [],
            "body": {
              "id": 39466,
              "nodeType": "Block",
              "src": "4993:274:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39460,
                        "name": "OPTIMIST_INVITER",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39365,
                        "src": "5123:16:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39461,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39454,
                        "src": "5157:8:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 39462,
                          "name": "OptimistConstants",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39841,
                          "src": "5183:17:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_OptimistConstants_$39841_$",
                            "typeString": "type(library OptimistConstants)"
                          }
                        },
                        "id": 39463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 39840,
                        "src": "5183:63:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 39459,
                      "name": "_hasValidAttestation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39490,
                      "src": "5085:20:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                        "typeString": "function (address,address,bytes32) view returns (bool)"
                      }
                    },
                    "id": 39464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5085:175:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39458,
                  "id": 39465,
                  "nodeType": "Return",
                  "src": "5066:194:54"
                }
              ]
            },
            "documentation": {
              "id": 39452,
              "nodeType": "StructuredDocumentation",
              "src": "4664:233:54",
              "text": " @notice Checks whether an address has a valid attestation from the OptimistInviter contract.\n @param _claimer Address to check.\n @return Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromOptimistInviter",
            "nameLocation": "4911:34:54",
            "parameters": {
              "id": 39455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39454,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "4954:8:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39467,
                  "src": "4946:16:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39453,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4946:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4945:18:54"
            },
            "returnParameters": {
              "id": 39458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39457,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39467,
                  "src": "4987:4:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39456,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4987:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4986:6:54"
            },
            "scope": 39491,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 39490,
            "nodeType": "FunctionDefinition",
            "src": "5688:228:54",
            "nodes": [],
            "body": {
              "id": 39489,
              "nodeType": "Block",
              "src": "5825:91:54",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 39487,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 39481,
                            "name": "_creator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39470,
                            "src": "5875:8:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 39482,
                            "name": "_about",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39472,
                            "src": "5885:6:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 39483,
                            "name": "_key",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39474,
                            "src": "5893:4:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 39479,
                            "name": "ATTESTATION_STATION",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39356,
                            "src": "5842:19:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AttestationStation_$39072",
                              "typeString": "contract AttestationStation"
                            }
                          },
                          "id": 39480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "attestations",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 38977,
                          "src": "5842:32:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,address,bytes32) view external returns (bytes memory)"
                          }
                        },
                        "id": 39484,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5842:56:54",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 39485,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "5842:63:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 39486,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5908:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5842:67:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39478,
                  "id": 39488,
                  "nodeType": "Return",
                  "src": "5835:74:54"
                }
              ]
            },
            "documentation": {
              "id": 39468,
              "nodeType": "StructuredDocumentation",
              "src": "5273:410:54",
              "text": " @notice Checks whether an address has a valid truthy attestation.\n         Any attestation val other than bytes32(\"\") is considered truthy.\n @param _creator Address that made the attestation.\n @param _about   Address attestation is about.\n @param _key     Key of the attestation.\n @return Whether or not the address has a valid truthy attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasValidAttestation",
            "nameLocation": "5697:20:54",
            "parameters": {
              "id": 39475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39470,
                  "mutability": "mutable",
                  "name": "_creator",
                  "nameLocation": "5735:8:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39490,
                  "src": "5727:16:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39469,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5727:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39472,
                  "mutability": "mutable",
                  "name": "_about",
                  "nameLocation": "5761:6:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39490,
                  "src": "5753:14:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5753:7:54",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39474,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "5785:4:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 39490,
                  "src": "5777:12:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 39473,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5777:7:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5717:78:54"
            },
            "returnParameters": {
              "id": 39478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39477,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 39490,
                  "src": "5819:4:54",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39476,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5819:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5818:6:54"
            },
            "scope": 39491,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39337,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39907,
              "src": "568:6:54"
            },
            "id": 39338,
            "nodeType": "InheritanceSpecifier",
            "src": "568:6:54"
          }
        ],
        "canonicalName": "OptimistAllowlist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 39336,
          "nodeType": "StructuredDocumentation",
          "src": "281:256:54",
          "text": " @title  OptimistAllowlist\n @notice Source of truth for whether an address is able to mint an Optimist NFT.\nisAllowedToMint function checks various signals to return boolean value for whether an\naddress is eligible or not."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          39491,
          39907
        ],
        "name": "OptimistAllowlist",
        "nameLocation": "547:17:54",
        "scope": 39492,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 54
}