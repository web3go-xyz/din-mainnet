{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "originalOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5060405161080b38038061080b83398101604081905261002f91610171565b61003833610047565b61004181610097565b506101a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61009f610115565b6001600160a01b0381166101095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61011281610047565b50565b6000546001600160a01b0316331461016f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610100565b565b60006020828403121561018357600080fd5b81516001600160a01b038116811461019a57600080fd5b9392505050565b61065b806101b06000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631626ba7e14610051578063715018a6146100825780638da5cb5b1461008c578063f2fde38b146100a7575b600080fd5b61006461005f366004610554565b6100ba565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a6100f6565b005b6000546040516001600160a01b039091168152602001610079565b61008a6100b536600461060f565b61010a565b600080546001600160a01b03166100d18484610188565b6001600160a01b0316146100e65760006100ef565b630b135d3f60e11b5b9392505050565b6100fe6101ac565b6101086000610206565b565b6101126101ac565b6001600160a01b03811661017c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61018581610206565b50565b60008060006101978585610256565b915091506101a48161029b565b509392505050565b6000546001600160a01b031633146101085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610173565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080825160410361028c5760208301516040840151606085015160001a61028087828585610451565b94509450505050610294565b506000905060025b9250929050565b60008160048111156102af576102af610638565b036102b75750565b60018160048111156102cb576102cb610638565b036103185760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610173565b600281600481111561032c5761032c610638565b036103795760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610173565b600381600481111561038d5761038d610638565b036103e55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610173565b60048160048111156103f9576103f9610638565b036101855760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610173565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104885750600090506003610535565b8460ff16601b141580156104a057508460ff16601c14155b156104b15750600090506004610535565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610505573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661052e57600060019250925050610535565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561056757600080fd5b82359150602083013567ffffffffffffffff8082111561058657600080fd5b818501915085601f83011261059a57600080fd5b8135818111156105ac576105ac61053e565b604051601f8201601f19908116603f011681019083821181831017156105d4576105d461053e565b816040528281528860208487010111156105ed57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561062157600080fd5b81356001600160a01b03811681146100ef57600080fd5b634e487b7160e01b600052602160045260246000fdfea164736f6c634300080f000a",
    "sourceMap": "514:417:44:-:0;;;568:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:71;719:10:75;936:18:71;:32::i;:::-;613::44;631:13;613:17;:32::i;:::-;568:84;514:417;;2433:187:71;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:71;;;-1:-1:-1;;;;;;2541:17:71;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;2081:198::-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:71;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:71;;511:2:101;2161:73:71::1;::::0;::::1;493:21:101::0;550:2;530:18;;;523:30;589:34;569:18;;;562:62;-1:-1:-1;;;640:18:101;;;633:36;686:19;;2161:73:71::1;;;;;;;;;2244:28;2263:8:::0;2244:18:::1;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:71;719:10:75;1422:23:71;1414:68;;;;-1:-1:-1;;;1414:68:71;;918:2:101;1414:68:71;;;900:21:101;;;937:18;;;930:30;996:34;976:18;;;969:62;1048:18;;1414:68:71;716:356:101;1414:68:71;1359:130::o;14:290:101:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:101;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:101:o;716:356::-;514:417:44;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631626ba7e14610051578063715018a6146100825780638da5cb5b1461008c578063f2fde38b146100a7575b600080fd5b61006461005f366004610554565b6100ba565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a6100f6565b005b6000546040516001600160a01b039091168152602001610079565b61008a6100b536600461060f565b61010a565b600080546001600160a01b03166100d18484610188565b6001600160a01b0316146100e65760006100ef565b630b135d3f60e11b5b9392505050565b6100fe6101ac565b6101086000610206565b565b6101126101ac565b6001600160a01b03811661017c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61018581610206565b50565b60008060006101978585610256565b915091506101a48161029b565b509392505050565b6000546001600160a01b031633146101085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610173565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080825160410361028c5760208301516040840151606085015160001a61028087828585610451565b94509450505050610294565b506000905060025b9250929050565b60008160048111156102af576102af610638565b036102b75750565b60018160048111156102cb576102cb610638565b036103185760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610173565b600281600481111561032c5761032c610638565b036103795760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610173565b600381600481111561038d5761038d610638565b036103e55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610173565b60048160048111156103f9576103f9610638565b036101855760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610173565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104885750600090506003610535565b8460ff16601b141580156104a057508460ff16601c14155b156104b15750600090506004610535565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610505573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661052e57600060019250925050610535565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561056757600080fd5b82359150602083013567ffffffffffffffff8082111561058657600080fd5b818501915085601f83011261059a57600080fd5b8135818111156105ac576105ac61053e565b604051601f8201601f19908116603f011681019083821181831017156105d4576105d461053e565b816040528281528860208487010111156105ed57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561062157600080fd5b81356001600160a01b03811681146100ef57600080fd5b634e487b7160e01b600052602160045260246000fdfea164736f6c634300080f000a",
    "sourceMap": "514:417:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;658:271;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;1302:33:101;;;1284:52;;1272:2;1257:18;658:271:44;;;;;;;;1831:101:71;;;:::i;:::-;;1201:85;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:71;;;1493:51:101;;1481:2;1466:18;1201:85:71;1347:203:101;2081:198:71;;;;;;:::i;:::-;;:::i;658:271:44:-;784:17;1273:6:71;;-1:-1:-1;;;;;1273:6:71;836:30:44;850:4;856:9;836:13;:30::i;:::-;-1:-1:-1;;;;;836:41:44;;:86;;920:1;836:86;;;-1:-1:-1;;;836:86:44;817:105;658:271;-1:-1:-1;;;658:271:44:o;1831:101:71:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2081:198::-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:71;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:71;;2048:2:101;2161:73:71::1;::::0;::::1;2030:21:101::0;2087:2;2067:18;;;2060:30;2126:34;2106:18;;;2099:62;-1:-1:-1;;;2177:18:101;;;2170:36;2223:19;;2161:73:71::1;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;3759:227:77:-;3837:7;3857:17;3876:18;3898:27;3909:4;3915:9;3898:10;:27::i;:::-;3856:69;;;;3935:18;3947:5;3935:11;:18::i;:::-;-1:-1:-1;3970:9:77;3759:227;-1:-1:-1;;;3759:227:77:o;1359:130:71:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:71;719:10:75;1422:23:71;1414:68;;;;-1:-1:-1;;;1414:68:71;;2455:2:101;1414:68:71;;;2437:21:101;;;2474:18;;;2467:30;2533:34;2513:18;;;2506:62;2585:18;;1414:68:71;2253:356:101;2433:187:71;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:71;;;-1:-1:-1;;;;;;2541:17:71;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;2243:730:77:-;2324:7;2333:12;2361:9;:16;2381:2;2361:22;2357:610;;2697:4;2682:20;;2676:27;2746:4;2731:20;;2725:27;2803:4;2788:20;;2782:27;2399:9;2774:36;2844:25;2855:4;2774:36;2676:27;2725;2844:10;:25::i;:::-;2837:32;;;;;;;;;2357:610;-1:-1:-1;2916:1:77;;-1:-1:-1;2920:35:77;2357:610;2243:730;;;;;:::o;548:631::-;625:20;616:5;:29;;;;;;;;:::i;:::-;;612:561;;548:631;:::o;612:561::-;721:29;712:5;:38;;;;;;;;:::i;:::-;;708:465;;766:34;;-1:-1:-1;;;766:34:77;;2948:2:101;766:34:77;;;2930:21:101;2987:2;2967:18;;;2960:30;3026:26;3006:18;;;2999:54;3070:18;;766:34:77;2746:348:101;708:465:77;830:35;821:5;:44;;;;;;;;:::i;:::-;;817:356;;881:41;;-1:-1:-1;;;881:41:77;;3301:2:101;881:41:77;;;3283:21:101;3340:2;3320:18;;;3313:30;3379:33;3359:18;;;3352:61;3430:18;;881:41:77;3099:355:101;817:356:77;952:30;943:5;:39;;;;;;;;:::i;:::-;;939:234;;998:44;;-1:-1:-1;;;998:44:77;;3661:2:101;998:44:77;;;3643:21:101;3700:2;3680:18;;;3673:30;3739:34;3719:18;;;3712:62;-1:-1:-1;;;3790:18:101;;;3783:32;3832:19;;998:44:77;3459:398:101;939:234:77;1072:30;1063:5;:39;;;;;;;;:::i;:::-;;1059:114;;1118:44;;-1:-1:-1;;;1118:44:77;;4064:2:101;1118:44:77;;;4046:21:101;4103:2;4083:18;;;4076:30;4142:34;4122:18;;;4115:62;-1:-1:-1;;;4193:18:101;;;4186:32;4235:19;;1118:44:77;3862:398:101;5167:1603:77;5293:7;;6217:66;6204:79;;6200:161;;;-1:-1:-1;6315:1:77;;-1:-1:-1;6319:30:77;6299:51;;6200:161;6374:1;:7;;6379:2;6374:7;;:18;;;;;6385:1;:7;;6390:2;6385:7;;6374:18;6370:100;;;-1:-1:-1;6424:1:77;;-1:-1:-1;6428:30:77;6408:51;;6370:100;6581:24;;;6564:14;6581:24;;;;;;;;;4492:25:101;;;4565:4;4553:17;;4533:18;;;4526:45;;;;4587:18;;;4580:34;;;4630:18;;;4623:34;;;6581:24:77;;4464:19:101;;6581:24:77;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6581:24:77;;-1:-1:-1;;6581:24:77;;;-1:-1:-1;;;;;;;6619:20:77;;6615:101;;6671:1;6675:29;6655:50;;;;;;;6615:101;6734:6;-1:-1:-1;6742:20:77;;-1:-1:-1;5167:1603:77;;;;;;;;:::o;14:127:101:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:989;223:6;231;284:2;272:9;263:7;259:23;255:32;252:52;;;300:1;297;290:12;252:52;336:9;323:23;313:33;;397:2;386:9;382:18;369:32;420:18;461:2;453:6;450:14;447:34;;;477:1;474;467:12;447:34;515:6;504:9;500:22;490:32;;560:7;553:4;549:2;545:13;541:27;531:55;;582:1;579;572:12;531:55;618:2;605:16;640:2;636;633:10;630:36;;;646:18;;:::i;:::-;721:2;715:9;689:2;775:13;;-1:-1:-1;;771:22:101;;;795:2;767:31;763:40;751:53;;;819:18;;;839:22;;;816:46;813:72;;;865:18;;:::i;:::-;905:10;901:2;894:22;940:2;932:6;925:18;980:7;975:2;970;966;962:11;958:20;955:33;952:53;;;1001:1;998;991:12;952:53;1057:2;1052;1048;1044:11;1039:2;1031:6;1027:15;1014:46;1102:1;1097:2;1092;1084:6;1080:15;1076:24;1069:35;1123:6;1113:16;;;;;;;146:989;;;;;:::o;1555:286::-;1614:6;1667:2;1655:9;1646:7;1642:23;1638:32;1635:52;;;1683:1;1680;1673:12;1635:52;1709:23;;-1:-1:-1;;;;;1761:31:101;;1751:42;;1741:70;;1807:1;1804;1797:12;2614:127;2675:10;2670:3;2666:20;2663:1;2656:31;2706:4;2703:1;2696:15;2730:4;2727:1;2720:15",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "owner()": "8da5cb5b",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple ERC1271 wallet that can be used to test the ERC1271 signature checker. https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/mocks/ERC1271WalletMock.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/helpers/TestERC1271Wallet.sol\":\"TestERC1271Wallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/testing/helpers/TestERC1271Wallet.sol\":{\"keccak256\":\"0x6ae2035dc512b2c83600a9f9a0f5d23a5f2ff94613a3e215bb411c5864b986da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61cd69744ee64498ea68bff236a7e566edad1c7171b92e9323f7c762728ffca0\",\"dweb:/ipfs/QmawbXEwGQxQrC2Uj2dL4SXrMbzfywXeEXseJ8UqicTzDk\"]},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidSignature",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "isValidSignature(bytes32,bytes)": {
            "details": "Should return whether the signature provided is valid for the provided data",
            "params": {
              "hash": "Hash of the data to be signed",
              "signature": "Signature byte array associated with _data"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/testing/helpers/TestERC1271Wallet.sol": "TestERC1271Wallet"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/testing/helpers/TestERC1271Wallet.sol": {
        "keccak256": "0x6ae2035dc512b2c83600a9f9a0f5d23a5f2ff94613a3e215bb411c5864b986da",
        "urls": [
          "bzz-raw://61cd69744ee64498ea68bff236a7e566edad1c7171b92e9323f7c762728ffca0",
          "dweb:/ipfs/QmawbXEwGQxQrC2Uj2dL4SXrMbzfywXeEXseJ8UqicTzDk"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/testing/helpers/TestERC1271Wallet.sol",
    "id": 38261,
    "exportedSymbols": {
      "ECDSA": [
        41352
      ],
      "IERC1271": [
        40622
      ],
      "Ownable": [
        40608
      ],
      "TestERC1271Wallet": [
        38260
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:900:44",
    "nodes": [
      {
        "id": 38210,
        "nodeType": "PragmaDirective",
        "src": "32:23:44",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 38212,
        "nodeType": "ImportDirective",
        "src": "57:75:44",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol",
        "file": "@openzeppelin/contracts/interfaces/IERC1271.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38261,
        "sourceUnit": 40623,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38211,
              "name": "IERC1271",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40622,
              "src": "66:8:44",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38214,
        "nodeType": "ImportDirective",
        "src": "133:69:44",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38261,
        "sourceUnit": 40609,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38213,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40608,
              "src": "142:7:44",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38216,
        "nodeType": "ImportDirective",
        "src": "203:77:44",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38261,
        "sourceUnit": 41353,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38215,
              "name": "ECDSA",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41352,
              "src": "212:5:44",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38260,
        "nodeType": "ContractDefinition",
        "src": "514:417:44",
        "nodes": [
          {
            "id": 38231,
            "nodeType": "FunctionDefinition",
            "src": "568:84:44",
            "nodes": [],
            "body": {
              "id": 38230,
              "nodeType": "Block",
              "src": "603:49:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 38227,
                        "name": "originalOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38223,
                        "src": "631:13:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 38226,
                      "name": "transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40587,
                      "src": "613:17:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 38228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "613:32:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 38229,
                  "nodeType": "ExpressionStatement",
                  "src": "613:32:44"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 38224,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38223,
                  "mutability": "mutable",
                  "name": "originalOwner",
                  "nameLocation": "588:13:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 38231,
                  "src": "580:21:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 38222,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "580:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "579:23:44"
            },
            "returnParameters": {
              "id": 38225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "603:0:44"
            },
            "scope": 38260,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38259,
            "nodeType": "FunctionDefinition",
            "src": "658:271:44",
            "nodes": [],
            "body": {
              "id": 38258,
              "nodeType": "Block",
              "src": "807:122:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 38248,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "id": 38243,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38233,
                            "src": "850:4:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 38244,
                            "name": "signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38235,
                            "src": "856:9:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 38241,
                            "name": "ECDSA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41352,
                            "src": "836:5:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ECDSA_$41352_$",
                              "typeString": "type(library ECDSA)"
                            }
                          },
                          "id": 38242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "recover",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 41101,
                          "src": "836:13:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
                            "typeString": "function (bytes32,bytes memory) pure returns (address)"
                          }
                        },
                        "id": 38245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "836:30:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 38246,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40536,
                          "src": "870:5:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 38247,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "870:7:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "836:41:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 38254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "920:1:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 38253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "913:6:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_bytes4_$",
                          "typeString": "type(bytes4)"
                        },
                        "typeName": {
                          "id": 38252,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "913:6:44",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 38255,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "913:9:44",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "id": 38256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "836:86:44",
                    "trueExpression": {
                      "expression": {
                        "expression": {
                          "id": 38249,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "880:4:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_TestERC1271Wallet_$38260",
                            "typeString": "contract TestERC1271Wallet"
                          }
                        },
                        "id": 38250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isValidSignature",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38259,
                        "src": "880:21:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                          "typeString": "function (bytes32,bytes memory) view external returns (bytes4)"
                        }
                      },
                      "id": 38251,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "selector",
                      "nodeType": "MemberAccess",
                      "src": "880:30:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 38240,
                  "id": 38257,
                  "nodeType": "Return",
                  "src": "817:105:44"
                }
              ]
            },
            "baseFunctions": [
              40621
            ],
            "functionSelector": "1626ba7e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nameLocation": "667:16:44",
            "overrides": {
              "id": 38237,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "758:8:44"
            },
            "parameters": {
              "id": 38236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38233,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "692:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 38259,
                  "src": "684:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 38232,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "684:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38235,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "711:9:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 38259,
                  "src": "698:22:44",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 38234,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "698:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "683:38:44"
            },
            "returnParameters": {
              "id": 38240,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38239,
                  "mutability": "mutable",
                  "name": "magicValue",
                  "nameLocation": "791:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 38259,
                  "src": "784:17:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 38238,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "784:6:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "783:19:44"
            },
            "scope": 38260,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 38218,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 40608,
              "src": "544:7:44"
            },
            "id": 38219,
            "nodeType": "InheritanceSpecifier",
            "src": "544:7:44"
          },
          {
            "baseName": {
              "id": 38220,
              "name": "IERC1271",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 40622,
              "src": "553:8:44"
            },
            "id": 38221,
            "nodeType": "InheritanceSpecifier",
            "src": "553:8:44"
          }
        ],
        "canonicalName": "TestERC1271Wallet",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 38217,
          "nodeType": "StructuredDocumentation",
          "src": "317:196:44",
          "text": " Simple ERC1271 wallet that can be used to test the ERC1271 signature checker.\n https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/mocks/ERC1271WalletMock.sol"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          38260,
          40622,
          40608,
          45770
        ],
        "name": "TestERC1271Wallet",
        "nameLocation": "523:17:44",
        "scope": 38261,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 44
}