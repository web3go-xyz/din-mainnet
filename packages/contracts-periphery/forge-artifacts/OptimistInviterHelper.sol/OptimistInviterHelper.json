{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract OptimistInviter",
          "name": "_optimistInviter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CLAIMABLE_INVITE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumeNonce",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "_claimableInvite",
          "type": "tuple"
        }
      ],
      "name": "getClaimableInviteStructHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        }
      ],
      "name": "getClaimableInviteWithNewNonce",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "_claimableInvite",
          "type": "tuple"
        }
      ],
      "name": "getDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "_claimableInvite",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_version",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_chainid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifyingContract",
          "type": "address"
        }
      ],
      "name": "getDigestWithEIP712Domain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimistInviter",
      "outputs": [
        {
          "internalType": "contract OptimistInviter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b5060405162000b8638038062000b8683398101604081905262000034916200007c565b600080546001600160a01b0319166001600160a01b03841617905560016200005d82826200020b565b505050620002d7565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200009057600080fd5b82516001600160a01b0381168114620000a857600080fd5b602084810151919350906001600160401b0380821115620000c857600080fd5b818601915086601f830112620000dd57600080fd5b815181811115620000f257620000f262000066565b604051601f8201601f19908116603f011681019083821181831017156200011d576200011d62000066565b8160405282815289868487010111156200013657600080fd5b600093505b828410156200015a57848401860151818501870152928501926200013b565b828411156200016c5760008684830101525b8096505050505050509250929050565b600181811c908216806200019157607f821691505b602082108103620001b257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020657600081815260208120601f850160051c81016020861015620001e15750805b601f850160051c820191505b818110156200020257828155600101620001ed565b5050505b505050565b81516001600160401b0381111562000227576200022762000066565b6200023f816200023884546200017c565b84620001b8565b602080601f8311600181146200027757600084156200025e5750858301515b600019600386901b1c1916600185901b17855562000202565b600085815260208120601f198616915b82811015620002a85788860151825594840194600190910190840162000287565b5085821015620002c75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61089f80620002e76000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063adb610a311610066578063adb610a314610130578063c4fc453d14610139578063c7977be714610160578063d182990714610187578063eb1df626146101b257600080fd5b8063019a4f49146100a357806306fdde03146100c95780631c6e7f25146100de57806334b15118146100f15780638ebe24e5146100f9575b600080fd5b6100b66100b1366004610638565b6101c5565b6040519081526020015b60405180910390f35b6100d16102a6565b6040516100c091906106f8565b6100b66100ec36600461072b565b610334565b6100b661044c565b61010c61010736600461074e565b61048e565b6040805182516001600160a01b0316815260209283015192810192909252016100c0565b6100b660025481565b6100b67f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6100b67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60005461019a906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100b66101c0366004610769565b6104cc565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f948101949094528301919091526060820152608081018390526001600160a01b03821660a0820152600090819060c00160405160208183030381529060405280519060200120905061029b8161025b898036038101906101c09190610769565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b600180546102b3906107c0565b80601f01602080910402602001604051908101604052809291908181526020018280546102df906107c0565b801561032c5780601f106103015761010080835404028352916020019161032c565b820191906000526020600020905b81548152906001019060200180831161030f57829003601f168201915b505050505081565b60006104468260018054610347906107c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610373906107c0565b80156103c05780601f10610395576101008083540402835291602001916103c0565b820191906000526020600020905b8154815290600101906020018083116103a357829003601f168201915b50506000805460408051631d99d8b560e31b815290516001600160a01b03909216955063eccec5a8945060048082019450908290030181865afa15801561040b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261043391908101906107f4565b60005446906001600160a01b03166101c5565b92915050565b600280546000918261045d8361086b565b9190505560405160200161047391815260200190565b60405160208183030381529060405280519060200120905090565b60408051808201909152600080825260208201526040518060400160405280836001600160a01b031681526020016104c461044c565b905292915050565b8051602080830151604051600093610522937f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce939192019283526001600160a01b03919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b60006040828403121561055157600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561059657610596610557565b604052919050565b600067ffffffffffffffff8211156105b8576105b8610557565b50601f01601f191660200190565b600082601f8301126105d757600080fd5b81356105ea6105e58261059e565b61056d565b8181528460208386010111156105ff57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461063357600080fd5b919050565b600080600080600060c0868803121561065057600080fd5b61065a878761053f565b9450604086013567ffffffffffffffff8082111561067757600080fd5b61068389838a016105c6565b9550606088013591508082111561069957600080fd5b506106a6888289016105c6565b935050608086013591506106bc60a0870161061c565b90509295509295909350565b60005b838110156106e35781810151838201526020016106cb565b838111156106f2576000848401525b50505050565b60208152600082518060208401526107178160408501602087016106c8565b601f01601f19169190910160400192915050565b60006040828403121561073d57600080fd5b610747838361053f565b9392505050565b60006020828403121561076057600080fd5b6107478261061c565b60006040828403121561077b57600080fd5b6040516040810181811067ffffffffffffffff8211171561079e5761079e610557565b6040526107aa8361061c565b8152602083013560208201528091505092915050565b600181811c908216806107d457607f821691505b60208210810361055157634e487b7160e01b600052602260045260246000fd5b60006020828403121561080657600080fd5b815167ffffffffffffffff81111561081d57600080fd5b8201601f8101841361082e57600080fd5b805161083c6105e58261059e565b81815285602083850101111561085157600080fd5b6108628260208301602086016106c8565b95945050505050565b60006001820161088b57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080f000a",
    "sourceMap": "417:4318:42:-:0;;;1340:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1417:15;:34;;-1:-1:-1;;;;;;1417:34:42;-1:-1:-1;;;;;1417:34:42;;;;;-1:-1:-1;1461:12:42;1468:5;-1:-1:-1;1461:12:42;:::i;:::-;;1340:140;;417:4318;;14:127:101;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1279;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;363:16;;-1:-1:-1;;;;;408:31:101;;398:42;;388:70;;454:1;451;444:12;388:70;501:2;532:18;;;526:25;477:5;;-1:-1:-1;501:2:101;-1:-1:-1;;;;;600:14:101;;;597:34;;;627:1;624;617:12;597:34;665:6;654:9;650:22;640:32;;710:7;703:4;699:2;695:13;691:27;681:55;;732:1;729;722:12;681:55;761:2;755:9;783:2;779;776:10;773:36;;;789:18;;:::i;:::-;864:2;858:9;832:2;918:13;;-1:-1:-1;;914:22:101;;;938:2;910:31;906:40;894:53;;;962:18;;;982:22;;;959:46;956:72;;;1008:18;;:::i;:::-;1048:10;1044:2;1037:22;1083:2;1075:6;1068:18;1123:7;1118:2;1113;1109;1105:11;1101:20;1098:33;1095:53;;;1144:1;1141;1134:12;1095:53;1166:1;1157:10;;1176:129;1190:2;1187:1;1184:9;1176:129;;;1278:10;;;1274:19;;1268:26;1247:14;;;1243:23;;1236:59;1201:10;;;;1176:129;;;1323:2;1320:1;1317:9;1314:80;;;1382:1;1377:2;1372;1364:6;1360:15;1356:24;1349:35;1314:80;1413:6;1403:16;;;;;;;;146:1279;;;;;:::o;1430:380::-;1509:1;1505:12;;;;1552;;;1573:61;;1627:4;1619:6;1615:17;1605:27;;1573:61;1680:2;1672:6;1669:14;1649:18;1646:38;1643:161;;1726:10;1721:3;1717:20;1714:1;1707:31;1761:4;1758:1;1751:15;1789:4;1786:1;1779:15;1643:161;;1430:380;;;:::o;1941:545::-;2043:2;2038:3;2035:11;2032:448;;;2079:1;2104:5;2100:2;2093:17;2149:4;2145:2;2135:19;2219:2;2207:10;2203:19;2200:1;2196:27;2190:4;2186:38;2255:4;2243:10;2240:20;2237:47;;;-1:-1:-1;2278:4:101;2237:47;2333:2;2328:3;2324:12;2321:1;2317:20;2311:4;2307:31;2297:41;;2388:82;2406:2;2399:5;2396:13;2388:82;;;2451:17;;;2432:1;2421:13;2388:82;;;2392:3;;;2032:448;1941:545;;;:::o;2662:1352::-;2782:10;;-1:-1:-1;;;;;2804:30:101;;2801:56;;;2837:18;;:::i;:::-;2866:97;2956:6;2916:38;2948:4;2942:11;2916:38;:::i;:::-;2910:4;2866:97;:::i;:::-;3018:4;;3082:2;3071:14;;3099:1;3094:663;;;;3801:1;3818:6;3815:89;;;-1:-1:-1;3870:19:101;;;3864:26;3815:89;-1:-1:-1;;2619:1:101;2615:11;;;2611:24;2607:29;2597:40;2643:1;2639:11;;;2594:57;3917:81;;3064:944;;3094:663;1888:1;1881:14;;;1925:4;1912:18;;-1:-1:-1;;3130:20:101;;;3248:236;3262:7;3259:1;3256:14;3248:236;;;3351:19;;;3345:26;3330:42;;3443:27;;;;3411:1;3399:14;;;;3278:19;;3248:236;;;3252:3;3512:6;3503:7;3500:19;3497:201;;;3573:19;;;3567:26;-1:-1:-1;;3656:1:101;3652:14;;;3668:3;3648:24;3644:37;3640:42;3625:58;3610:74;;3497:201;-1:-1:-1;;;;;3744:1:101;3728:14;;;3724:22;3711:36;;-1:-1:-1;2662:1352:101:o;:::-;417:4318:42;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063adb610a311610066578063adb610a314610130578063c4fc453d14610139578063c7977be714610160578063d182990714610187578063eb1df626146101b257600080fd5b8063019a4f49146100a357806306fdde03146100c95780631c6e7f25146100de57806334b15118146100f15780638ebe24e5146100f9575b600080fd5b6100b66100b1366004610638565b6101c5565b6040519081526020015b60405180910390f35b6100d16102a6565b6040516100c091906106f8565b6100b66100ec36600461072b565b610334565b6100b661044c565b61010c61010736600461074e565b61048e565b6040805182516001600160a01b0316815260209283015192810192909252016100c0565b6100b660025481565b6100b67f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6100b67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60005461019a906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100b66101c0366004610769565b6104cc565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f948101949094528301919091526060820152608081018390526001600160a01b03821660a0820152600090819060c00160405160208183030381529060405280519060200120905061029b8161025b898036038101906101c09190610769565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b600180546102b3906107c0565b80601f01602080910402602001604051908101604052809291908181526020018280546102df906107c0565b801561032c5780601f106103015761010080835404028352916020019161032c565b820191906000526020600020905b81548152906001019060200180831161030f57829003601f168201915b505050505081565b60006104468260018054610347906107c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610373906107c0565b80156103c05780601f10610395576101008083540402835291602001916103c0565b820191906000526020600020905b8154815290600101906020018083116103a357829003601f168201915b50506000805460408051631d99d8b560e31b815290516001600160a01b03909216955063eccec5a8945060048082019450908290030181865afa15801561040b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261043391908101906107f4565b60005446906001600160a01b03166101c5565b92915050565b600280546000918261045d8361086b565b9190505560405160200161047391815260200190565b60405160208183030381529060405280519060200120905090565b60408051808201909152600080825260208201526040518060400160405280836001600160a01b031681526020016104c461044c565b905292915050565b8051602080830151604051600093610522937f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce939192019283526001600160a01b03919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b60006040828403121561055157600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561059657610596610557565b604052919050565b600067ffffffffffffffff8211156105b8576105b8610557565b50601f01601f191660200190565b600082601f8301126105d757600080fd5b81356105ea6105e58261059e565b61056d565b8181528460208386010111156105ff57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461063357600080fd5b919050565b600080600080600060c0868803121561065057600080fd5b61065a878761053f565b9450604086013567ffffffffffffffff8082111561067757600080fd5b61068389838a016105c6565b9550606088013591508082111561069957600080fd5b506106a6888289016105c6565b935050608086013591506106bc60a0870161061c565b90509295509295909350565b60005b838110156106e35781810151838201526020016106cb565b838111156106f2576000848401525b50505050565b60208152600082518060208401526107178160408501602087016106c8565b601f01601f19169190910160400192915050565b60006040828403121561073d57600080fd5b610747838361053f565b9392505050565b60006020828403121561076057600080fd5b6107478261061c565b60006040828403121561077b57600080fd5b6040516040810181811067ffffffffffffffff8211171561079e5761079e610557565b6040526107aa8361061c565b8152602083013560208201528091505092915050565b600181811c908216806107d457607f821691505b60208210810361055157634e487b7160e01b600052602260045260246000fd5b60006020828403121561080657600080fd5b815167ffffffffffffffff81111561081d57600080fd5b8201601f8101841361082e57600080fd5b805161083c6105e58261059e565b81815285602083850101111561085157600080fd5b6108628260208301602086016106c8565b95945050505050565b60006001820161088b57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080f000a",
    "sourceMap": "417:4318:42:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4086:647;;;;;;:::i;:::-;;:::i;:::-;;;2408:25:101;;;2396:2;2381:18;4086:647:42;;;;;;;;1181:18;;;:::i;:::-;;;;;;;:::i;3096:404::-;;;;;;:::i;:::-;;:::i;2312:119::-;;;:::i;2667:213::-;;;;;;:::i;:::-;;:::i;:::-;;;;3782:13:101;;-1:-1:-1;;;;;3778:39:101;3760:58;;3874:4;3862:17;;;3856:24;3834:20;;;3827:54;;;;3733:18;2667:213:42;3546:341:101;1306:27:42;;;;;;531:118;;591:58;531:118;;772:174;;829:117;772:174;;1036:38;;;;;-1:-1:-1;;;;;1036:38:42;;;;;;-1:-1:-1;;;;;4263:32:101;;;4245:51;;4233:2;4218:18;1036:38:42;4074:228:101;1684:394:42;;;;;;:::i;:::-;;:::i;4086:647::-;4472:16;;;;;;;;;;4506:19;;;;;;4404:197;;;829:117;4404:197;;;5090:25:101;;;;5131:18;;5124:34;;;;5174:18;;;5167:34;5217:18;;;5210:34;;;-1:-1:-1;;;;;5281:32:101;;5260:19;;;5253:61;4336:7:42;;;;5062:19:101;;4404:197:42;;;;;;;;;;;;4381:230;;;;;;4355:256;;4640:86;4662:15;4679:46;4708:16;4679:46;;;;;;;;;;:::i;:::-;8677:57:77;;-1:-1:-1;;;8677:57:77;;;7195:27:101;7238:11;;;7231:27;;;7274:12;;;7267:28;;;8641:7:77;;7311:12:101;;8677:57:77;;;;;;;;;;;;8667:68;;;;;;8660:75;;8548:194;;;;;4640:86:42;4621:105;4086:647;-1:-1:-1;;;;;;;4086:647:42:o;1181:18::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3096:404::-;3219:7;3261:232;3304:16;3344:4;3261:232;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3373:15:42;;;:32;;;-1:-1:-1;;;3373:32:42;;;;-1:-1:-1;;;;;3373:15:42;;;;-1:-1:-1;3373:30:42;;-1:-1:-1;3373:32:42;;;;;-1:-1:-1;3373:32:42;;;;;;:15;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3373:32:42;;;;;;;;;;;;:::i;:::-;3463:15;;3424:13;;-1:-1:-1;;;;;3463:15:42;3261:25;:232::i;:::-;3242:251;3096:404;-1:-1:-1;;3096:404:42:o;2312:119::-;2407:12;:14;;2352:7;;;2407:14;;;:::i;:::-;;;;;2396:26;;;;;;2408:25:101;;2396:2;2381:18;;2262:177;2396:26:42;;;;;;;;;;;;;2386:37;;;;;;2371:53;;2312:119;:::o;2667:213::-;-1:-1:-1;;;;;;;;;;;;;;;;;2817:56:42;;;;;;;;2849:7;-1:-1:-1;;;;;2817:56:42;;;;;2858:14;:12;:14::i;:::-;2817:56;;2810:63;2667:213;-1:-1:-1;;2667:213:42:o;1684:394::-;1972:23;;2017:22;;;;;1893:164;;1824:7;;1893:164;;591:58;;1972:23;;1893:164;6789:25:101;;;-1:-1:-1;;;;;6850:32:101;;;;6845:2;6830:18;;6823:60;6914:2;6899:18;;6892:34;6777:2;6762:18;;6587:345;1893:164:42;;;;;;;;;;;;;1866:205;;;;;;1847:224;;1684:394;;;:::o;14:163:101:-;82:5;127:2;118:6;113:3;109:16;105:25;102:45;;;143:1;140;133:12;102:45;-1:-1:-1;165:6:101;14:163;-1:-1:-1;14:163:101:o;182:127::-;243:10;238:3;234:20;231:1;224:31;274:4;271:1;264:15;298:4;295:1;288:15;314:275;385:2;379:9;450:2;431:13;;-1:-1:-1;;427:27:101;415:40;;485:18;470:34;;506:22;;;467:62;464:88;;;532:18;;:::i;:::-;568:2;561:22;314:275;;-1:-1:-1;314:275:101:o;594:186::-;642:4;675:18;667:6;664:30;661:56;;;697:18;;:::i;:::-;-1:-1:-1;763:2:101;742:15;-1:-1:-1;;738:29:101;769:4;734:40;;594:186::o;785:462::-;827:5;880:3;873:4;865:6;861:17;857:27;847:55;;898:1;895;888:12;847:55;934:6;921:20;965:48;981:31;1009:2;981:31;:::i;:::-;965:48;:::i;:::-;1038:2;1029:7;1022:19;1084:3;1077:4;1072:2;1064:6;1060:15;1056:26;1053:35;1050:55;;;1101:1;1098;1091:12;1050:55;1166:2;1159:4;1151:6;1147:17;1140:4;1131:7;1127:18;1114:55;1214:1;1189:16;;;1207:4;1185:27;1178:38;;;;1193:7;785:462;-1:-1:-1;;;785:462:101:o;1252:173::-;1320:20;;-1:-1:-1;;;;;1369:31:101;;1359:42;;1349:70;;1415:1;1412;1405:12;1349:70;1252:173;;;:::o;1430:827::-;1579:6;1587;1595;1603;1611;1664:3;1652:9;1643:7;1639:23;1635:33;1632:53;;;1681:1;1678;1671:12;1632:53;1704:62;1758:7;1747:9;1704:62;:::i;:::-;1694:72;;1817:2;1806:9;1802:18;1789:32;1840:18;1881:2;1873:6;1870:14;1867:34;;;1897:1;1894;1887:12;1867:34;1920:49;1961:7;1952:6;1941:9;1937:22;1920:49;:::i;:::-;1910:59;;2022:2;2011:9;2007:18;1994:32;1978:48;;2051:2;2041:8;2038:16;2035:36;;;2067:1;2064;2057:12;2035:36;;2090:51;2133:7;2122:8;2111:9;2107:24;2090:51;:::i;:::-;2080:61;;;2188:3;2177:9;2173:19;2160:33;2150:43;;2212:39;2246:3;2235:9;2231:19;2212:39;:::i;:::-;2202:49;;1430:827;;;;;;;;:::o;2444:258::-;2516:1;2526:113;2540:6;2537:1;2534:13;2526:113;;;2616:11;;;2610:18;2597:11;;;2590:39;2562:2;2555:10;2526:113;;;2657:6;2654:1;2651:13;2648:48;;;2692:1;2683:6;2678:3;2674:16;2667:27;2648:48;;2444:258;;;:::o;2707:383::-;2856:2;2845:9;2838:21;2819:4;2888:6;2882:13;2931:6;2926:2;2915:9;2911:18;2904:34;2947:66;3006:6;3001:2;2990:9;2986:18;2981:2;2973:6;2969:15;2947:66;:::i;:::-;3074:2;3053:15;-1:-1:-1;;3049:29:101;3034:45;;;;3081:2;3030:54;;2707:383;-1:-1:-1;;2707:383:101:o;3095:255::-;3190:6;3243:2;3231:9;3222:7;3218:23;3214:32;3211:52;;;3259:1;3256;3249:12;3211:52;3282:62;3336:7;3325:9;3282:62;:::i;:::-;3272:72;3095:255;-1:-1:-1;;;3095:255:101:o;3355:186::-;3414:6;3467:2;3455:9;3446:7;3442:23;3438:32;3435:52;;;3483:1;3480;3473:12;3435:52;3506:29;3525:9;3506:29;:::i;4307:519::-;4400:6;4453:2;4441:9;4432:7;4428:23;4424:32;4421:52;;;4469:1;4466;4459:12;4421:52;4502:2;4496:9;4544:2;4536:6;4532:15;4613:6;4601:10;4598:22;4577:18;4565:10;4562:34;4559:62;4556:88;;;4624:18;;:::i;:::-;4660:2;4653:22;4699:29;4718:9;4699:29;:::i;:::-;4691:6;4684:45;4790:2;4779:9;4775:18;4762:32;4757:2;4749:6;4745:15;4738:57;4814:6;4804:16;;;4307:519;;;;:::o;5325:380::-;5404:1;5400:12;;;;5447;;;5468:61;;5522:4;5514:6;5510:17;5500:27;;5468:61;5575:2;5567:6;5564:14;5544:18;5541:38;5538:161;;5621:10;5616:3;5612:20;5609:1;5602:31;5656:4;5653:1;5646:15;5684:4;5681:1;5674:15;5710:635;5790:6;5843:2;5831:9;5822:7;5818:23;5814:32;5811:52;;;5859:1;5856;5849:12;5811:52;5892:9;5886:16;5925:18;5917:6;5914:30;5911:50;;;5957:1;5954;5947:12;5911:50;5980:22;;6033:4;6025:13;;6021:27;-1:-1:-1;6011:55:101;;6062:1;6059;6052:12;6011:55;6091:2;6085:9;6116:48;6132:31;6160:2;6132:31;:::i;6116:48::-;6187:2;6180:5;6173:17;6227:7;6222:2;6217;6213;6209:11;6205:20;6202:33;6199:53;;;6248:1;6245;6238:12;6199:53;6261:54;6312:2;6307;6300:5;6296:14;6291:2;6287;6283:11;6261:54;:::i;:::-;6334:5;5710:635;-1:-1:-1;;;;;5710:635:101:o;6350:232::-;6389:3;6410:17;;;6407:140;;6469:10;6464:3;6460:20;6457:1;6450:31;6504:4;6501:1;6494:15;6532:4;6529:1;6522:15;6407:140;-1:-1:-1;6574:1:101;6563:13;;6350:232::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "CLAIMABLE_INVITE_TYPEHASH()": "c4fc453d",
    "EIP712_DOMAIN_TYPEHASH()": "c7977be7",
    "consumeNonce()": "34b15118",
    "currentNonce()": "adb610a3",
    "getClaimableInviteStructHash((address,bytes32))": "eb1df626",
    "getClaimableInviteWithNewNonce(address)": "8ebe24e5",
    "getDigest((address,bytes32))": "1c6e7f25",
    "getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)": "019a4f49",
    "name()": "06fdde03",
    "optimistInviter()": "d1829907"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OptimistInviter\",\"name\":\"_optimistInviter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIMABLE_INVITE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumeNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"}],\"name\":\"getClaimableInviteStructHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"getClaimableInviteWithNewNonce\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"}],\"name\":\"getDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_version\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifyingContract\",\"type\":\"address\"}],\"name\":\"getDigestWithEIP712Domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimistInviter\",\"outputs\":[{\"internalType\":\"contract OptimistInviter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consumeNonce()\":{\"returns\":{\"_0\":\"Nonce that should be used as part of ClaimableInvite.\"}},\"getClaimableInviteStructHash((address,bytes32))\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct to hash.\"},\"returns\":{\"_0\":\"EIP-712 typed struct hash.\"}},\"getClaimableInviteWithNewNonce(address)\":{\"params\":{\"_issuer\":\"Issuer to include in the ClaimableInvite.\"},\"returns\":{\"_0\":\"ClaimableInvite that can be hashed & signed.\"}},\"getDigest((address,bytes32))\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct to hash.\"},\"returns\":{\"_0\":\"EIP-712 compatible digest.\"}},\"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)\":{\"params\":{\"_chainid\":\"Chain ID to use in the EIP712 domain.\",\"_claimableInvite\":\"ClaimableInvite struct to hash.\",\"_name\":\"Contract name to use in the EIP712 domain.\",\"_verifyingContract\":\"Address to use in the EIP712 domain.\",\"_version\":\"Contract version to use in the EIP712 domain.\"},\"returns\":{\"_0\":\"EIP-712 compatible digest.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CLAIMABLE_INVITE_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the ClaimableInvite type.\"},\"EIP712_DOMAIN_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the EIP712Domain type that is included as part of the signature.\"},\"consumeNonce()\":{\"notice\":\"Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.\"},\"currentNonce()\":{\"notice\":\"Keeps track of current nonce to generate new nonces for each invite.\"},\"getClaimableInviteStructHash((address,bytes32))\":{\"notice\":\"Returns the hash of the struct ClaimableInvite.\"},\"getClaimableInviteWithNewNonce(address)\":{\"notice\":\"Returns a ClaimableInvite with the issuer and current nonce.\"},\"getDigest((address,bytes32))\":{\"notice\":\"Computes the EIP712 digest with default correct parameters.\"},\"getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)\":{\"notice\":\"Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail.\"},\"name()\":{\"notice\":\"OptimistInviter contract name. Used to construct the EIP-712 domain.\"},\"optimistInviter()\":{\"notice\":\"Address of OptimistInviter contract we are testing.\"}},\"notice\":\"Simple helper contract that helps with testing flow and signature for OptimistInviter contract. Made this a separate contract instead of including in OptimistInviter.t.sol for reusability.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/helpers/OptimistInviterHelper.sol\":\"OptimistInviterHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/testing/helpers/OptimistInviterHelper.sol\":{\"keccak256\":\"0xa373c07517e66c3e233812773a989d48d4103d8c5332274008b9f38dffbbad88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://657bd77f1f2a37303d128e1712cae571eec516564371a4a51c3f30cac1924d93\",\"dweb:/ipfs/QmZCsB2m1R1B7JYFkmLqsr2Qp3TYTEgCk8Sjqqf3W5gF1W\"]},\"contracts/universal/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0\",\"dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo\"]},\"contracts/universal/op-nft/OptimistInviter.sol\":{\"keccak256\":\"0xd7b006570c7e0c66ed0a8001c7e57848062913639e65f5bb6f4d8120e2a00c32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6dea2fad75351e4763735f6b539ae5566d64d3d2576029917e878af0354fb70c\",\"dweb:/ipfs/Qmen4u5jWy1ccsZz3sWRVY38wB8wjEPd9tM4X5cvpeBpiC\"]},\"contracts/universal/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c\",\"dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr\"]},\"node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"keccak256\":\"0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482\",\"dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94\",\"dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract OptimistInviter",
              "name": "_optimistInviter",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CLAIMABLE_INVITE_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "EIP712_DOMAIN_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "consumeNonce",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "currentNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "_claimableInvite",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getClaimableInviteStructHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_issuer",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "getClaimableInviteWithNewNonce",
          "outputs": [
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "_claimableInvite",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDigest",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "_claimableInvite",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_name",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_version",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "_chainid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_verifyingContract",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getDigestWithEIP712Domain",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "optimistInviter",
          "outputs": [
            {
              "internalType": "contract OptimistInviter",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "consumeNonce()": {
            "returns": {
              "_0": "Nonce that should be used as part of ClaimableInvite."
            }
          },
          "getClaimableInviteStructHash((address,bytes32))": {
            "params": {
              "_claimableInvite": "ClaimableInvite struct to hash."
            },
            "returns": {
              "_0": "EIP-712 typed struct hash."
            }
          },
          "getClaimableInviteWithNewNonce(address)": {
            "params": {
              "_issuer": "Issuer to include in the ClaimableInvite."
            },
            "returns": {
              "_0": "ClaimableInvite that can be hashed & signed."
            }
          },
          "getDigest((address,bytes32))": {
            "params": {
              "_claimableInvite": "ClaimableInvite struct to hash."
            },
            "returns": {
              "_0": "EIP-712 compatible digest."
            }
          },
          "getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)": {
            "params": {
              "_chainid": "Chain ID to use in the EIP712 domain.",
              "_claimableInvite": "ClaimableInvite struct to hash.",
              "_name": "Contract name to use in the EIP712 domain.",
              "_verifyingContract": "Address to use in the EIP712 domain.",
              "_version": "Contract version to use in the EIP712 domain."
            },
            "returns": {
              "_0": "EIP-712 compatible digest."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "CLAIMABLE_INVITE_TYPEHASH()": {
            "notice": "EIP712 typehash for the ClaimableInvite type."
          },
          "EIP712_DOMAIN_TYPEHASH()": {
            "notice": "EIP712 typehash for the EIP712Domain type that is included as part of the signature."
          },
          "consumeNonce()": {
            "notice": "Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces."
          },
          "currentNonce()": {
            "notice": "Keeps track of current nonce to generate new nonces for each invite."
          },
          "getClaimableInviteStructHash((address,bytes32))": {
            "notice": "Returns the hash of the struct ClaimableInvite."
          },
          "getClaimableInviteWithNewNonce(address)": {
            "notice": "Returns a ClaimableInvite with the issuer and current nonce."
          },
          "getDigest((address,bytes32))": {
            "notice": "Computes the EIP712 digest with default correct parameters."
          },
          "getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)": {
            "notice": "Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail."
          },
          "name()": {
            "notice": "OptimistInviter contract name. Used to construct the EIP-712 domain."
          },
          "optimistInviter()": {
            "notice": "Address of OptimistInviter contract we are testing."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/testing/helpers/OptimistInviterHelper.sol": "OptimistInviterHelper"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/testing/helpers/OptimistInviterHelper.sol": {
        "keccak256": "0xa373c07517e66c3e233812773a989d48d4103d8c5332274008b9f38dffbbad88",
        "urls": [
          "bzz-raw://657bd77f1f2a37303d128e1712cae571eec516564371a4a51c3f30cac1924d93",
          "dweb:/ipfs/QmZCsB2m1R1B7JYFkmLqsr2Qp3TYTEgCk8Sjqqf3W5gF1W"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/AttestationStation.sol": {
        "keccak256": "0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be",
        "urls": [
          "bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0",
          "dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/OptimistInviter.sol": {
        "keccak256": "0xd7b006570c7e0c66ed0a8001c7e57848062913639e65f5bb6f4d8120e2a00c32",
        "urls": [
          "bzz-raw://6dea2fad75351e4763735f6b539ae5566d64d3d2576029917e878af0354fb70c",
          "dweb:/ipfs/Qmen4u5jWy1ccsZz3sWRVY38wB8wjEPd9tM4X5cvpeBpiC"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21",
        "urls": [
          "bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c",
          "dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr"
        ],
        "license": "MIT"
      },
      "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol": {
        "keccak256": "0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0",
        "urls": [
          "bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482",
          "dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc",
        "urls": [
          "bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb",
          "dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
        "keccak256": "0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc",
        "urls": [
          "bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94",
          "dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
        "keccak256": "0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81",
        "urls": [
          "bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b",
          "dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/testing/helpers/OptimistInviterHelper.sol",
    "id": 38198,
    "exportedSymbols": {
      "ECDSA": [
        41352
      ],
      "OptimistInviter": [
        39830
      ],
      "OptimistInviterHelper": [
        38197
      ]
    },
    "nodeType": "SourceUnit",
    "src": "31:4705:42",
    "nodes": [
      {
        "id": 38023,
        "nodeType": "PragmaDirective",
        "src": "31:23:42",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 38025,
        "nodeType": "ImportDirective",
        "src": "56:77:42",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38198,
        "sourceUnit": 41353,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38024,
              "name": "ECDSA",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41352,
              "src": "65:5:42",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38027,
        "nodeType": "ImportDirective",
        "src": "135:77:42",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/OptimistInviter.sol",
        "file": "../../universal/op-nft/OptimistInviter.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38198,
        "sourceUnit": 39831,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38026,
              "name": "OptimistInviter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39830,
              "src": "144:15:42",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38197,
        "nodeType": "ContractDefinition",
        "src": "417:4318:42",
        "nodes": [
          {
            "id": 38034,
            "nodeType": "VariableDeclaration",
            "src": "531:118:42",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 38029,
              "nodeType": "StructuredDocumentation",
              "src": "454:72:42",
              "text": " @notice EIP712 typehash for the ClaimableInvite type."
            },
            "functionSelector": "c4fc453d",
            "mutability": "constant",
            "name": "CLAIMABLE_INVITE_TYPEHASH",
            "nameLocation": "555:25:42",
            "scope": 38197,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 38030,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "531:7:42",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "436c61696d61626c65496e766974652861646472657373206973737565722c62797465733332206e6f6e636529",
                  "id": 38032,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "601:47:42",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  },
                  "value": "ClaimableInvite(address issuer,bytes32 nonce)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  }
                ],
                "id": 38031,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "591:9:42",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 38033,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "591:58:42",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 38040,
            "nodeType": "VariableDeclaration",
            "src": "772:174:42",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 38035,
              "nodeType": "StructuredDocumentation",
              "src": "656:111:42",
              "text": " @notice EIP712 typehash for the EIP712Domain type that is included as part of the signature."
            },
            "functionSelector": "c7977be7",
            "mutability": "constant",
            "name": "EIP712_DOMAIN_TYPEHASH",
            "nameLocation": "796:22:42",
            "scope": 38197,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 38036,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "772:7:42",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
                  "id": 38038,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "852:84:42",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                    "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                  },
                  "value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                    "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                  }
                ],
                "id": 38037,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "829:9:42",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 38039,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "829:117:42",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 38044,
            "nodeType": "VariableDeclaration",
            "src": "1036:38:42",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 38041,
              "nodeType": "StructuredDocumentation",
              "src": "953:78:42",
              "text": " @notice Address of OptimistInviter contract we are testing."
            },
            "functionSelector": "d1829907",
            "mutability": "mutable",
            "name": "optimistInviter",
            "nameLocation": "1059:15:42",
            "scope": 38197,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_OptimistInviter_$39830",
              "typeString": "contract OptimistInviter"
            },
            "typeName": {
              "id": 38043,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 38042,
                "name": "OptimistInviter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 39830,
                "src": "1036:15:42"
              },
              "referencedDeclaration": 39830,
              "src": "1036:15:42",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                "typeString": "contract OptimistInviter"
              }
            },
            "visibility": "public"
          },
          {
            "id": 38047,
            "nodeType": "VariableDeclaration",
            "src": "1181:18:42",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 38045,
              "nodeType": "StructuredDocumentation",
              "src": "1081:95:42",
              "text": " @notice OptimistInviter contract name. Used to construct the EIP-712 domain."
            },
            "functionSelector": "06fdde03",
            "mutability": "mutable",
            "name": "name",
            "nameLocation": "1195:4:42",
            "scope": 38197,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 38046,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1181:6:42",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "public"
          },
          {
            "id": 38050,
            "nodeType": "VariableDeclaration",
            "src": "1306:27:42",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 38048,
              "nodeType": "StructuredDocumentation",
              "src": "1206:95:42",
              "text": " @notice Keeps track of current nonce to generate new nonces for each invite."
            },
            "functionSelector": "adb610a3",
            "mutability": "mutable",
            "name": "currentNonce",
            "nameLocation": "1321:12:42",
            "scope": 38197,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 38049,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1306:7:42",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 38067,
            "nodeType": "FunctionDefinition",
            "src": "1340:140:42",
            "nodes": [],
            "body": {
              "id": 38066,
              "nodeType": "Block",
              "src": "1407:73:42",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 38060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 38058,
                      "name": "optimistInviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38044,
                      "src": "1417:15:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                        "typeString": "contract OptimistInviter"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 38059,
                      "name": "_optimistInviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38053,
                      "src": "1435:16:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                        "typeString": "contract OptimistInviter"
                      }
                    },
                    "src": "1417:34:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                      "typeString": "contract OptimistInviter"
                    }
                  },
                  "id": 38061,
                  "nodeType": "ExpressionStatement",
                  "src": "1417:34:42"
                },
                {
                  "expression": {
                    "id": 38064,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 38062,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38047,
                      "src": "1461:4:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 38063,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38055,
                      "src": "1468:5:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1461:12:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 38065,
                  "nodeType": "ExpressionStatement",
                  "src": "1461:12:42"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 38056,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38053,
                  "mutability": "mutable",
                  "name": "_optimistInviter",
                  "nameLocation": "1368:16:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38067,
                  "src": "1352:32:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                    "typeString": "contract OptimistInviter"
                  },
                  "typeName": {
                    "id": 38052,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 38051,
                      "name": "OptimistInviter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39830,
                      "src": "1352:15:42"
                    },
                    "referencedDeclaration": 39830,
                    "src": "1352:15:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                      "typeString": "contract OptimistInviter"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38055,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1400:5:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38067,
                  "src": "1386:19:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 38054,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1386:6:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1351:55:42"
            },
            "returnParameters": {
              "id": 38057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1407:0:42"
            },
            "scope": 38197,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38088,
            "nodeType": "FunctionDefinition",
            "src": "1684:394:42",
            "nodes": [],
            "body": {
              "id": 38087,
              "nodeType": "Block",
              "src": "1837:241:42",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 38079,
                            "name": "CLAIMABLE_INVITE_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38034,
                            "src": "1925:25:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 38080,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38071,
                              "src": "1972:16:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_memory_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite memory"
                              }
                            },
                            "id": 38081,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39545,
                            "src": "1972:23:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 38082,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38071,
                              "src": "2017:16:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_memory_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite memory"
                              }
                            },
                            "id": 38083,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonce",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39547,
                            "src": "2017:22:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 38077,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1893:3:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 38078,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "1893:10:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 38084,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1893:164:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 38076,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1866:9:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 38085,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1866:205:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 38075,
                  "id": 38086,
                  "nodeType": "Return",
                  "src": "1847:224:42"
                }
              ]
            },
            "documentation": {
              "id": 38068,
              "nodeType": "StructuredDocumentation",
              "src": "1486:193:42",
              "text": " @notice Returns the hash of the struct ClaimableInvite.\n @param _claimableInvite ClaimableInvite struct to hash.\n @return EIP-712 typed struct hash."
            },
            "functionSelector": "eb1df626",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getClaimableInviteStructHash",
            "nameLocation": "1693:28:42",
            "parameters": {
              "id": 38072,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38071,
                  "mutability": "mutable",
                  "name": "_claimableInvite",
                  "nameLocation": "1761:16:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38088,
                  "src": "1722:55:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_memory_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 38070,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 38069,
                      "name": "OptimistInviter.ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39548,
                      "src": "1722:31:42"
                    },
                    "referencedDeclaration": 39548,
                    "src": "1722:31:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1721:57:42"
            },
            "returnParameters": {
              "id": 38075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38074,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38088,
                  "src": "1824:7:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 38073,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1824:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1823:9:42"
            },
            "scope": 38197,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38106,
            "nodeType": "FunctionDefinition",
            "src": "2312:119:42",
            "nodes": [],
            "body": {
              "id": 38105,
              "nodeType": "Block",
              "src": "2361:70:42",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 38100,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "2407:14:42",
                                "subExpression": {
                                  "id": 38099,
                                  "name": "currentNonce",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38050,
                                  "src": "2407:12:42",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 38097,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2396:3:42",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 38098,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "2396:10:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 38101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2396:26:42",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 38096,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "2386:9:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 38102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2386:37:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 38095,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "2378:7:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes32_$",
                        "typeString": "type(bytes32)"
                      },
                      "typeName": {
                        "id": 38094,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2378:7:42",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 38103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2378:46:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 38093,
                  "id": 38104,
                  "nodeType": "Return",
                  "src": "2371:53:42"
                }
              ]
            },
            "documentation": {
              "id": 38089,
              "nodeType": "StructuredDocumentation",
              "src": "2084:223:42",
              "text": " @notice Returns a bytes32 nonce that should change everytime. In practice, people should use\n         pseudorandom nonces.\n @return Nonce that should be used as part of ClaimableInvite."
            },
            "functionSelector": "34b15118",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "consumeNonce",
            "nameLocation": "2321:12:42",
            "parameters": {
              "id": 38090,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2333:2:42"
            },
            "returnParameters": {
              "id": 38093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38092,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38106,
                  "src": "2352:7:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 38091,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2352:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2351:9:42"
            },
            "scope": 38197,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38123,
            "nodeType": "FunctionDefinition",
            "src": "2667:213:42",
            "nodes": [],
            "body": {
              "id": 38122,
              "nodeType": "Block",
              "src": "2800:80:42",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 38117,
                        "name": "_issuer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38109,
                        "src": "2849:7:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 38118,
                          "name": "consumeNonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38106,
                          "src": "2858:12:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_bytes32_$",
                            "typeString": "function () returns (bytes32)"
                          }
                        },
                        "id": 38119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2858:14:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 38115,
                        "name": "OptimistInviter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39830,
                        "src": "2817:15:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_OptimistInviter_$39830_$",
                          "typeString": "type(contract OptimistInviter)"
                        }
                      },
                      "id": 38116,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ClaimableInvite",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39548,
                      "src": "2817:31:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_struct$_ClaimableInvite_$39548_storage_ptr_$",
                        "typeString": "type(struct OptimistInviter.ClaimableInvite storage pointer)"
                      }
                    },
                    "id": 38120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "structConstructorCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2817:56:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_memory_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite memory"
                    }
                  },
                  "functionReturnParameters": 38114,
                  "id": 38121,
                  "nodeType": "Return",
                  "src": "2810:63:42"
                }
              ]
            },
            "documentation": {
              "id": 38107,
              "nodeType": "StructuredDocumentation",
              "src": "2437:225:42",
              "text": " @notice Returns a ClaimableInvite with the issuer and current nonce.\n @param _issuer Issuer to include in the ClaimableInvite.\n @return ClaimableInvite that can be hashed & signed."
            },
            "functionSelector": "8ebe24e5",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getClaimableInviteWithNewNonce",
            "nameLocation": "2676:30:42",
            "parameters": {
              "id": 38110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38109,
                  "mutability": "mutable",
                  "name": "_issuer",
                  "nameLocation": "2715:7:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38123,
                  "src": "2707:15:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 38108,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2707:7:42",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2706:17:42"
            },
            "returnParameters": {
              "id": 38114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38113,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38123,
                  "src": "2756:38:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_memory_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 38112,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 38111,
                      "name": "OptimistInviter.ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39548,
                      "src": "2756:31:42"
                    },
                    "referencedDeclaration": 39548,
                    "src": "2756:31:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2755:40:42"
            },
            "scope": 38197,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38153,
            "nodeType": "FunctionDefinition",
            "src": "3096:404:42",
            "nodes": [],
            "body": {
              "id": 38152,
              "nodeType": "Block",
              "src": "3232:268:42",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 38133,
                        "name": "_claimableInvite",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38127,
                        "src": "3304:16:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                          "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 38136,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38047,
                            "src": "3344:4:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 38135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3338:5:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 38134,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3338:5:42",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 38137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3338:11:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 38140,
                                "name": "optimistInviter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 38044,
                                "src": "3373:15:42",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                                  "typeString": "contract OptimistInviter"
                                }
                              },
                              "id": 38141,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "EIP712_VERSION",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 39519,
                              "src": "3373:30:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_string_memory_ptr_$",
                                "typeString": "function () view external returns (string memory)"
                              }
                            },
                            "id": 38142,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3373:32:42",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 38139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3367:5:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 38138,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3367:5:42",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 38143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3367:39:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "expression": {
                          "id": 38144,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3424:5:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 38145,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "chainid",
                        "nodeType": "MemberAccess",
                        "src": "3424:13:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 38148,
                            "name": "optimistInviter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38044,
                            "src": "3463:15:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                              "typeString": "contract OptimistInviter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_OptimistInviter_$39830",
                              "typeString": "contract OptimistInviter"
                            }
                          ],
                          "id": 38147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3455:7:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 38146,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3455:7:42",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 38149,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3455:24:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                          "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 38132,
                      "name": "getDigestWithEIP712Domain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38196,
                      "src": "3261:25:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_ClaimableInvite_$39548_calldata_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$_t_address_$returns$_t_bytes32_$",
                        "typeString": "function (struct OptimistInviter.ClaimableInvite calldata,bytes memory,bytes memory,uint256,address) pure returns (bytes32)"
                      }
                    },
                    "id": 38150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3261:232:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 38131,
                  "id": 38151,
                  "nodeType": "Return",
                  "src": "3242:251:42"
                }
              ]
            },
            "documentation": {
              "id": 38124,
              "nodeType": "StructuredDocumentation",
              "src": "2886:205:42",
              "text": " @notice Computes the EIP712 digest with default correct parameters.\n @param _claimableInvite ClaimableInvite struct to hash.\n @return EIP-712 compatible digest."
            },
            "functionSelector": "1c6e7f25",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDigest",
            "nameLocation": "3105:9:42",
            "parameters": {
              "id": 38128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38127,
                  "mutability": "mutable",
                  "name": "_claimableInvite",
                  "nameLocation": "3156:16:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38153,
                  "src": "3115:57:42",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 38126,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 38125,
                      "name": "OptimistInviter.ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39548,
                      "src": "3115:31:42"
                    },
                    "referencedDeclaration": 39548,
                    "src": "3115:31:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3114:59:42"
            },
            "returnParameters": {
              "id": 38131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38130,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38153,
                  "src": "3219:7:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 38129,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3219:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3218:9:42"
            },
            "scope": 38197,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38196,
            "nodeType": "FunctionDefinition",
            "src": "4086:647:42",
            "nodes": [],
            "body": {
              "id": 38195,
              "nodeType": "Block",
              "src": "4345:388:42",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    38171
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 38171,
                      "mutability": "mutable",
                      "name": "domainSeparator",
                      "nameLocation": "4363:15:42",
                      "nodeType": "VariableDeclaration",
                      "scope": 38195,
                      "src": "4355:23:42",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 38170,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4355:7:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 38186,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 38175,
                            "name": "EIP712_DOMAIN_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38040,
                            "src": "4432:22:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 38177,
                                "name": "_name",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 38159,
                                "src": "4482:5:42",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 38176,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4472:9:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 38178,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4472:16:42",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 38180,
                                "name": "_version",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 38161,
                                "src": "4516:8:42",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 38179,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4506:9:42",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 38181,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4506:19:42",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 38182,
                            "name": "_chainid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38163,
                            "src": "4543:8:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 38183,
                            "name": "_verifyingContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38165,
                            "src": "4569:18:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 38173,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4404:3:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 38174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "4404:10:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 38184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4404:197:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 38172,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4381:9:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 38185,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4381:230:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4355:256:42"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 38189,
                        "name": "domainSeparator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38171,
                        "src": "4662:15:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 38191,
                            "name": "_claimableInvite",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38157,
                            "src": "4708:16:42",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                              "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                              "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                            }
                          ],
                          "id": 38190,
                          "name": "getClaimableInviteStructHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38088,
                          "src": "4679:28:42",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_ClaimableInvite_$39548_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (struct OptimistInviter.ClaimableInvite memory) pure returns (bytes32)"
                          }
                        },
                        "id": 38192,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4679:46:42",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 38187,
                        "name": "ECDSA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41352,
                        "src": "4640:5:42",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ECDSA_$41352_$",
                          "typeString": "type(library ECDSA)"
                        }
                      },
                      "id": 38188,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toTypedDataHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 41351,
                      "src": "4640:21:42",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                      }
                    },
                    "id": 38193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4640:86:42",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 38169,
                  "id": 38194,
                  "nodeType": "Return",
                  "src": "4621:105:42"
                }
              ]
            },
            "documentation": {
              "id": 38154,
              "nodeType": "StructuredDocumentation",
              "src": "3506:575:42",
              "text": " @notice Computes the EIP712 digest with the given domain parameters.\n         Used for testing that different domain parameters fail.\n @param _claimableInvite   ClaimableInvite struct to hash.\n @param _name              Contract name to use in the EIP712 domain.\n @param _version           Contract version to use in the EIP712 domain.\n @param _chainid           Chain ID to use in the EIP712 domain.\n @param _verifyingContract Address to use in the EIP712 domain.\n @return EIP-712 compatible digest."
            },
            "functionSelector": "019a4f49",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDigestWithEIP712Domain",
            "nameLocation": "4095:25:42",
            "parameters": {
              "id": 38166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38157,
                  "mutability": "mutable",
                  "name": "_claimableInvite",
                  "nameLocation": "4171:16:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4130:57:42",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 38156,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 38155,
                      "name": "OptimistInviter.ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39548,
                      "src": "4130:31:42"
                    },
                    "referencedDeclaration": 39548,
                    "src": "4130:31:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38159,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "4210:5:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4197:18:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 38158,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4197:5:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38161,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "4238:8:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4225:21:42",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 38160,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4225:5:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38163,
                  "mutability": "mutable",
                  "name": "_chainid",
                  "nameLocation": "4264:8:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4256:16:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 38162,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4256:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38165,
                  "mutability": "mutable",
                  "name": "_verifyingContract",
                  "nameLocation": "4290:18:42",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4282:26:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 38164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4282:7:42",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4120:194:42"
            },
            "returnParameters": {
              "id": 38169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38168,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38196,
                  "src": "4336:7:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 38167,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4336:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4335:9:42"
            },
            "scope": 38197,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "OptimistInviterHelper",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 38028,
          "nodeType": "StructuredDocumentation",
          "src": "214:202:42",
          "text": " Simple helper contract that helps with testing flow and signature for OptimistInviter contract.\n Made this a separate contract instead of including in OptimistInviter.t.sol for reusability."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          38197
        ],
        "name": "OptimistInviterHelper",
        "nameLocation": "426:21:42",
        "scope": 38198,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 42
}