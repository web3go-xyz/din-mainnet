{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inviteGranter",
          "type": "address"
        },
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "InviteClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAN_INVITE_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIMABLE_INVITE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INVITE_GRANTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_COMMITMENT_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "_claimableInvite",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "commitInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inviteCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_inviteCount",
          "type": "uint256"
        }
      ],
      "name": "setInviteCounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "2148:11429:55:-:0;;;5612:191;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5695:1;762:22:57;;5698:1:55;794:22:57;;;;826;;-1:-1:-1;;;;;5714:31:55;;::::1;;::::0;5755:41:::1;;::::0;2148:11429;;14:131:101;-1:-1:-1;;;;;89:31:101;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:413::-;257:6;265;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;366:9;360:16;385:31;410:5;385:31;:::i;:::-;485:2;470:18;;464:25;435:5;;-1:-1:-1;498:33:101;464:25;498:33;:::i;:::-;550:7;540:17;;;150:413;;;;;:::o;:::-;2148:11429:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d711461023b578063de2dd22114610262578063eccec5a814610282578063f62d1888146102a657600080fd5b8063916db22f146101d7578063b4245d73146101f4578063c4fc453d1461021457600080fd5b806350b414e6116100c857806350b414e61461015b57806350eedbc21461017157806354fd4d50146101845780635fda04c71461019957600080fd5b806314b47241146100ef578063187e3cd11461013357806325b27a3d14610148575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610146610141366004611154565b6102b9565b005b61014661015636600461116d565b61033e565b610163603c81565b60405190815260200161012a565b61014661017f366004611290565b6105c3565b61018c610abb565b60405161012a919061136a565b6101c76101a736600461137d565b603660209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161012a565b610163726f7074696d6973742e63616e2d696e7669746560681b81565b610163610202366004611154565b60356020526000908152604090205481565b6101637f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101636102703660046113a7565b60376020526000908152604090205481565b61018c604051806040016040528060058152602001640312e302e360dc1b81525081565b6101466102b43660046113c2565b610b5e565b6000818152603560205260409020541561032b5760405162461bcd60e51b815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c7265604482015267616479206d61646560c01b60648201526084015b60405180910390fd5b6000908152603560205260409020429055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103d55760405162461bcd60e51b815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e76697465206772616044820152756e7465722063616e206772616e7420696e766974657360501b6064820152608401610322565b8160008167ffffffffffffffff8111156103f1576103f1611204565b60405190808252806020026020018201604052801561043e57816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161040f5790505b50905060005b8281101561053d5783603760008888858181106104635761046361140b565b905060200201602081019061047891906113a7565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060405180606001604052808787848181106104b9576104b961140b565b90506020020160208101906104ce91906113a7565b6001600160a01b03168152602001726f7074696d6973742e63616e2d696e7669746560681b8152602001604051806040016040528060048152602001637472756560e01b81525081525082828151811061052a5761052a61140b565b6020908102919091010152600101610444565b506040516305eb5ea160e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea109061058a908490600401611421565b600060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b505050505050505050565b60006035600085846040516020016105dc9291906114a9565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116106845760405162461bcd60e51b815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d69747465642079606482015261195d60f21b608482015260a401610322565b42610690603c836114e3565b11156107045760405162461bcd60e51b815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c61707365642079657400006064820152608401610322565b600061077a7f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce61073760208701876113a7565b604080516020818101949094526001600160a01b039092169082015290860135606082015260800160405160208183030381529060405280519060200120610c8f565b905061079361078c60208601866113a7565b8285610ce3565b6107ea5760405162461bcd60e51b815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e617475604482015261726560f01b6064820152608401610322565b603660006107fb60208701876113a7565b6001600160a01b031681526020808201929092526040908101600090812087840135825290925290205460ff161561088a5760405162461bcd60e51b815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201526b191e481899595b881d5cd95960a21b6064820152608401610322565b60016036600061089d60208801886113a7565b6001600160a01b0316815260208082019290925260409081016000908120888401803583529352908120805460ff19169315159390931790925560379082906108e690886113a7565b6001600160a01b03166001600160a01b0316815260200190815260200160002054116109635760405162461bcd60e51b815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f20696044820152656e766974657360d01b6064820152608401610322565b6037600061097460208701876113a7565b6001600160a01b039081168252602080830193909352604090910160002080546000190190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e76697465000000906109f3908901896113a7565b604080516001600160a01b039092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610a35939291906114fb565b600060405180830381600087803b158015610a4f57600080fd5b505af1158015610a63573d6000803e3d6000fd5b5050506001600160a01b0386169050610a7f60208601866113a7565b6001600160a01b03167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b6060610ae67f0000000000000000000000000000000000000000000000000000000000000000610e27565b610b0f7f0000000000000000000000000000000000000000000000000000000000000000610e27565b610b387f0000000000000000000000000000000000000000000000000000000000000000610e27565b604051602001610b4a9392919061152b565b604051602081830303815290604052905090565b600054610100900460ff1615808015610b7e5750600054600160ff909116105b80610b985750303b158015610b98575060005460ff166001145b610bfb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610322565b6000805460ff191660011790558015610c1e576000805461ff0019166101001790555b610c4582604051806040016040528060058152602001640312e302e360dc1b815250610f30565b8015610c8b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000610cdd610c9c610f61565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610cf28585610fe1565b90925090506000816004811115610d0b57610d0b611585565b148015610d295750856001600160a01b0316826001600160a01b0316145b15610d3957600192505050610e20565b600080876001600160a01b0316631626ba7e60e01b8888604051602401610d6192919061159b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610d9f91906115b4565b600060405180830381855afa9150503d8060008114610dda576040519150601f19603f3d011682016040523d82523d6000602084013e610ddf565b606091505b5091509150818015610df2575080516020145b8015610e1957508051630b135d3f60e11b90610e1790830160209081019084016115d0565b145b9450505050505b9392505050565b606081600003610e4e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e785780610e62816115e9565b9150610e719050600a83611618565b9150610e52565b60008167ffffffffffffffff811115610e9357610e93611204565b6040519080825280601f01601f191660200182016040528015610ebd576020820181803683370190505b5090505b8415610f2857610ed260018361162c565b9150610edf600a86611643565b610eea9060306114e3565b60f81b818381518110610eff57610eff61140b565b60200101906001600160f81b031916908160001a905350610f21600a86611618565b9450610ec1565b949350505050565b600054610100900460ff16610f575760405162461bcd60e51b815260040161032290611657565b610c8b8282611026565b6000610fdc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610f9060015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036110175760208301516040840151606085015160001a61100b87828585611067565b9450945050505061101f565b506000905060025b9250929050565b600054610100900460ff1661104d5760405162461bcd60e51b815260040161032290611657565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561109e575060009050600361114b565b8460ff16601b141580156110b657508460ff16601c14155b156110c7575060009050600461114b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561111b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111445760006001925092505061114b565b9150600090505b94509492505050565b60006020828403121561116657600080fd5b5035919050565b60008060006040848603121561118257600080fd5b833567ffffffffffffffff8082111561119a57600080fd5b818601915086601f8301126111ae57600080fd5b8135818111156111bd57600080fd5b8760208260051b85010111156111d257600080fd5b6020928301989097509590910135949350505050565b80356001600160a01b03811681146111ff57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561123557611235611204565b604051601f8501601f19908116603f0116810190828211818310171561125d5761125d611204565b8160405280935085815286868601111561127657600080fd5b858560208301376000602087830101525050509392505050565b600080600083850360808112156112a657600080fd5b6112af856111e8565b93506040601f19820112156112c357600080fd5b50602084019150606084013567ffffffffffffffff8111156112e457600080fd5b8401601f810186136112f557600080fd5b6113048682356020840161121a565b9150509250925092565b60005b83811015611329578181015183820152602001611311565b83811115611338576000848401525b50505050565b6000815180845261135681602086016020860161130e565b601f01601f19169290920160200192915050565b602081526000610e20602083018461133e565b6000806040838503121561139057600080fd5b611399836111e8565b946020939093013593505050565b6000602082840312156113b957600080fd5b610e20826111e8565b6000602082840312156113d457600080fd5b813567ffffffffffffffff8111156113eb57600080fd5b8201601f810184136113fc57600080fd5b610f288482356020840161121a565b634e487b7160e01b600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561149b57888303603f19018552815180516001600160a01b03168452878101518885015286015160608785018190526114878186018361133e565b968901969450505090860190600101611448565b509098975050505050505050565b6001600160a01b0383168152604060208201819052600090610f289083018461133e565b634e487b7160e01b600052601160045260246000fd5b600082198211156114f6576114f66114cd565b500190565b60018060a01b0384168152826020820152606060408201526000611522606083018461133e565b95945050505050565b6000845161153d81846020890161130e565b8083019050601760f91b808252855161155d816001850160208a0161130e565b6001920191820152835161157881600284016020880161130e565b0160020195945050505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610f28604083018461133e565b600082516115c681846020870161130e565b9190910192915050565b6000602082840312156115e257600080fd5b5051919050565b6000600182016115fb576115fb6114cd565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261162757611627611602565b500490565b60008282101561163e5761163e6114cd565b500390565b60008261165257611652611602565b500690565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea164736f6c634300080f000a",
    "sourceMap": "2148:11429:55:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3389:39;;;;;;;;-1:-1:-1;;;;;178:32:101;;;160:51;;148:2;133:18;3389:39:55;;;;;;;;8868:500;;;;;;:::i;:::-;;:::i;:::-;;6676:1032;;;;;;:::i;:::-;;:::i;4164:50::-;;4212:2;4164:50;;;;;1247:25:101;;;1235:2;1220:18;4164:50:55;1101:177:101;10455:3120:55;;;;;;:::i;:::-;;:::i;972:372:57:-;;;:::i;:::-;;;;;;;:::i;5212:62:55:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4098:14:101;;4091:22;4073:41;;4061:2;4046:18;5212:62:55;3933:187:101;3223:83:55;;-1:-1:-1;;;3223:83:55;;5050:55;;;;;;:::i;:::-;;;;;;;;;;;;;;2989:118;;3049:58;2989:118;;3510:55;;;;;5364:47;;;;;;:::i;:::-;;;;;;;;;;;;;;2858;;;;;;;;;;;;;;;-1:-1:-1;;;2858:47:55;;;;;6316:113;;;;;;:::i;:::-;;:::i;8868:500::-;9216:33;;;;:20;:33;;;;;;:38;9208:91;;;;-1:-1:-1;;;9208:91:55;;5391:2:101;9208:91:55;;;5373:21:101;5430:2;5410:18;;;5403:30;5469:34;5449:18;;;5442:62;-1:-1:-1;;;5520:18:101;;;5513:38;5568:19;;9208:91:55;;;;;;;;;9310:33;;;;:20;:33;;;;;9346:15;9310:51;;8868:500::o;6676:1032::-;6840:10;-1:-1:-1;;;;;6854:14:55;6840:28;;6819:129;;;;-1:-1:-1;;;6819:129:55;;5800:2:101;6819:129:55;;;5782:21:101;5839:2;5819:18;;;5812:30;5878:34;5858:18;;;5851:62;-1:-1:-1;;;5929:18:101;;;5922:52;5991:19;;6819:129:55;5598:418:101;6819:129:55;6976:9;6959:14;6976:9;7074:48;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;7074:48:55;;;;;;;;;;;;;;;;7003:119;;7138:9;7133:518;7153:6;7149:1;:10;7133:518;;;7266:12;7237;:26;7250:9;;7260:1;7250:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;7237:26:55;-1:-1:-1;;;;;7237:26:55;;;;;;;;;;;;:41;;;;7408:172;;;;;;;;7468:9;;7478:1;7468:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;7408:172:55;;;;;-1:-1:-1;;;7408:172:55;;;;7552:13;;;;;;;;;;;;;-1:-1:-1;;;7552:13:55;;;7408:172;;;7390:12;7403:1;7390:15;;;;;;;;:::i;:::-;;;;;;;;;;:190;7623:3;;7133:518;;;-1:-1:-1;7661:40:55;;-1:-1:-1;;;7661:40:55;;-1:-1:-1;;;;;7661:19:55;:26;;;;:40;;7688:12;;7661:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6760:948;;6676:1032;;;:::o;10455:3120::-;10609:27;10639:20;:87;10694:8;10704:10;10683:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10673:43;;;;;;10639:87;;;;;;;;;;;;10609:117;;10848:1;10826:19;:23;10805:136;;;;-1:-1:-1;;;10805:136:55;;7834:2:101;10805:136:55;;;7816:21:101;7873:2;7853:18;;;7846:30;7912:34;7892:18;;;7885:62;7983:34;7963:18;;;7956:62;-1:-1:-1;;;8034:19:101;;;8027:33;8077:19;;10805:136:55;7632:470:101;10805:136:55;11106:15;11059:43;4212:2;11059:19;:43;:::i;:::-;:62;;11038:171;;;;-1:-1:-1;;;11038:171:55;;8574:2:101;11038:171:55;;;8556:21:101;8613:2;8593:18;;;8586:30;8652:34;8632:18;;;8625:62;8723:32;8703:18;;;8696:60;8773:19;;11038:171:55;8372:426:101;11038:171:55;11299:14;11316:245;3049:58;11452:23;;;;:16;:23;:::i;:::-;11373:164;;;11497:22;11373:164;;;9005:25:101;;;;-1:-1:-1;;;;;9066:32:101;;;9046:18;;;9039:60;11497:22:55;;;;9115:18:101;;;9108:34;8978:18;;11373:164:55;;;;;;;;;;;;11346:205;;;;;;11316:16;:245::i;:::-;11299:262;-1:-1:-1;11951:81:55;11988:23;;;;:16;:23;:::i;:::-;12013:6;12021:10;11951:36;:81::i;:::-;11930:162;;;;-1:-1:-1;;;11930:162:55;;9355:2:101;11930:162:55;;;9337:21:101;9394:2;9374:18;;;9367:30;9433:34;9413:18;;;9406:62;-1:-1:-1;;;9484:18:101;;;9477:32;9526:19;;11930:162:55;9153:398:101;11930:162:55;12420:10;:35;12431:23;;;;:16;:23;:::i;:::-;-1:-1:-1;;;;;12420:35:55;;;;;;;;;;;;;;;-1:-1:-1;12420:35:55;;;12456:22;;;;12420:59;;;;;;;;;;:68;12399:159;;;;-1:-1:-1;;;12399:159:55;;9758:2:101;12399:159:55;;;9740:21:101;9797:2;9777:18;;;9770:30;9836:34;9816:18;;;9809:62;-1:-1:-1;;;9887:18:101;;;9880:42;9939:19;;12399:159:55;9556:408:101;12399:159:55;12710:4;12648:10;:35;12659:23;;;;:16;:23;:::i;:::-;-1:-1:-1;;;;;12648:35:55;;;;;;;;;;;;;;;-1:-1:-1;12648:35:55;;;12684:22;;;;;12648:59;;;;;;;:66;;-1:-1:-1;;12648:66:55;;;;;;;;;;;12841:12;;-1:-1:-1;;12854:23:55;;12684:22;12854:23;:::i;:::-;-1:-1:-1;;;;;12841:37:55;-1:-1:-1;;;;;12841:37:55;;;;;;;;;;;;;:41;12820:126;;;;-1:-1:-1;;;12820:126:55;;10171:2:101;12820:126:55;;;10153:21:101;10210:2;10190:18;;;10183:30;10249:34;10229:18;;;10222:62;-1:-1:-1;;;10300:18:101;;;10293:36;10346:19;;12820:126:55;9969:402:101;12820:126:55;13103:12;:37;13116:23;;;;:16;:23;:::i;:::-;-1:-1:-1;;;;;13103:37:55;;;;;;;;;;;;;;;;;-1:-1:-1;13103:37:55;13101:39;;-1:-1:-1;;13101:39:55;;;13320:19;:26;;;;13360:8;;418:40:56;;13470:23:55;;;;:16;:23;:::i;:::-;13459:35;;;-1:-1:-1;;;;;178:32:101;;;13459:35:55;;;160:51:101;133:18;13459:35:55;;;;;;;;;;;;13320:184;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;13520:48:55;;;-1:-1:-1;13534:23:55;;;;;;:::i;:::-;-1:-1:-1;;;;;13520:48:55;;;;;;;;;;;10599:2976;;10455:3120;;;:::o;972:372:57:-;1012:13;1118:31;1135:13;1118:16;:31::i;:::-;1196;1213:13;1196:16;:31::i;:::-;1274;1291:13;1274:16;:31::i;:::-;1080:243;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1037:300;;972:372;:::o;6316:113:55:-;3111:19:58;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:58;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:58;1476:19:64;:23;;;3219:66:58;;-1:-1:-1;3268:12:58;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:58;;11934:2:101;3157:201:58;;;11916:21:101;11973:2;11953:18;;;11946:30;12012:34;11992:18;;;11985:62;-1:-1:-1;;;12063:18:101;;;12056:44;12117:19;;3157:201:58;11732:410:101;3157:201:58;3368:12;:16;;-1:-1:-1;;3368:16:58;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:58;;;;;3394:65;6386:36:55::1;6400:5;6407:14;;;;;;;;;;;;;-1:-1:-1::0;;;6407:14:55::1;;::::0;6386:13:::1;:36::i;:::-;3483:14:58::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;3513:21:58;;;3553:14;;-1:-1:-1;12299:36:101;;3553:14:58;;12287:2:101;12272:18;3553:14:58;;;;;;;3479:99;3101:483;6316:113:55;:::o;3890:176:68:-;3967:7;3993:66;4026:20;:18;:20::i;:::-;4048:10;8710:57:67;;-1:-1:-1;;;8710:57:67;;;14554:27:101;14597:11;;;14590:27;;;14633:12;;;14626:28;;;8674:7:67;;14670:12:101;;8710:57:67;;;;;;;;;;;;8700:68;;;;;;8693:75;;8581:194;;;;;3993:66:68;3986:73;3890:176;-1:-1:-1;;3890:176:68:o;1039:667:78:-;1175:4;1192:17;1211:24;1239:33;1256:4;1262:9;1239:16;:33::i;:::-;1191:81;;-1:-1:-1;1191:81:78;-1:-1:-1;1295:26:78;1286:5;:35;;;;;;;;:::i;:::-;;:58;;;;;1338:6;-1:-1:-1;;;;;1325:19:78;:9;-1:-1:-1;;;;;1325:19:78;;1286:58;1282:100;;;1367:4;1360:11;;;;;;1282:100;1393:12;1407:19;1430:6;-1:-1:-1;;;;;1430:17:78;1484:34;;;1520:4;1526:9;1461:75;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1461:75:78;;;;;;;;;;;;;;-1:-1:-1;;;;;1461:75:78;-1:-1:-1;;;;;;1461:75:78;;;;;;;;;;1430:116;;;;1461:75;1430:116;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1392:154;;;;1564:7;:42;;;;;1587:6;:13;1604:2;1587:19;1564:42;:134;;;;-1:-1:-1;1622:29:78;;-1:-1:-1;;;1663:34:78;1622:29;;;;;;;;;;;;:::i;:::-;:76;1564:134;1556:143;;;;;;1039:667;;;;;;:::o;392:703:76:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:76;;;;;;;;;;;;-1:-1:-1;;;691:10:76;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:76;;-1:-1:-1;837:2:76;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:76;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:76;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;966:56:76;;;;;;;;-1:-1:-1;1036:11:76;1045:2;1036:11;;:::i;:::-;;;908:150;;;1081:6;392:703;-1:-1:-1;;;;392:703:76:o;2306:147:68:-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;;;;;;:::i;:::-;2408:38:68::1;2432:4;2438:7;2408:23;:38::i;2842:160::-:0;2895:7;2921:74;1595:95;2955:17;4386:12;;;4302:103;2955:17;4731:15;;3184:73;;;;;;14952:25:101;;;14993:18;;;14986:34;;;15036:18;;;15029:34;;;3228:13:68;15079:18:101;;;15072:34;3251:4:68;15122:19:101;;;15115:61;3148:7:68;;14924:19:101;;3184:73:68;;;;;;;;;;;;3174:84;;;;;;3167:91;;3008:257;;;;;;2921:74;2914:81;;2842:160;:::o;2243:730:77:-;2324:7;2333:12;2361:9;:16;2381:2;2361:22;2357:610;;2697:4;2682:20;;2676:27;2746:4;2731:20;;2725:27;2803:4;2788:20;;2782:27;2399:9;2774:36;2844:25;2855:4;2774:36;2676:27;2725;2844:10;:25::i;:::-;2837:32;;;;;;;;;2357:610;-1:-1:-1;2916:1:77;;-1:-1:-1;2920:35:77;2357:610;2243:730;;;;;:::o;2459:297:68:-;4910:13:58;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:58;;;;;;;:::i;:::-;2592:22:68;;::::1;::::0;;::::1;::::0;2648:25;;;;;::::1;::::0;2683:12:::1;:25:::0;;;;2718:15:::1;:31:::0;2459:297::o;5167:1603:77:-;5293:7;;6217:66;6204:79;;6200:161;;;-1:-1:-1;6315:1:77;;-1:-1:-1;6319:30:77;6299:51;;6200:161;6374:1;:7;;6379:2;6374:7;;:18;;;;;6385:1;:7;;6390:2;6385:7;;6374:18;6370:100;;;-1:-1:-1;6424:1:77;;-1:-1:-1;6428:30:77;6408:51;;6370:100;6581:24;;;6564:14;6581:24;;;;;;;;;15414:25:101;;;15487:4;15475:17;;15455:18;;;15448:45;;;;15509:18;;;15502:34;;;15552:18;;;15545:34;;;6581:24:77;;15386:19:101;;6581:24:77;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6581:24:77;;-1:-1:-1;;6581:24:77;;;-1:-1:-1;;;;;;;6619:20:77;;6615:101;;6671:1;6675:29;6655:50;;;;;;;6615:101;6734:6;-1:-1:-1;6742:20:77;;-1:-1:-1;5167:1603:77;;;;;;;;:::o;222:180:101:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;-1:-1:-1;373:23:101;;222:180;-1:-1:-1;222:180:101:o;407:689::-;502:6;510;518;571:2;559:9;550:7;546:23;542:32;539:52;;;587:1;584;577:12;539:52;627:9;614:23;656:18;697:2;689:6;686:14;683:34;;;713:1;710;703:12;683:34;751:6;740:9;736:22;726:32;;796:7;789:4;785:2;781:13;777:27;767:55;;818:1;815;808:12;767:55;858:2;845:16;884:2;876:6;873:14;870:34;;;900:1;897;890:12;870:34;955:7;948:4;938:6;935:1;931:14;927:2;923:23;919:34;916:47;913:67;;;976:1;973;966:12;913:67;1007:4;999:13;;;;1031:6;;-1:-1:-1;1069:20:101;;;;1056:34;;407:689;-1:-1:-1;;;;407:689:101:o;1283:173::-;1351:20;;-1:-1:-1;;;;;1400:31:101;;1390:42;;1380:70;;1446:1;1443;1436:12;1380:70;1283:173;;;:::o;1461:127::-;1522:10;1517:3;1513:20;1510:1;1503:31;1553:4;1550:1;1543:15;1577:4;1574:1;1567:15;1593:631;1657:5;1687:18;1728:2;1720:6;1717:14;1714:40;;;1734:18;;:::i;:::-;1809:2;1803:9;1777:2;1863:15;;-1:-1:-1;;1859:24:101;;;1885:2;1855:33;1851:42;1839:55;;;1909:18;;;1929:22;;;1906:46;1903:72;;;1955:18;;:::i;:::-;1995:10;1991:2;1984:22;2024:6;2015:15;;2054:6;2046;2039:22;2094:3;2085:6;2080:3;2076:16;2073:25;2070:45;;;2111:1;2108;2101:12;2070:45;2161:6;2156:3;2149:4;2141:6;2137:17;2124:44;2216:1;2209:4;2200:6;2192;2188:19;2184:30;2177:41;;;;1593:631;;;;;:::o;2229:689::-;2351:6;2359;2367;2411:9;2402:7;2398:23;2441:3;2437:2;2433:12;2430:32;;;2458:1;2455;2448:12;2430:32;2481:29;2500:9;2481:29;:::i;:::-;2471:39;-1:-1:-1;2544:2:101;-1:-1:-1;;2526:16:101;;2522:25;2519:45;;;2560:1;2557;2550:12;2519:45;;2598:2;2587:9;2583:18;2573:28;;2652:2;2641:9;2637:18;2624:32;2679:18;2671:6;2668:30;2665:50;;;2711:1;2708;2701:12;2665:50;2734:22;;2787:4;2779:13;;2775:27;-1:-1:-1;2765:55:101;;2816:1;2813;2806:12;2765:55;2839:73;2904:7;2899:2;2886:16;2881:2;2877;2873:11;2839:73;:::i;:::-;2829:83;;;2229:689;;;;;:::o;2923:258::-;2995:1;3005:113;3019:6;3016:1;3013:13;3005:113;;;3095:11;;;3089:18;3076:11;;;3069:39;3041:2;3034:10;3005:113;;;3136:6;3133:1;3130:13;3127:48;;;3171:1;3162:6;3157:3;3153:16;3146:27;3127:48;;2923:258;;;:::o;3186:::-;3228:3;3266:5;3260:12;3293:6;3288:3;3281:19;3309:63;3365:6;3358:4;3353:3;3349:14;3342:4;3335:5;3331:16;3309:63;:::i;:::-;3426:2;3405:15;-1:-1:-1;;3401:29:101;3392:39;;;;3433:4;3388:50;;3186:258;-1:-1:-1;;3186:258:101:o;3449:220::-;3598:2;3587:9;3580:21;3561:4;3618:45;3659:2;3648:9;3644:18;3636:6;3618:45;:::i;3674:254::-;3742:6;3750;3803:2;3791:9;3782:7;3778:23;3774:32;3771:52;;;3819:1;3816;3809:12;3771:52;3842:29;3861:9;3842:29;:::i;:::-;3832:39;3918:2;3903:18;;;;3890:32;;-1:-1:-1;;;3674:254:101:o;4543:186::-;4602:6;4655:2;4643:9;4634:7;4630:23;4626:32;4623:52;;;4671:1;4668;4661:12;4623:52;4694:29;4713:9;4694:29;:::i;4734:450::-;4803:6;4856:2;4844:9;4835:7;4831:23;4827:32;4824:52;;;4872:1;4869;4862:12;4824:52;4912:9;4899:23;4945:18;4937:6;4934:30;4931:50;;;4977:1;4974;4967:12;4931:50;5000:22;;5053:4;5045:13;;5041:27;-1:-1:-1;5031:55:101;;5082:1;5079;5072:12;5031:55;5105:73;5170:7;5165:2;5152:16;5147:2;5143;5139:11;5105:73;:::i;6021:127::-;6082:10;6077:3;6073:20;6070:1;6063:31;6113:4;6110:1;6103:15;6137:4;6134:1;6127:15;6153:1154;6363:4;6392:2;6432;6421:9;6417:18;6462:2;6451:9;6444:21;6485:6;6520;6514:13;6551:6;6543;6536:22;6577:2;6567:12;;6610:2;6599:9;6595:18;6588:25;;6672:2;6662:6;6659:1;6655:14;6644:9;6640:30;6636:39;6710:2;6702:6;6698:15;6731:1;6741:537;6755:6;6752:1;6749:13;6741:537;;;6820:22;;;-1:-1:-1;;6816:36:101;6804:49;;6876:13;;6948:9;;-1:-1:-1;;;;;6944:35:101;6929:51;;7023:11;;;7017:18;7000:15;;;6993:43;7075:11;;7069:18;6912:4;7107:15;;;7100:27;;;7150:48;7182:15;;;7069:18;7150:48;:::i;:::-;7256:12;;;;7140:58;-1:-1:-1;;;7221:15:101;;;;6777:1;6770:9;6741:537;;;-1:-1:-1;7295:6:101;;6153:1154;-1:-1:-1;;;;;;;;6153:1154:101:o;7312:315::-;-1:-1:-1;;;;;7487:32:101;;7469:51;;7556:2;7551;7536:18;;7529:30;;;-1:-1:-1;;7576:45:101;;7602:18;;7594:6;7576:45;:::i;8107:127::-;8168:10;8163:3;8159:20;8156:1;8149:31;8199:4;8196:1;8189:15;8223:4;8220:1;8213:15;8239:128;8279:3;8310:1;8306:6;8303:1;8300:13;8297:39;;;8316:18;;:::i;:::-;-1:-1:-1;8352:9:101;;8239:128::o;10376:386::-;10608:1;10604;10599:3;10595:11;10591:19;10583:6;10579:32;10568:9;10561:51;10648:6;10643:2;10632:9;10628:18;10621:34;10691:2;10686;10675:9;10671:18;10664:30;10542:4;10711:45;10752:2;10741:9;10737:18;10729:6;10711:45;:::i;:::-;10703:53;10376:386;-1:-1:-1;;;;;10376:386:101:o;10767:960::-;11196:3;11234:6;11228:13;11250:53;11296:6;11291:3;11284:4;11276:6;11272:17;11250:53;:::i;:::-;11334:6;11329:3;11325:16;11312:29;;-1:-1:-1;;;11386:2:101;11379:5;11372:17;11420:6;11414:13;11436:65;11492:8;11488:1;11481:5;11477:13;11470:4;11462:6;11458:17;11436:65;:::i;:::-;11564:1;11520:20;;11556:10;;;11549:22;11596:13;;11618:62;11596:13;11667:1;11659:10;;11652:4;11640:17;;11618:62;:::i;:::-;11700:17;11719:1;11696:25;;10767:960;-1:-1:-1;;;;;10767:960:101:o;12346:127::-;12407:10;12402:3;12398:20;12395:1;12388:31;12438:4;12435:1;12428:15;12462:4;12459:1;12452:15;12478:289;12653:6;12642:9;12635:25;12696:2;12691;12680:9;12676:18;12669:30;12616:4;12716:45;12757:2;12746:9;12742:18;12734:6;12716:45;:::i;12772:274::-;12901:3;12939:6;12933:13;12955:53;13001:6;12996:3;12989:4;12981:6;12977:17;12955:53;:::i;:::-;13024:16;;;;;12772:274;-1:-1:-1;;12772:274:101:o;13051:184::-;13121:6;13174:2;13162:9;13153:7;13149:23;13145:32;13142:52;;;13190:1;13187;13180:12;13142:52;-1:-1:-1;13213:16:101;;13051:184;-1:-1:-1;13051:184:101:o;13240:135::-;13279:3;13300:17;;;13297:43;;13320:18;;:::i;:::-;-1:-1:-1;13367:1:101;13356:13;;13240:135::o;13380:127::-;13441:10;13436:3;13432:20;13429:1;13422:31;13472:4;13469:1;13462:15;13496:4;13493:1;13486:15;13512:120;13552:1;13578;13568:35;;13583:18;;:::i;:::-;-1:-1:-1;13617:9:101;;13512:120::o;13637:125::-;13677:4;13705:1;13702;13699:8;13696:34;;;13710:18;;:::i;:::-;-1:-1:-1;13747:9:101;;13637:125::o;13767:112::-;13799:1;13825;13815:35;;13830:18;;:::i;:::-;-1:-1:-1;13864:9:101;;13767:112::o;13884:407::-;14086:2;14068:21;;;14125:2;14105:18;;;14098:30;14164:34;14159:2;14144:18;;14137:62;-1:-1:-1;;;14230:2:101;14215:18;;14208:41;14281:3;14266:19;;13884:407::o",
    "linkReferences": {},
    "immutableReferences": {
      "39535": [
        {
          "start": 244,
          "length": 32
        },
        {
          "start": 841,
          "length": 32
        }
      ],
      "39539": [
        {
          "start": 576,
          "length": 32
        },
        {
          "start": 1365,
          "length": 32
        },
        {
          "start": 2460,
          "length": 32
        }
      ],
      "39849": [
        {
          "start": 2754,
          "length": 32
        }
      ],
      "39852": [
        {
          "start": 2795,
          "length": 32
        }
      ],
      "39855": [
        {
          "start": 2836,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_STATION()": "db083d71",
    "CAN_INVITE_ATTESTATION_KEY()": "916db22f",
    "CLAIMABLE_INVITE_TYPEHASH()": "c4fc453d",
    "EIP712_VERSION()": "eccec5a8",
    "INVITE_GRANTER()": "14b47241",
    "MIN_COMMITMENT_PERIOD()": "50b414e6",
    "claimInvite(address,(address,bytes32),bytes)": "50eedbc2",
    "commitInvite(bytes32)": "187e3cd1",
    "commitmentTimestamps(bytes32)": "b4245d73",
    "initialize(string)": "f62d1888",
    "inviteCounts(address)": "de2dd221",
    "setInviteCounts(address[],uint256)": "25b27a3d",
    "usedNonces(address,bytes32)": "5fda04c7",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviteGranter\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"InviteClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAN_INVITE_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIMABLE_INVITE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE_GRANTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COMMITMENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"commitInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_inviteCount\",\"type\":\"uint256\"}],\"name\":\"setInviteCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:upgradeable\":\"@title  OptimistInviter\",\"events\":{\"InviteClaimed(address,address)\":{\"params\":{\"claimer\":\"Address that claimed the invite.\",\"issuer\":\"Address that issued the signature.\"}}},\"kind\":\"dev\",\"methods\":{\"claimInvite(address,(address,bytes32),bytes)\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct containing the issuer and nonce.\",\"_claimer\":\"Address that will be granted the invite.\",\"_signature\":\"Signature signed over the claimable invite.\"}},\"commitInvite(bytes32)\":{\"params\":{\"_commitment\":\"A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))\"}},\"constructor\":{\"custom:semver\":\"1.0.0\",\"params\":{\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_inviteGranter\":\"Address of the invite granter.\"}},\"initialize(string)\":{\"params\":{\"_name\":\"Contract name.\"}},\"setInviteCounts(address[],uint256)\":{\"params\":{\"_accounts\":\"An array of accounts to update the invite counts of.\",\"_inviteCount\":\"Number of invites to set to.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"InviteClaimed(address,address)\":{\"notice\":\"Emitted when an invite is claimed.\"}},\"kind\":\"user\",\"methods\":{\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"CAN_INVITE_ATTESTATION_KEY()\":{\"notice\":\"Attestation key for that signals that an account was allowed to issue invites\"},\"CLAIMABLE_INVITE_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the ClaimableInvite type.\"},\"EIP712_VERSION()\":{\"notice\":\"Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme.\"},\"INVITE_GRANTER()\":{\"notice\":\"Granter who can set accounts' invite counts.\"},\"MIN_COMMITMENT_PERIOD()\":{\"notice\":\"Minimum age of a commitment (in seconds) before it can be revealed using claimInvite.         Currently set to 60 seconds.         Prevents an attacker from front-running a commitment by taking the signature in the         claimInvite call and quickly committing and claiming it before the the claimer's         transaction succeeds. With this, frontrunning a commitment requires that an attacker         be able to prevent the honest claimer's claimInvite transaction from being included         for this long.\"},\"claimInvite(address,(address,bytes32),bytes)\":{\"notice\":\"Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \\\"optimist.can-mint-from-invite\\\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function.\"},\"commitInvite(bytes32)\":{\"notice\":\"Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the         issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite.\"},\"commitmentTimestamps(bytes32)\":{\"notice\":\"Maps from hashes to the timestamp when they were committed.\"},\"initialize(string)\":{\"notice\":\"Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures.\"},\"inviteCounts(address)\":{\"notice\":\"Maps from addresses to number of invites they have.\"},\"setInviteCounts(address[],uint256)\":{\"notice\":\"Allows invite granter to set the number of invites an address has.\"},\"usedNonces(address,bytes32)\":{\"notice\":\"Maps from addresses to nonces to whether or not they have been used.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"OptimistInviter issues \\\"optimist.can-invite\\\" and \\\"optimist.can-mint-from-invite\\\"         attestations. Accounts that have invites can issue signatures that allow other         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the         invite to an address of their choosing.         Parties involved:           1) INVITE_GRANTER: trusted account that can allow accounts to issue invites           2) issuer: account that is allowed to issue invites           3) claimer: account that receives the invites         Flow:           1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number              of invites, and also creates a \\\"optimist.can-invite\\\" attestation for the issuer           2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature           3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature              to the recipient           4) claimer chooses an address they want to receive the invite on           5) claimer commits the hash of the address they want to receive the invite on and the              received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))              using the commitInvite function           6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.           7) claimer reveals the plaintext ClaimableInvite and the signature using the              claimInvite function, receiving the \\\"optimist.can-mint-from-invite\\\" attestation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal/op-nft/OptimistInviter.sol\":\"OptimistInviter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/universal/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0\",\"dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo\"]},\"contracts/universal/op-nft/OptimistInviter.sol\":{\"keccak256\":\"0xd7b006570c7e0c66ed0a8001c7e57848062913639e65f5bb6f4d8120e2a00c32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6dea2fad75351e4763735f6b539ae5566d64d3d2576029917e878af0354fb70c\",\"dweb:/ipfs/Qmen4u5jWy1ccsZz3sWRVY38wB8wjEPd9tM4X5cvpeBpiC\"]},\"contracts/universal/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c\",\"dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr\"]},\"node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol\":{\"keccak256\":\"0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482\",\"dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94\",\"dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_inviteGranter",
              "type": "address"
            },
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "InviteClaimed",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CAN_INVITE_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CLAIMABLE_INVITE_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "EIP712_VERSION",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "INVITE_GRANTER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_COMMITMENT_PERIOD",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "_claimableInvite",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimInvite"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_commitment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitInvite"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "commitmentTimestamps",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "inviteCounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "_inviteCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setInviteCounts"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "usedNonces",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claimInvite(address,(address,bytes32),bytes)": {
            "params": {
              "_claimableInvite": "ClaimableInvite struct containing the issuer and nonce.",
              "_claimer": "Address that will be granted the invite.",
              "_signature": "Signature signed over the claimable invite."
            }
          },
          "commitInvite(bytes32)": {
            "params": {
              "_commitment": "A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))"
            }
          },
          "constructor": {
            "custom:semver": "1.0.0",
            "params": {
              "_attestationStation": "Address of the AttestationStation contract.",
              "_inviteGranter": "Address of the invite granter."
            }
          },
          "initialize(string)": {
            "params": {
              "_name": "Contract name."
            }
          },
          "setInviteCounts(address[],uint256)": {
            "params": {
              "_accounts": "An array of accounts to update the invite counts of.",
              "_inviteCount": "Number of invites to set to."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "CAN_INVITE_ATTESTATION_KEY()": {
            "notice": "Attestation key for that signals that an account was allowed to issue invites"
          },
          "CLAIMABLE_INVITE_TYPEHASH()": {
            "notice": "EIP712 typehash for the ClaimableInvite type."
          },
          "EIP712_VERSION()": {
            "notice": "Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme."
          },
          "INVITE_GRANTER()": {
            "notice": "Granter who can set accounts' invite counts."
          },
          "MIN_COMMITMENT_PERIOD()": {
            "notice": "Minimum age of a commitment (in seconds) before it can be revealed using claimInvite.         Currently set to 60 seconds.         Prevents an attacker from front-running a commitment by taking the signature in the         claimInvite call and quickly committing and claiming it before the the claimer's         transaction succeeds. With this, frontrunning a commitment requires that an attacker         be able to prevent the honest claimer's claimInvite transaction from being included         for this long."
          },
          "claimInvite(address,(address,bytes32),bytes)": {
            "notice": "Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function."
          },
          "commitInvite(bytes32)": {
            "notice": "Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the         issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite."
          },
          "commitmentTimestamps(bytes32)": {
            "notice": "Maps from hashes to the timestamp when they were committed."
          },
          "initialize(string)": {
            "notice": "Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures."
          },
          "inviteCounts(address)": {
            "notice": "Maps from addresses to number of invites they have."
          },
          "setInviteCounts(address[],uint256)": {
            "notice": "Allows invite granter to set the number of invites an address has."
          },
          "usedNonces(address,bytes32)": {
            "notice": "Maps from addresses to nonces to whether or not they have been used."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/universal/op-nft/OptimistInviter.sol": "OptimistInviter"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/universal/op-nft/AttestationStation.sol": {
        "keccak256": "0x421923e04df145353db12cd0352ccf516d9c29ab64b138733b4f7a6a450ce2be",
        "urls": [
          "bzz-raw://9e83ce1f206042ec7611611a08970f07c7f83d734b3c544755449968a6b47fe0",
          "dweb:/ipfs/QmPW2Cc6BnDs5U82zWD9Ma8WHna8AJ99rtt5FU839sdFQo"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/OptimistInviter.sol": {
        "keccak256": "0xd7b006570c7e0c66ed0a8001c7e57848062913639e65f5bb6f4d8120e2a00c32",
        "urls": [
          "bzz-raw://6dea2fad75351e4763735f6b539ae5566d64d3d2576029917e878af0354fb70c",
          "dweb:/ipfs/Qmen4u5jWy1ccsZz3sWRVY38wB8wjEPd9tM4X5cvpeBpiC"
        ],
        "license": "MIT"
      },
      "contracts/universal/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x6eebe1db87f8a5de79bf8af9120e5b0cc6a9b51d8d86e6461cdb6bc52a1dde21",
        "urls": [
          "bzz-raw://ff03d9ebffd48a84f0fc7d381ba569843e53c7960b91ec00178ee14c7dcf833c",
          "dweb:/ipfs/QmXit8hX46BHAzP9Wtk3AEkShTw6qqNd5nnQzceEvBdhVr"
        ],
        "license": "MIT"
      },
      "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol": {
        "keccak256": "0xc455c84bb1f17e994dea0451fd363f81f83965bfa86e81ac6c8b3a327b9a0ff0",
        "urls": [
          "bzz-raw://fab499f3c0d7df8eb763b50621848d5d2147fb9c42a8eb9b65a11093090bb482",
          "dweb:/ipfs/QmUKsG4ztwtUZFjuRYAxgUFTgH5YxWSGF1BFFaB7vdM2K3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc",
        "urls": [
          "bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb",
          "dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
        "keccak256": "0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc",
        "urls": [
          "bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94",
          "dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
        "keccak256": "0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81",
        "urls": [
          "bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b",
          "dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/universal/op-nft/OptimistInviter.sol",
    "id": 39831,
    "exportedSymbols": {
      "AttestationStation": [
        39072
      ],
      "EIP712Upgradeable": [
        40495
      ],
      "OptimistConstants": [
        39841
      ],
      "OptimistInviter": [
        39830
      ],
      "Semver": [
        39907
      ],
      "SignatureChecker": [
        41435
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:13546:55",
    "nodes": [
      {
        "id": 39493,
        "nodeType": "PragmaDirective",
        "src": "32:23:55",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 39495,
        "nodeType": "ImportDirective",
        "src": "57:70:55",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/libraries/OptimistConstants.sol",
        "file": "./libraries/OptimistConstants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39831,
        "sourceUnit": 39842,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39494,
              "name": "OptimistConstants",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39841,
              "src": "66:17:55",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39497,
        "nodeType": "ImportDirective",
        "src": "128:88:55",
        "nodes": [],
        "absolutePath": "node_modules/@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "file": "@eth-optimism/contracts-bedrock/contracts/universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39831,
        "sourceUnit": 39908,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39496,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39907,
              "src": "137:6:55",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39499,
        "nodeType": "ImportDirective",
        "src": "217:62:55",
        "nodes": [],
        "absolutePath": "contracts/universal/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39831,
        "sourceUnit": 39073,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39498,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39072,
              "src": "226:18:55",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39501,
        "nodeType": "ImportDirective",
        "src": "280:99:55",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39831,
        "sourceUnit": 41436,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39500,
              "name": "SignatureChecker",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41435,
              "src": "289:16:55",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39503,
        "nodeType": "ImportDirective",
        "src": "380:123:55",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39831,
        "sourceUnit": 40496,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39502,
              "name": "EIP712Upgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40495,
              "src": "393:17:55",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39830,
        "nodeType": "ContractDefinition",
        "src": "2148:11429:55",
        "nodes": [
          {
            "id": 39515,
            "nodeType": "EventDefinition",
            "src": "2393:69:55",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 39509,
              "nodeType": "StructuredDocumentation",
              "src": "2208:180:55",
              "text": " @notice Emitted when an invite is claimed.\n @param issuer  Address that issued the signature.\n @param claimer Address that claimed the invite."
            },
            "eventSelector": "745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be475",
            "name": "InviteClaimed",
            "nameLocation": "2399:13:55",
            "parameters": {
              "id": 39514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39511,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "issuer",
                  "nameLocation": "2429:6:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39515,
                  "src": "2413:22:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2413:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39513,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "2453:7:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39515,
                  "src": "2437:23:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39512,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2437:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2412:49:55"
            }
          },
          {
            "id": 39519,
            "nodeType": "VariableDeclaration",
            "src": "2858:47:55",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39516,
              "nodeType": "StructuredDocumentation",
              "src": "2468:385:55",
              "text": " @notice Version used for the EIP712 domain separator. This version is separated from the\n         contract semver because the EIP712 domain separator is used to sign messages, and\n         changing the domain separator invalidates all existing signatures. We should only\n         bump this version if we make a major change to the signature scheme."
            },
            "functionSelector": "eccec5a8",
            "mutability": "constant",
            "name": "EIP712_VERSION",
            "nameLocation": "2881:14:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 39517,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2858:6:55",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "312e302e30",
              "id": 39518,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2898:7:55",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
                "typeString": "literal_string \"1.0.0\""
              },
              "value": "1.0.0"
            },
            "visibility": "public"
          },
          {
            "id": 39525,
            "nodeType": "VariableDeclaration",
            "src": "2989:118:55",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39520,
              "nodeType": "StructuredDocumentation",
              "src": "2912:72:55",
              "text": " @notice EIP712 typehash for the ClaimableInvite type."
            },
            "functionSelector": "c4fc453d",
            "mutability": "constant",
            "name": "CLAIMABLE_INVITE_TYPEHASH",
            "nameLocation": "3013:25:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 39521,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2989:7:55",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "436c61696d61626c65496e766974652861646472657373206973737565722c62797465733332206e6f6e636529",
                  "id": 39523,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3059:47:55",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  },
                  "value": "ClaimableInvite(address issuer,bytes32 nonce)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  }
                ],
                "id": 39522,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "3049:9:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 39524,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3049:58:55",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39532,
            "nodeType": "VariableDeclaration",
            "src": "3223:83:55",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39526,
              "nodeType": "StructuredDocumentation",
              "src": "3114:104:55",
              "text": " @notice Attestation key for that signals that an account was allowed to issue invites"
            },
            "functionSelector": "916db22f",
            "mutability": "constant",
            "name": "CAN_INVITE_ATTESTATION_KEY",
            "nameLocation": "3247:26:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 39527,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "3223:7:55",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e63616e2d696e76697465",
                  "id": 39530,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3284:21:55",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d",
                    "typeString": "literal_string \"optimist.can-invite\""
                  },
                  "value": "optimist.can-invite"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d",
                    "typeString": "literal_string \"optimist.can-invite\""
                  }
                ],
                "id": 39529,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "3276:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 39528,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3276:7:55",
                  "typeDescriptions": {}
                }
              },
              "id": 39531,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3276:30:55",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39535,
            "nodeType": "VariableDeclaration",
            "src": "3389:39:55",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39533,
              "nodeType": "StructuredDocumentation",
              "src": "3313:71:55",
              "text": " @notice Granter who can set accounts' invite counts."
            },
            "functionSelector": "14b47241",
            "mutability": "immutable",
            "name": "INVITE_GRANTER",
            "nameLocation": "3414:14:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 39534,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "3389:7:55",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39539,
            "nodeType": "VariableDeclaration",
            "src": "3510:55:55",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39536,
              "nodeType": "StructuredDocumentation",
              "src": "3435:70:55",
              "text": " @notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "3546:19:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$39072",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 39538,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 39537,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 39072,
                "src": "3510:18:55"
              },
              "referencedDeclaration": 39072,
              "src": "3510:18:55",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$39072",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 39543,
            "nodeType": "VariableDeclaration",
            "src": "4164:50:55",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 39540,
              "nodeType": "StructuredDocumentation",
              "src": "3572:587:55",
              "text": " @notice Minimum age of a commitment (in seconds) before it can be revealed using claimInvite.\n         Currently set to 60 seconds.\n         Prevents an attacker from front-running a commitment by taking the signature in the\n         claimInvite call and quickly committing and claiming it before the the claimer's\n         transaction succeeds. With this, frontrunning a commitment requires that an attacker\n         be able to prevent the honest claimer's claimInvite transaction from being included\n         for this long."
            },
            "functionSelector": "50b414e6",
            "mutability": "constant",
            "name": "MIN_COMMITMENT_PERIOD",
            "nameLocation": "4188:21:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 39541,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "4164:7:55",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3630",
              "id": 39542,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "4212:2:55",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_60_by_1",
                "typeString": "int_const 60"
              },
              "value": "60"
            },
            "visibility": "public"
          },
          {
            "id": 39548,
            "nodeType": "StructDefinition",
            "src": "4876:77:55",
            "nodes": [],
            "canonicalName": "OptimistInviter.ClaimableInvite",
            "members": [
              {
                "constant": false,
                "id": 39545,
                "mutability": "mutable",
                "name": "issuer",
                "nameLocation": "4917:6:55",
                "nodeType": "VariableDeclaration",
                "scope": 39548,
                "src": "4909:14:55",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 39544,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4909:7:55",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 39547,
                "mutability": "mutable",
                "name": "nonce",
                "nameLocation": "4941:5:55",
                "nodeType": "VariableDeclaration",
                "scope": 39548,
                "src": "4933:13:55",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 39546,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "4933:7:55",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ClaimableInvite",
            "nameLocation": "4883:15:55",
            "scope": 39830,
            "visibility": "public"
          },
          {
            "id": 39553,
            "nodeType": "VariableDeclaration",
            "src": "5050:55:55",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39549,
              "nodeType": "StructuredDocumentation",
              "src": "4959:86:55",
              "text": " @notice Maps from hashes to the timestamp when they were committed."
            },
            "functionSelector": "b4245d73",
            "mutability": "mutable",
            "name": "commitmentTimestamps",
            "nameLocation": "5085:20:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
              "typeString": "mapping(bytes32 => uint256)"
            },
            "typeName": {
              "id": 39552,
              "keyType": {
                "id": 39550,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "5058:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "5050:27:55",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                "typeString": "mapping(bytes32 => uint256)"
              },
              "valueType": {
                "id": 39551,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5069:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 39560,
            "nodeType": "VariableDeclaration",
            "src": "5212:62:55",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39554,
              "nodeType": "StructuredDocumentation",
              "src": "5112:95:55",
              "text": " @notice Maps from addresses to nonces to whether or not they have been used."
            },
            "functionSelector": "5fda04c7",
            "mutability": "mutable",
            "name": "usedNonces",
            "nameLocation": "5264:10:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(bytes32 => bool))"
            },
            "typeName": {
              "id": 39559,
              "keyType": {
                "id": 39555,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5220:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5212:44:55",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(bytes32 => bool))"
              },
              "valueType": {
                "id": 39558,
                "keyType": {
                  "id": 39556,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "5239:7:55",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "nodeType": "Mapping",
                "src": "5231:24:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                  "typeString": "mapping(bytes32 => bool)"
                },
                "valueType": {
                  "id": 39557,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "5250:4:55",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 39565,
            "nodeType": "VariableDeclaration",
            "src": "5364:47:55",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 39561,
              "nodeType": "StructuredDocumentation",
              "src": "5281:78:55",
              "text": " @notice Maps from addresses to number of invites they have."
            },
            "functionSelector": "de2dd221",
            "mutability": "mutable",
            "name": "inviteCounts",
            "nameLocation": "5399:12:55",
            "scope": 39830,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 39564,
              "keyType": {
                "id": 39562,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5372:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5364:27:55",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 39563,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5383:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 39588,
            "nodeType": "FunctionDefinition",
            "src": "5612:191:55",
            "nodes": [],
            "body": {
              "id": 39587,
              "nodeType": "Block",
              "src": "5704:99:55",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 39581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39579,
                      "name": "INVITE_GRANTER",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39535,
                      "src": "5714:14:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39580,
                      "name": "_inviteGranter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39568,
                      "src": "5731:14:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5714:31:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 39582,
                  "nodeType": "ExpressionStatement",
                  "src": "5714:31:55"
                },
                {
                  "expression": {
                    "id": 39585,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 39583,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39539,
                      "src": "5755:19:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 39584,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39571,
                      "src": "5777:19:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$39072",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "5755:41:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 39586,
                  "nodeType": "ExpressionStatement",
                  "src": "5755:41:55"
                }
              ]
            },
            "documentation": {
              "id": 39566,
              "nodeType": "StructuredDocumentation",
              "src": "5418:189:55",
              "text": " @custom:semver 1.0.0\n @param _inviteGranter      Address of the invite granter.\n @param _attestationStation Address of the AttestationStation contract."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "31",
                    "id": 39574,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5695:1:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "30",
                    "id": 39575,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5698:1:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "30",
                    "id": 39576,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5701:1:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }
                ],
                "id": 39577,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 39573,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 39907,
                  "src": "5688:6:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "5688:15:55"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 39572,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39568,
                  "mutability": "mutable",
                  "name": "_inviteGranter",
                  "nameLocation": "5632:14:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39588,
                  "src": "5624:22:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39567,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5624:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39571,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "5667:19:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39588,
                  "src": "5648:38:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$39072",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 39570,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39569,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39072,
                      "src": "5648:18:55"
                    },
                    "referencedDeclaration": 39072,
                    "src": "5648:18:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$39072",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5623:64:55"
            },
            "returnParameters": {
              "id": 39578,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5704:0:55"
            },
            "scope": 39830,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39602,
            "nodeType": "FunctionDefinition",
            "src": "6316:113:55",
            "nodes": [],
            "body": {
              "id": 39601,
              "nodeType": "Block",
              "src": "6376:53:55",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39597,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39591,
                        "src": "6400:5:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 39598,
                        "name": "EIP712_VERSION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39519,
                        "src": "6407:14:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 39596,
                      "name": "__EIP712_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40377,
                      "src": "6386:13:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 39599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6386:36:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39600,
                  "nodeType": "ExpressionStatement",
                  "src": "6386:36:55"
                }
              ]
            },
            "documentation": {
              "id": 39589,
              "nodeType": "StructuredDocumentation",
              "src": "5809:502:55",
              "text": " @notice Initializes this contract, setting the EIP712 context.\n         Only update the EIP712_VERSION when there is a change to the signature scheme.\n         After the EIP712 version is changed, any signatures issued off-chain but not\n         claimed yet will no longer be accepted by the claimInvite function. Please make\n         sure to notify the issuers that they must re-issue their invite signatures.\n @param _name Contract name."
            },
            "functionSelector": "f62d1888",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 39594,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 39593,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 44508,
                  "src": "6364:11:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "6364:11:55"
              }
            ],
            "name": "initialize",
            "nameLocation": "6325:10:55",
            "parameters": {
              "id": 39592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39591,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "6350:5:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39602,
                  "src": "6336:19:55",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 39590,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6336:6:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6335:21:55"
            },
            "returnParameters": {
              "id": 39595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6376:0:55"
            },
            "scope": 39830,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39680,
            "nodeType": "FunctionDefinition",
            "src": "6676:1032:55",
            "nodes": [],
            "body": {
              "id": 39679,
              "nodeType": "Block",
              "src": "6760:948:55",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 39615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 39612,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6840:3:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 39613,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6840:10:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 39614,
                          "name": "INVITE_GRANTER",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39535,
                          "src": "6854:14:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6840:28:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206f6e6c7920696e76697465206772616e7465722063616e206772616e7420696e7669746573",
                        "id": 39616,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6882:56:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888",
                          "typeString": "literal_string \"OptimistInviter: only invite granter can grant invites\""
                        },
                        "value": "OptimistInviter: only invite granter can grant invites"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888",
                          "typeString": "literal_string \"OptimistInviter: only invite granter can grant invites\""
                        }
                      ],
                      "id": 39611,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6819:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6819:129:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39618,
                  "nodeType": "ExpressionStatement",
                  "src": "6819:129:55"
                },
                {
                  "assignments": [
                    39620
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 39620,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "6967:6:55",
                      "nodeType": "VariableDeclaration",
                      "scope": 39679,
                      "src": "6959:14:55",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 39619,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6959:7:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 39623,
                  "initialValue": {
                    "expression": {
                      "id": 39621,
                      "name": "_accounts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39606,
                      "src": "6976:9:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                        "typeString": "address[] calldata"
                      }
                    },
                    "id": 39622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "6976:16:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6959:33:55"
                },
                {
                  "assignments": [
                    39629
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 39629,
                      "mutability": "mutable",
                      "name": "attestations",
                      "nameLocation": "7059:12:55",
                      "nodeType": "VariableDeclaration",
                      "scope": 39679,
                      "src": "7003:68:55",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct AttestationStation.AttestationData[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 39627,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 39626,
                            "name": "AttestationStation.AttestationData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 38968,
                            "src": "7003:34:55"
                          },
                          "referencedDeclaration": 38968,
                          "src": "7003:34:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$38968_storage_ptr",
                            "typeString": "struct AttestationStation.AttestationData"
                          }
                        },
                        "id": 39628,
                        "nodeType": "ArrayTypeName",
                        "src": "7003:36:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_storage_$dyn_storage_ptr",
                          "typeString": "struct AttestationStation.AttestationData[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 39636,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 39634,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39620,
                        "src": "7115:6:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 39633,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "7074:40:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct AttestationStation.AttestationData memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 39631,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 39630,
                            "name": "AttestationStation.AttestationData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 38968,
                            "src": "7078:34:55"
                          },
                          "referencedDeclaration": 38968,
                          "src": "7078:34:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$38968_storage_ptr",
                            "typeString": "struct AttestationStation.AttestationData"
                          }
                        },
                        "id": 39632,
                        "nodeType": "ArrayTypeName",
                        "src": "7078:36:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_storage_$dyn_storage_ptr",
                          "typeString": "struct AttestationStation.AttestationData[]"
                        }
                      }
                    },
                    "id": 39635,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7074:48:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct AttestationStation.AttestationData memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7003:119:55"
                },
                {
                  "body": {
                    "id": 39671,
                    "nodeType": "Block",
                    "src": "7163:488:55",
                    "statements": [
                      {
                        "expression": {
                          "id": 39649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 39643,
                              "name": "inviteCounts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39565,
                              "src": "7237:12:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 39647,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 39644,
                                "name": "_accounts",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39606,
                                "src": "7250:9:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 39646,
                              "indexExpression": {
                                "id": 39645,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39638,
                                "src": "7260:1:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7250:12:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7237:26:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 39648,
                            "name": "_inviteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39608,
                            "src": "7266:12:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7237:41:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 39650,
                        "nodeType": "ExpressionStatement",
                        "src": "7237:41:55"
                      },
                      {
                        "expression": {
                          "id": 39665,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 39651,
                              "name": "attestations",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39629,
                              "src": "7390:12:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct AttestationStation.AttestationData memory[] memory"
                              }
                            },
                            "id": 39653,
                            "indexExpression": {
                              "id": 39652,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39638,
                              "src": "7403:1:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7390:15:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AttestationData_$38968_memory_ptr",
                              "typeString": "struct AttestationStation.AttestationData memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 39656,
                                  "name": "_accounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 39606,
                                  "src": "7468:9:55",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                    "typeString": "address[] calldata"
                                  }
                                },
                                "id": 39658,
                                "indexExpression": {
                                  "id": 39657,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 39638,
                                  "src": "7478:1:55",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7468:12:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 39659,
                                "name": "CAN_INVITE_ATTESTATION_KEY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39532,
                                "src": "7503:26:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "74727565",
                                    "id": 39662,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7558:6:55",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034",
                                      "typeString": "literal_string \"true\""
                                    },
                                    "value": "true"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034",
                                      "typeString": "literal_string \"true\""
                                    }
                                  ],
                                  "id": 39661,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "7552:5:55",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 39660,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7552:5:55",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 39663,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7552:13:55",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 39654,
                                "name": "AttestationStation",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39072,
                                "src": "7408:18:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_AttestationStation_$39072_$",
                                  "typeString": "type(contract AttestationStation)"
                                }
                              },
                              "id": 39655,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "AttestationData",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 38968,
                              "src": "7408:34:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_AttestationData_$38968_storage_ptr_$",
                                "typeString": "type(struct AttestationStation.AttestationData storage pointer)"
                              }
                            },
                            "id": 39664,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "about",
                              "key",
                              "val"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "7408:172:55",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AttestationData_$38968_memory_ptr",
                              "typeString": "struct AttestationStation.AttestationData memory"
                            }
                          },
                          "src": "7390:190:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$38968_memory_ptr",
                            "typeString": "struct AttestationStation.AttestationData memory"
                          }
                        },
                        "id": 39666,
                        "nodeType": "ExpressionStatement",
                        "src": "7390:190:55"
                      },
                      {
                        "id": 39670,
                        "nodeType": "UncheckedBlock",
                        "src": "7595:46:55",
                        "statements": [
                          {
                            "expression": {
                              "id": 39668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "7623:3:55",
                              "subExpression": {
                                "id": 39667,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39638,
                                "src": "7625:1:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 39669,
                            "nodeType": "ExpressionStatement",
                            "src": "7623:3:55"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 39642,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 39640,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39638,
                      "src": "7149:1:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 39641,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39620,
                      "src": "7153:6:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7149:10:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 39672,
                  "initializationExpression": {
                    "assignments": [
                      39638
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 39638,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "7146:1:55",
                        "nodeType": "VariableDeclaration",
                        "scope": 39672,
                        "src": "7138:9:55",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 39637,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7138:7:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 39639,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "7138:9:55"
                  },
                  "nodeType": "ForStatement",
                  "src": "7133:518:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39676,
                        "name": "attestations",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39629,
                        "src": "7688:12:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AttestationStation.AttestationData memory[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AttestationStation.AttestationData memory[] memory"
                        }
                      ],
                      "expression": {
                        "id": 39673,
                        "name": "ATTESTATION_STATION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39539,
                        "src": "7661:19:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AttestationStation_$39072",
                          "typeString": "contract AttestationStation"
                        }
                      },
                      "id": 39675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "attest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39071,
                      "src": "7661:26:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_struct$_AttestationData_$38968_memory_ptr_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (struct AttestationStation.AttestationData memory[] memory) external"
                      }
                    },
                    "id": 39677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7661:40:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39678,
                  "nodeType": "ExpressionStatement",
                  "src": "7661:40:55"
                }
              ]
            },
            "documentation": {
              "id": 39603,
              "nodeType": "StructuredDocumentation",
              "src": "6435:236:55",
              "text": " @notice Allows invite granter to set the number of invites an address has.\n @param _accounts    An array of accounts to update the invite counts of.\n @param _inviteCount Number of invites to set to."
            },
            "functionSelector": "25b27a3d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setInviteCounts",
            "nameLocation": "6685:15:55",
            "parameters": {
              "id": 39609,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39606,
                  "mutability": "mutable",
                  "name": "_accounts",
                  "nameLocation": "6720:9:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39680,
                  "src": "6701:28:55",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 39604,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "6701:7:55",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 39605,
                    "nodeType": "ArrayTypeName",
                    "src": "6701:9:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39608,
                  "mutability": "mutable",
                  "name": "_inviteCount",
                  "nameLocation": "6739:12:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39680,
                  "src": "6731:20:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39607,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6731:7:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6700:52:55"
            },
            "returnParameters": {
              "id": 39610,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6760:0:55"
            },
            "scope": 39830,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39703,
            "nodeType": "FunctionDefinition",
            "src": "8868:500:55",
            "nodes": [],
            "body": {
              "id": 39702,
              "nodeType": "Block",
              "src": "8918:450:55",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 39691,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 39687,
                            "name": "commitmentTimestamps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39553,
                            "src": "9216:20:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 39689,
                          "indexExpression": {
                            "id": 39688,
                            "name": "_commitment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39683,
                            "src": "9237:11:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9216:33:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 39690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9253:1:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "9216:38:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c7265616479206d616465",
                        "id": 39692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9256:42:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf",
                          "typeString": "literal_string \"OptimistInviter: commitment already made\""
                        },
                        "value": "OptimistInviter: commitment already made"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf",
                          "typeString": "literal_string \"OptimistInviter: commitment already made\""
                        }
                      ],
                      "id": 39686,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9208:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9208:91:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39694,
                  "nodeType": "ExpressionStatement",
                  "src": "9208:91:55"
                },
                {
                  "expression": {
                    "id": 39700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 39695,
                        "name": "commitmentTimestamps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39553,
                        "src": "9310:20:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        }
                      },
                      "id": 39697,
                      "indexExpression": {
                        "id": 39696,
                        "name": "_commitment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39683,
                        "src": "9331:11:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9310:33:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 39698,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9346:5:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 39699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "9346:15:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9310:51:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 39701,
                  "nodeType": "ExpressionStatement",
                  "src": "9310:51:55"
                }
              ]
            },
            "documentation": {
              "id": 39681,
              "nodeType": "StructuredDocumentation",
              "src": "7714:1149:55",
              "text": " @notice Allows anyone (but likely the claimer) to commit a received signature along with the\n         address to claim to.\n         Before calling this function, the claimer should have received a signature from the\n         issuer off-chain. The claimer then calls this function with the hash of the\n         claimer's address and the received signature. This is necessary to prevent\n         front-running when the invitee is claiming the invite. Without a commit and reveal\n         scheme, anyone who is watching the mempool can take the signature being submitted\n         and front run the transaction to claim the invite to their own address.\n         The same commitment can only be made once, and the function reverts if the\n         commitment has already been made. This prevents griefing where a malicious party can\n         prevent the original claimer from being able to claimInvite.\n @param _commitment A hash of the claimer and signature concatenated.\n                    keccak256(abi.encode(_claimer, _signature))"
            },
            "functionSelector": "187e3cd1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "commitInvite",
            "nameLocation": "8877:12:55",
            "parameters": {
              "id": 39684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39683,
                  "mutability": "mutable",
                  "name": "_commitment",
                  "nameLocation": "8898:11:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39703,
                  "src": "8890:19:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 39682,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8890:7:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8889:21:55"
            },
            "returnParameters": {
              "id": 39685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8918:0:55"
            },
            "scope": 39830,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 39829,
            "nodeType": "FunctionDefinition",
            "src": "10455:3120:55",
            "nodes": [],
            "body": {
              "id": 39828,
              "nodeType": "Block",
              "src": "10599:2976:55",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    39715
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 39715,
                      "mutability": "mutable",
                      "name": "commitmentTimestamp",
                      "nameLocation": "10617:19:55",
                      "nodeType": "VariableDeclaration",
                      "scope": 39828,
                      "src": "10609:27:55",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 39714,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10609:7:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 39725,
                  "initialValue": {
                    "baseExpression": {
                      "id": 39716,
                      "name": "commitmentTimestamps",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39553,
                      "src": "10639:20:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      }
                    },
                    "id": 39724,
                    "indexExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 39720,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39706,
                              "src": "10694:8:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 39721,
                              "name": "_signature",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39711,
                              "src": "10704:10:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 39718,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "10683:3:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 39719,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encode",
                            "nodeType": "MemberAccess",
                            "src": "10683:10:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 39722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10683:32:55",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 39717,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -8,
                        "src": "10673:9:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 39723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10673:43:55",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "10639:87:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10609:117:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 39729,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 39727,
                          "name": "commitmentTimestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39715,
                          "src": "10826:19:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 39728,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10848:1:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "10826:23:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20636c61696d657220616e64207369676e61747572652068617665206e6f74206265656e20636f6d6d697474656420796574",
                        "id": 39730,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10863:68:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab",
                          "typeString": "literal_string \"OptimistInviter: claimer and signature have not been committed yet\""
                        },
                        "value": "OptimistInviter: claimer and signature have not been committed yet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab",
                          "typeString": "literal_string \"OptimistInviter: claimer and signature have not been committed yet\""
                        }
                      ],
                      "id": 39726,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10805:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10805:136:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39732,
                  "nodeType": "ExpressionStatement",
                  "src": "10805:136:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 39739,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 39736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 39734,
                            "name": "commitmentTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39715,
                            "src": "11059:19:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 39735,
                            "name": "MIN_COMMITMENT_PERIOD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39543,
                            "src": "11081:21:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11059:43:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 39737,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "11106:5:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 39738,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "11106:15:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11059:62:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d656e7420706572696f6420686173206e6f7420656c617073656420796574",
                        "id": 39740,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11135:64:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77",
                          "typeString": "literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""
                        },
                        "value": "OptimistInviter: minimum commitment period has not elapsed yet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77",
                          "typeString": "literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""
                        }
                      ],
                      "id": 39733,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11038:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11038:171:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39742,
                  "nodeType": "ExpressionStatement",
                  "src": "11038:171:55"
                },
                {
                  "assignments": [
                    39744
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 39744,
                      "mutability": "mutable",
                      "name": "digest",
                      "nameLocation": "11307:6:55",
                      "nodeType": "VariableDeclaration",
                      "scope": 39828,
                      "src": "11299:14:55",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 39743,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "11299:7:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 39757,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 39749,
                                "name": "CLAIMABLE_INVITE_TYPEHASH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39525,
                                "src": "11405:25:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 39750,
                                  "name": "_claimableInvite",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 39709,
                                  "src": "11452:16:55",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                    "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                  }
                                },
                                "id": 39751,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "issuer",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 39545,
                                "src": "11452:23:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "expression": {
                                  "id": 39752,
                                  "name": "_claimableInvite",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 39709,
                                  "src": "11497:16:55",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                    "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                  }
                                },
                                "id": 39753,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nonce",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 39547,
                                "src": "11497:22:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 39747,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "11373:3:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 39748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "11373:10:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 39754,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11373:164:55",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 39746,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "11346:9:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 39755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11346:205:55",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 39745,
                      "name": "_hashTypedDataV4",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40471,
                      "src": "11316:16:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) view returns (bytes32)"
                      }
                    },
                    "id": 39756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11316:245:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11299:262:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 39761,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39709,
                              "src": "11988:16:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 39762,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39545,
                            "src": "11988:23:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 39763,
                            "name": "digest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39744,
                            "src": "12013:6:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 39764,
                            "name": "_signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39711,
                            "src": "12021:10:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 39759,
                            "name": "SignatureChecker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41435,
                            "src": "11951:16:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureChecker_$41435_$",
                              "typeString": "type(library SignatureChecker)"
                            }
                          },
                          "id": 39760,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isValidSignatureNow",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 41434,
                          "src": "11951:36:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (address,bytes32,bytes memory) view returns (bool)"
                          }
                        },
                        "id": 39765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11951:81:55",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20696e76616c6964207369676e6174757265",
                        "id": 39766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12046:36:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a",
                          "typeString": "literal_string \"OptimistInviter: invalid signature\""
                        },
                        "value": "OptimistInviter: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a",
                          "typeString": "literal_string \"OptimistInviter: invalid signature\""
                        }
                      ],
                      "id": 39758,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11930:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39767,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11930:162:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39768,
                  "nodeType": "ExpressionStatement",
                  "src": "11930:162:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 39778,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 39770,
                              "name": "usedNonces",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39560,
                              "src": "12420:10:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(bytes32 => bool))"
                              }
                            },
                            "id": 39773,
                            "indexExpression": {
                              "expression": {
                                "id": 39771,
                                "name": "_claimableInvite",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 39709,
                                "src": "12431:16:55",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                  "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                }
                              },
                              "id": 39772,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "issuer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 39545,
                              "src": "12431:23:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "12420:35:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                              "typeString": "mapping(bytes32 => bool)"
                            }
                          },
                          "id": 39776,
                          "indexExpression": {
                            "expression": {
                              "id": 39774,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39709,
                              "src": "12456:16:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 39775,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonce",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39547,
                            "src": "12456:22:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12420:59:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 39777,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12483:5:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "12420:68:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206e6f6e63652068617320616c7265616479206265656e2075736564",
                        "id": 39779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12502:46:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08",
                          "typeString": "literal_string \"OptimistInviter: nonce has already been used\""
                        },
                        "value": "OptimistInviter: nonce has already been used"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08",
                          "typeString": "literal_string \"OptimistInviter: nonce has already been used\""
                        }
                      ],
                      "id": 39769,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "12399:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12399:159:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39781,
                  "nodeType": "ExpressionStatement",
                  "src": "12399:159:55"
                },
                {
                  "expression": {
                    "id": 39790,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 39782,
                          "name": "usedNonces",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39560,
                          "src": "12648:10:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(bytes32 => bool))"
                          }
                        },
                        "id": 39787,
                        "indexExpression": {
                          "expression": {
                            "id": 39783,
                            "name": "_claimableInvite",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39709,
                            "src": "12659:16:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                              "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                            }
                          },
                          "id": 39784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "issuer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 39545,
                          "src": "12659:23:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "12648:35:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 39788,
                      "indexExpression": {
                        "expression": {
                          "id": 39785,
                          "name": "_claimableInvite",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39709,
                          "src": "12684:16:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                            "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                          }
                        },
                        "id": 39786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "nonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 39547,
                        "src": "12684:22:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "12648:59:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 39789,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12710:4:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "12648:66:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 39791,
                  "nodeType": "ExpressionStatement",
                  "src": "12648:66:55"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 39798,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 39793,
                            "name": "inviteCounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39565,
                            "src": "12841:12:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 39796,
                          "indexExpression": {
                            "expression": {
                              "id": 39794,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39709,
                              "src": "12854:16:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 39795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39545,
                            "src": "12854:23:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12841:37:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 39797,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12881:1:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "12841:41:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a2069737375657220686173206e6f20696e7669746573",
                        "id": 39799,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12896:40:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82",
                          "typeString": "literal_string \"OptimistInviter: issuer has no invites\""
                        },
                        "value": "OptimistInviter: issuer has no invites"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82",
                          "typeString": "literal_string \"OptimistInviter: issuer has no invites\""
                        }
                      ],
                      "id": 39792,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "12820:7:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 39800,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12820:126:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39801,
                  "nodeType": "ExpressionStatement",
                  "src": "12820:126:55"
                },
                {
                  "id": 39808,
                  "nodeType": "UncheckedBlock",
                  "src": "13077:74:55",
                  "statements": [
                    {
                      "expression": {
                        "id": 39806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "--",
                        "prefix": true,
                        "src": "13101:39:55",
                        "subExpression": {
                          "baseExpression": {
                            "id": 39802,
                            "name": "inviteCounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39565,
                            "src": "13103:12:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 39805,
                          "indexExpression": {
                            "expression": {
                              "id": 39803,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39709,
                              "src": "13116:16:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 39804,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39545,
                            "src": "13116:23:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "13103:37:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 39807,
                      "nodeType": "ExpressionStatement",
                      "src": "13101:39:55"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 39812,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39706,
                        "src": "13360:8:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 39813,
                          "name": "OptimistConstants",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39841,
                          "src": "13382:17:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_OptimistConstants_$39841_$",
                            "typeString": "type(library OptimistConstants)"
                          }
                        },
                        "id": 39814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 39840,
                        "src": "13382:63:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 39817,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39709,
                              "src": "13470:16:55",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 39818,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39545,
                            "src": "13470:23:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 39815,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "13459:3:55",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 39816,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "13459:10:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 39819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13459:35:55",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 39809,
                        "name": "ATTESTATION_STATION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39539,
                        "src": "13320:19:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AttestationStation_$39072",
                          "typeString": "contract AttestationStation"
                        }
                      },
                      "id": 39811,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "attest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39028,
                      "src": "13320:26:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes32,bytes memory) external"
                      }
                    },
                    "id": 39820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13320:184:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39821,
                  "nodeType": "ExpressionStatement",
                  "src": "13320:184:55"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 39823,
                          "name": "_claimableInvite",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39709,
                          "src": "13534:16:55",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                            "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                          }
                        },
                        "id": 39824,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "issuer",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 39545,
                        "src": "13534:23:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 39825,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39706,
                        "src": "13559:8:55",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 39822,
                      "name": "InviteClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39515,
                      "src": "13520:13:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 39826,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13520:48:55",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39827,
                  "nodeType": "EmitStatement",
                  "src": "13515:53:55"
                }
              ]
            },
            "documentation": {
              "id": 39704,
              "nodeType": "StructuredDocumentation",
              "src": "9374:1076:55",
              "text": " @notice Allows anyone to reveal a commitment and claim an invite.\n         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already\n         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"\n         attestation, this function checks that\n           1) the hash corresponding to the _claimer and the _signature was committed\n           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.\n           3) the _signature is signed correctly by the issuer\n           4) the _signature hasn't already been used to claim an invite before\n           5) the _signature issuer has not used up all of their invites\n         This function doesn't require that the _claimer is calling this function.\n @param _claimer         Address that will be granted the invite.\n @param _claimableInvite ClaimableInvite struct containing the issuer and nonce.\n @param _signature       Signature signed over the claimable invite."
            },
            "functionSelector": "50eedbc2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claimInvite",
            "nameLocation": "10464:11:55",
            "parameters": {
              "id": 39712,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39706,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "10493:8:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39829,
                  "src": "10485:16:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39705,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10485:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39709,
                  "mutability": "mutable",
                  "name": "_claimableInvite",
                  "nameLocation": "10536:16:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39829,
                  "src": "10511:41:55",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$39548_calldata_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 39708,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39707,
                      "name": "ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 39548,
                      "src": "10511:15:55"
                    },
                    "referencedDeclaration": 39548,
                    "src": "10511:15:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$39548_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39711,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "10575:10:55",
                  "nodeType": "VariableDeclaration",
                  "scope": 39829,
                  "src": "10562:23:55",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 39710,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10562:5:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10475:116:55"
            },
            "returnParameters": {
              "id": 39713,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10599:0:55"
            },
            "scope": 39830,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39505,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39907,
              "src": "2176:6:55"
            },
            "id": 39506,
            "nodeType": "InheritanceSpecifier",
            "src": "2176:6:55"
          },
          {
            "baseName": {
              "id": 39507,
              "name": "EIP712Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 40495,
              "src": "2184:17:55"
            },
            "id": 39508,
            "nodeType": "InheritanceSpecifier",
            "src": "2184:17:55"
          }
        ],
        "canonicalName": "OptimistInviter",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 39504,
          "nodeType": "StructuredDocumentation",
          "src": "505:1642:55",
          "text": " @custom:upgradeable\n @title  OptimistInviter\n @notice OptimistInviter issues \"optimist.can-invite\" and \"optimist.can-mint-from-invite\"\n         attestations. Accounts that have invites can issue signatures that allow other\n         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the\n         invite to an address of their choosing.\n         Parties involved:\n           1) INVITE_GRANTER: trusted account that can allow accounts to issue invites\n           2) issuer: account that is allowed to issue invites\n           3) claimer: account that receives the invites\n         Flow:\n           1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number\n              of invites, and also creates a \"optimist.can-invite\" attestation for the issuer\n           2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature\n           3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature\n              to the recipient\n           4) claimer chooses an address they want to receive the invite on\n           5) claimer commits the hash of the address they want to receive the invite on and the\n              received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))\n              using the commitInvite function\n           6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.\n           7) claimer reveals the plaintext ClaimableInvite and the signature using the\n              claimInvite function, receiving the \"optimist.can-mint-from-invite\" attestation"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          39830,
          40495,
          44588,
          39907
        ],
        "name": "OptimistInviter",
        "nameLocation": "2157:15:55",
        "scope": 39831,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 55
}