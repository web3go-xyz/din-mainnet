{
  "abi": [
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROOF_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumeNonce",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AdminFaucetAuthModule.Proof",
          "name": "_proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_version",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_chainid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifyingContract",
          "type": "address"
        }
      ],
      "name": "getDigestWithEIP712Domain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AdminFaucetAuthModule.Proof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "getProofStructHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b5061048a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806334b1511814610067578063796dfbfa146100815780638b3e3bf614610094578063adb610a3146100bb578063b163a6b8146100c4578063c7977be7146100d7575b600080fd5b61006f6100fe565b60405190815260200160405180910390f35b61006f61008f366004610316565b61013e565b61006f7fd4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e81565b61006f60005481565b61006f6100d23660046103c6565b6101ad565b61006f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60008054818061010d83610456565b9190505560405160200161012391815260200190565b60405160208183030381529060405280519060200120905090565b805160208083015160409384015184517fd4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e818501526001600160a01b039094168486015260608401919091526080808401919091528351808403909101815260a0909201909252805191012090565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f948101949094528301919091526060820152608081018390526001600160a01b03821660a0820152600090819060c001604051602081830303815290604052805190602001209050610278816102388961013e565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146102b057600080fd5b919050565b6000606082840312156102c757600080fd5b6040516060810181811067ffffffffffffffff821117156102ea576102ea610283565b6040529050806102f983610299565b815260208301356020820152604083013560408201525092915050565b60006060828403121561032857600080fd5b61033283836102b5565b9392505050565b600082601f83011261034a57600080fd5b813567ffffffffffffffff8082111561036557610365610283565b604051601f8301601f19908116603f0116810190828211818310171561038d5761038d610283565b816040528381528660208588010111156103a657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060e086880312156103de57600080fd5b6103e887876102b5565b9450606086013567ffffffffffffffff8082111561040557600080fd5b61041189838a01610339565b9550608088013591508082111561042757600080fd5b5061043488828901610339565b93505060a0860135915061044a60c08701610299565b90509295509295909350565b60006001820161047657634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080f000a",
    "sourceMap": "358:2724:41:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806334b1511814610067578063796dfbfa146100815780638b3e3bf614610094578063adb610a3146100bb578063b163a6b8146100c4578063c7977be7146100d7575b600080fd5b61006f6100fe565b60405190815260200160405180910390f35b61006f61008f366004610316565b61013e565b61006f7fd4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e81565b61006f60005481565b61006f6100d23660046103c6565b6101ad565b61006f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60008054818061010d83610456565b9190505560405160200161012391815260200190565b60405160208183030381529060405280519060200120905090565b805160208083015160409384015184517fd4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e818501526001600160a01b039094168486015260608401919091526080808401919091528351808403909101815260a0909201909252805191012090565b8351602080860191909120845185830120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f948101949094528301919091526060820152608081018390526001600160a01b03821660a0820152600090819060c001604051602081830303815290604052805190602001209050610278816102388961013e565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146102b057600080fd5b919050565b6000606082840312156102c757600080fd5b6040516060810181811067ffffffffffffffff821117156102ea576102ea610283565b6040529050806102f983610299565b815260208301356020820152604083013560408201525092915050565b60006060828403121561032857600080fd5b61033283836102b5565b9392505050565b600082601f83011261034a57600080fd5b813567ffffffffffffffff8082111561036557610365610283565b604051601f8301601f19908116603f0116810190828211818310171561038d5761038d610283565b816040528381528660208588010111156103a657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060e086880312156103de57600080fd5b6103e887876102b5565b9450606086013567ffffffffffffffff8082111561040557600080fd5b61041189838a01610339565b9550608088013591508082111561042757600080fd5b5061043488828901610339565b93505060a0860135915061044a60c08701610299565b90509295509295909350565b60006001820161047657634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080f000a",
    "sourceMap": "358:2724:41:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1228:119;;;:::i;:::-;;;160:25:101;;;148:2;133:18;1228:119:41;;;;;;;1521:233;;;;;;:::i;:::-;;:::i;453:111::-;;502:62;453:111;;966:27;;;;;;2470:610;;;;;;:::i;:::-;;:::i;687:174::-;;744:117;687:174;;1228:119;1268:7;1323:14;;1268:7;;1323:14;;;:::i;:::-;;;;;1312:26;;;;;;160:25:101;;148:2;133:18;;14:177;1312:26:41;;;;;;;;;;;;;1302:37;;;;;;1287:53;;1228:119;:::o;1521:233::-;1704:16;;1722:12;;;;;1736:9;;;;;1677:69;;502:62;1677:69;;;3457:25:101;-1:-1:-1;;;;;3518:32:101;;;3498:18;;;3491:60;3567:18;;;3560:34;;;;3610:18;;;;3603:34;;;;1677:69:41;;;;;;;;;;3429:19:101;;;;1677:69:41;;;1667:80;;;;;;1521:233::o;2470:610::-;2840:16;;;;;;;;;;2874:19;;;;;;2772:197;;;744:117;2772:197;;;3907:25:101;;;;3948:18;;3941:34;;;;3991:18;;;3984:34;4034:18;;;4027:34;;;-1:-1:-1;;;;;4098:32:101;;4077:19;;;4070:61;2704:7:41;;;;3879:19:101;;2772:197:41;;;;;;;;;;;;2749:230;;;;;;2723:256;;2996:77;3029:15;3046:26;3065:6;3046:18;:26::i;:::-;8710:57:67;;-1:-1:-1;;;8710:57:67;;;4400:27:101;4443:11;;;4436:27;;;4479:12;;;4472:28;;;8674:7:67;;4516:12:101;;8710:57:67;;;;;;;;;;;;8700:68;;;;;;8693:75;;8581:194;;;;;2996:77:41;2989:84;2470:610;-1:-1:-1;;;;;;;2470:610:41:o;196:127:101:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:173;396:20;;-1:-1:-1;;;;;445:31:101;;435:42;;425:70;;491:1;488;481:12;425:70;328:173;;;:::o;506:542::-;558:5;606:4;594:9;589:3;585:19;581:30;578:50;;;624:1;621;614:12;578:50;657:2;651:9;699:4;691:6;687:17;770:6;758:10;755:22;734:18;722:10;719:34;716:62;713:88;;;781:18;;:::i;:::-;817:2;810:22;850:6;-1:-1:-1;850:6:101;880:29;899:9;880:29;:::i;:::-;872:6;865:45;971:2;960:9;956:18;943:32;938:2;930:6;926:15;919:57;1037:2;1026:9;1022:18;1009:32;1004:2;996:6;992:15;985:57;;506:542;;;;:::o;1053:224::-;1136:6;1189:2;1177:9;1168:7;1164:23;1160:32;1157:52;;;1205:1;1202;1195:12;1157:52;1228:43;1263:7;1252:9;1228:43;:::i;:::-;1218:53;1053:224;-1:-1:-1;;;1053:224:101:o;1464:718::-;1506:5;1559:3;1552:4;1544:6;1540:17;1536:27;1526:55;;1577:1;1574;1567:12;1526:55;1613:6;1600:20;1639:18;1676:2;1672;1669:10;1666:36;;;1682:18;;:::i;:::-;1757:2;1751:9;1725:2;1811:13;;-1:-1:-1;;1807:22:101;;;1831:2;1803:31;1799:40;1787:53;;;1855:18;;;1875:22;;;1852:46;1849:72;;;1901:18;;:::i;:::-;1941:10;1937:2;1930:22;1976:2;1968:6;1961:18;2022:3;2015:4;2010:2;2002:6;1998:15;1994:26;1991:35;1988:55;;;2039:1;2036;2029:12;1988:55;2103:2;2096:4;2088:6;2084:17;2077:4;2069:6;2065:17;2052:54;2150:1;2143:4;2138:2;2130:6;2126:15;2122:26;2115:37;2170:6;2161:15;;;;;;1464:718;;;;:::o;2187:797::-;2324:6;2332;2340;2348;2356;2409:3;2397:9;2388:7;2384:23;2380:33;2377:53;;;2426:1;2423;2416:12;2377:53;2449:43;2484:7;2473:9;2449:43;:::i;:::-;2439:53;;2543:2;2532:9;2528:18;2515:32;2566:18;2607:2;2599:6;2596:14;2593:34;;;2623:1;2620;2613:12;2593:34;2646:49;2687:7;2678:6;2667:9;2663:22;2646:49;:::i;:::-;2636:59;;2748:3;2737:9;2733:19;2720:33;2704:49;;2778:2;2768:8;2765:16;2762:36;;;2794:1;2791;2784:12;2762:36;;2817:51;2860:7;2849:8;2838:9;2834:24;2817:51;:::i;:::-;2807:61;;;2915:3;2904:9;2900:19;2887:33;2877:43;;2939:39;2973:3;2962:9;2958:19;2939:39;:::i;:::-;2929:49;;2187:797;;;;;;;;:::o;2989:232::-;3028:3;3049:17;;;3046:140;;3108:10;3103:3;3099:20;3096:1;3089:31;3143:4;3140:1;3133:15;3171:4;3168:1;3161:15;3046:140;-1:-1:-1;3213:1:101;3202:13;;2989:232::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "EIP712_DOMAIN_TYPEHASH()": "c7977be7",
    "PROOF_TYPEHASH()": "8b3e3bf6",
    "consumeNonce()": "34b15118",
    "currentNonce()": "adb610a3",
    "getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)": "b163a6b8",
    "getProofStructHash((address,bytes32,bytes32))": "796dfbfa"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumeNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct AdminFaucetAuthModule.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_version\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifyingContract\",\"type\":\"address\"}],\"name\":\"getDigestWithEIP712Domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct AdminFaucetAuthModule.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"getProofStructHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consumeNonce()\":{\"returns\":{\"_0\":\"Nonce that should be used as part of drip parameters.\"}},\"getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)\":{\"params\":{\"_chainid\":\"Chain ID to use in the EIP712 domain.\",\"_name\":\"Contract name to use in the EIP712 domain.\",\"_proof\":\"Proof struct to hash.\",\"_verifyingContract\":\"Address to use in the EIP712 domain.\",\"_version\":\"Contract version to use in the EIP712 domain.\"},\"returns\":{\"_0\":\"EIP-712 compatible digest.\"}},\"getProofStructHash((address,bytes32,bytes32))\":{\"params\":{\"_proof\":\"Proof struct to hash.\"},\"returns\":{\"_0\":\"EIP-712 typed struct hash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EIP712_DOMAIN_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the EIP712Domain type that is included as part of the signature.\"},\"PROOF_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the Proof type.\"},\"consumeNonce()\":{\"notice\":\"Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.\"},\"currentNonce()\":{\"notice\":\"Keeps track of current nonce to generate new nonces for each drip.\"},\"getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)\":{\"notice\":\"Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail.\"},\"getProofStructHash((address,bytes32,bytes32))\":{\"notice\":\"Returns the hash of the struct Proof.\"}},\"notice\":\"Simple helper contract that helps with testing the Faucet contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/helpers/FaucetHelper.sol\":\"FaucetHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ds/=lib/multicall/lib/ds-test/src/\",\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":@std/=lib/multicall/lib/forge-std/src/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":multicall/=lib/multicall/\"]},\"sources\":{\"contracts/testing/helpers/FaucetHelper.sol\":{\"keccak256\":\"0xaed9997cab0079c8ca79e9d576aba9252f04c358be725cc757df9a19910d773e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1b4503feacfe273974e50d6b3bdce9c5e98778bcbe3f96da051ca0a0a6f0e89f\",\"dweb:/ipfs/QmQgi6MKjisDin1HjnCA1nnqffsxPN1YmxEgw4PUPWRQYX\"]},\"contracts/universal/faucet/Faucet.sol\":{\"keccak256\":\"0x0df3b36eae1b8593259f7c96d0c11164b92ea6d03a379c96e13b851c9142fcc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3594bcb5373ccd847c64e1ae1d7e3f5db656d09746a4712e4e0bbbc2abfe2eaf\",\"dweb:/ipfs/QmQgVTGXHHh7Yxn41GvSFppG1yk4wKwsfrzjs74rZomVto\"]},\"contracts/universal/faucet/authmodules/AdminFaucetAuthModule.sol\":{\"keccak256\":\"0x43edc72987f5b64e986ea678bc57bee4f9bc637cd8cfb942edcb0c9160fb0e69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d3ecbeebdf22c5ba9d0c1d3edf574f8a9346b85bfc6b7491993ece1e2638e6\",\"dweb:/ipfs/QmUXeLETUjSN9b4jjXoXBzB8KqtbWm2Spo3TNXknvUk66Z\"]},\"contracts/universal/faucet/authmodules/IFaucetAuthModule.sol\":{\"keccak256\":\"0x8d957f6f57a7ffdbb89ea3405bedaca9462a15c13767c9b6025b02923d9af792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fd6798f85729c64f9b93519ccdf707b1dc0d51a319cf07bb884542a3d3a6d69\",\"dweb:/ipfs/QmYkmf59sFtzRMz9qYyuU1A3fBEypFbhKwaegNLjRLrpwW\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "EIP712_DOMAIN_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "PROOF_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "consumeNonce",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "currentNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AdminFaucetAuthModule.Proof",
              "name": "_proof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_name",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_version",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "_chainid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_verifyingContract",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getDigestWithEIP712Domain",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AdminFaucetAuthModule.Proof",
              "name": "_proof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getProofStructHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "consumeNonce()": {
            "returns": {
              "_0": "Nonce that should be used as part of drip parameters."
            }
          },
          "getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)": {
            "params": {
              "_chainid": "Chain ID to use in the EIP712 domain.",
              "_name": "Contract name to use in the EIP712 domain.",
              "_proof": "Proof struct to hash.",
              "_verifyingContract": "Address to use in the EIP712 domain.",
              "_version": "Contract version to use in the EIP712 domain."
            },
            "returns": {
              "_0": "EIP-712 compatible digest."
            }
          },
          "getProofStructHash((address,bytes32,bytes32))": {
            "params": {
              "_proof": "Proof struct to hash."
            },
            "returns": {
              "_0": "EIP-712 typed struct hash."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "EIP712_DOMAIN_TYPEHASH()": {
            "notice": "EIP712 typehash for the EIP712Domain type that is included as part of the signature."
          },
          "PROOF_TYPEHASH()": {
            "notice": "EIP712 typehash for the Proof type."
          },
          "consumeNonce()": {
            "notice": "Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces."
          },
          "currentNonce()": {
            "notice": "Keeps track of current nonce to generate new nonces for each drip."
          },
          "getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)": {
            "notice": "Computes the EIP712 digest with the given domain parameters.         Used for testing that different domain parameters fail."
          },
          "getProofStructHash((address,bytes32,bytes32))": {
            "notice": "Returns the hash of the struct Proof."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@ds/=lib/multicall/lib/ds-test/src/",
        ":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        ":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        ":@std/=lib/multicall/lib/forge-std/src/",
        ":ds-test/=node_modules/ds-test/src/",
        ":forge-std/=node_modules/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/",
        ":multicall/=lib/multicall/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/testing/helpers/FaucetHelper.sol": "FaucetHelper"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/testing/helpers/FaucetHelper.sol": {
        "keccak256": "0xaed9997cab0079c8ca79e9d576aba9252f04c358be725cc757df9a19910d773e",
        "urls": [
          "bzz-raw://1b4503feacfe273974e50d6b3bdce9c5e98778bcbe3f96da051ca0a0a6f0e89f",
          "dweb:/ipfs/QmQgi6MKjisDin1HjnCA1nnqffsxPN1YmxEgw4PUPWRQYX"
        ],
        "license": "MIT"
      },
      "contracts/universal/faucet/Faucet.sol": {
        "keccak256": "0x0df3b36eae1b8593259f7c96d0c11164b92ea6d03a379c96e13b851c9142fcc5",
        "urls": [
          "bzz-raw://3594bcb5373ccd847c64e1ae1d7e3f5db656d09746a4712e4e0bbbc2abfe2eaf",
          "dweb:/ipfs/QmQgVTGXHHh7Yxn41GvSFppG1yk4wKwsfrzjs74rZomVto"
        ],
        "license": "MIT"
      },
      "contracts/universal/faucet/authmodules/AdminFaucetAuthModule.sol": {
        "keccak256": "0x43edc72987f5b64e986ea678bc57bee4f9bc637cd8cfb942edcb0c9160fb0e69",
        "urls": [
          "bzz-raw://b1d3ecbeebdf22c5ba9d0c1d3edf574f8a9346b85bfc6b7491993ece1e2638e6",
          "dweb:/ipfs/QmUXeLETUjSN9b4jjXoXBzB8KqtbWm2Spo3TNXknvUk66Z"
        ],
        "license": "MIT"
      },
      "contracts/universal/faucet/authmodules/IFaucetAuthModule.sol": {
        "keccak256": "0x8d957f6f57a7ffdbb89ea3405bedaca9462a15c13767c9b6025b02923d9af792",
        "urls": [
          "bzz-raw://0fd6798f85729c64f9b93519ccdf707b1dc0d51a319cf07bb884542a3d3a6d69",
          "dweb:/ipfs/QmYkmf59sFtzRMz9qYyuU1A3fBEypFbhKwaegNLjRLrpwW"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc",
        "urls": [
          "bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb",
          "dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
        "keccak256": "0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81",
        "urls": [
          "bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b",
          "dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/testing/helpers/FaucetHelper.sol",
    "id": 38022,
    "exportedSymbols": {
      "AdminFaucetAuthModule": [
        38935
      ],
      "ECDSAUpgradeable": [
        40345
      ],
      "FaucetHelper": [
        38021
      ]
    },
    "nodeType": "SourceUnit",
    "src": "31:3052:41",
    "nodes": [
      {
        "id": 37916,
        "nodeType": "PragmaDirective",
        "src": "31:23:41",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 37918,
        "nodeType": "ImportDirective",
        "src": "56:105:41",
        "nodes": [],
        "absolutePath": "contracts/universal/faucet/authmodules/AdminFaucetAuthModule.sol",
        "file": "../../universal/faucet/authmodules/AdminFaucetAuthModule.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38022,
        "sourceUnit": 38936,
        "symbolAliases": [
          {
            "foreign": {
              "id": 37917,
              "name": "AdminFaucetAuthModule",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38935,
              "src": "69:21:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 37920,
        "nodeType": "ImportDirective",
        "src": "162:115:41",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38022,
        "sourceUnit": 40346,
        "symbolAliases": [
          {
            "foreign": {
              "id": 37919,
              "name": "ECDSAUpgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40345,
              "src": "175:16:41",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38021,
        "nodeType": "ContractDefinition",
        "src": "358:2724:41",
        "nodes": [
          {
            "id": 37927,
            "nodeType": "VariableDeclaration",
            "src": "453:111:41",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 37922,
              "nodeType": "StructuredDocumentation",
              "src": "386:62:41",
              "text": " @notice EIP712 typehash for the Proof type."
            },
            "functionSelector": "8b3e3bf6",
            "mutability": "constant",
            "name": "PROOF_TYPEHASH",
            "nameLocation": "477:14:41",
            "scope": 38021,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 37923,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "453:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "50726f6f66286164647265737320726563697069656e742c62797465733332206e6f6e63652c6279746573333220696429",
                  "id": 37925,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "512:51:41",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_d4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e",
                    "typeString": "literal_string \"Proof(address recipient,bytes32 nonce,bytes32 id)\""
                  },
                  "value": "Proof(address recipient,bytes32 nonce,bytes32 id)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_d4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e",
                    "typeString": "literal_string \"Proof(address recipient,bytes32 nonce,bytes32 id)\""
                  }
                ],
                "id": 37924,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "502:9:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 37926,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "502:62:41",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 37933,
            "nodeType": "VariableDeclaration",
            "src": "687:174:41",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 37928,
              "nodeType": "StructuredDocumentation",
              "src": "571:111:41",
              "text": " @notice EIP712 typehash for the EIP712Domain type that is included as part of the signature."
            },
            "functionSelector": "c7977be7",
            "mutability": "constant",
            "name": "EIP712_DOMAIN_TYPEHASH",
            "nameLocation": "711:22:41",
            "scope": 38021,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 37929,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "687:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
                  "id": 37931,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "767:84:41",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                    "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                  },
                  "value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                    "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                  }
                ],
                "id": 37930,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "744:9:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 37932,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "744:117:41",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 37936,
            "nodeType": "VariableDeclaration",
            "src": "966:27:41",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 37934,
              "nodeType": "StructuredDocumentation",
              "src": "868:93:41",
              "text": " @notice Keeps track of current nonce to generate new nonces for each drip."
            },
            "functionSelector": "adb610a3",
            "mutability": "mutable",
            "name": "currentNonce",
            "nameLocation": "981:12:41",
            "scope": 38021,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 37935,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "966:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 37954,
            "nodeType": "FunctionDefinition",
            "src": "1228:119:41",
            "nodes": [],
            "body": {
              "id": 37953,
              "nodeType": "Block",
              "src": "1277:70:41",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 37948,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "1323:14:41",
                                "subExpression": {
                                  "id": 37947,
                                  "name": "currentNonce",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 37936,
                                  "src": "1323:12:41",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 37945,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "1312:3:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 37946,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "1312:10:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 37949,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1312:26:41",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 37944,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "1302:9:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 37950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1302:37:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 37943,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1294:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes32_$",
                        "typeString": "type(bytes32)"
                      },
                      "typeName": {
                        "id": 37942,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1294:7:41",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 37951,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1294:46:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 37941,
                  "id": 37952,
                  "nodeType": "Return",
                  "src": "1287:53:41"
                }
              ]
            },
            "documentation": {
              "id": 37937,
              "nodeType": "StructuredDocumentation",
              "src": "1000:223:41",
              "text": " @notice Returns a bytes32 nonce that should change everytime. In practice, people should use\n         pseudorandom nonces.\n @return Nonce that should be used as part of drip parameters."
            },
            "functionSelector": "34b15118",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "consumeNonce",
            "nameLocation": "1237:12:41",
            "parameters": {
              "id": 37938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1249:2:41"
            },
            "returnParameters": {
              "id": 37941,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37940,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 37954,
                  "src": "1268:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37939,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1268:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1267:9:41"
            },
            "scope": 38021,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 37977,
            "nodeType": "FunctionDefinition",
            "src": "1521:233:41",
            "nodes": [],
            "body": {
              "id": 37976,
              "nodeType": "Block",
              "src": "1650:104:41",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 37966,
                            "name": "PROOF_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37927,
                            "src": "1688:14:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 37967,
                              "name": "_proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 37958,
                              "src": "1704:6:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                                "typeString": "struct AdminFaucetAuthModule.Proof memory"
                              }
                            },
                            "id": 37968,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "recipient",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38877,
                            "src": "1704:16:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 37969,
                              "name": "_proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 37958,
                              "src": "1722:6:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                                "typeString": "struct AdminFaucetAuthModule.Proof memory"
                              }
                            },
                            "id": 37970,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonce",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38879,
                            "src": "1722:12:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "expression": {
                              "id": 37971,
                              "name": "_proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 37958,
                              "src": "1736:6:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                                "typeString": "struct AdminFaucetAuthModule.Proof memory"
                              }
                            },
                            "id": 37972,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38881,
                            "src": "1736:9:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 37964,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1677:3:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 37965,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "1677:10:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 37973,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1677:69:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 37963,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1667:9:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 37974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1667:80:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 37962,
                  "id": 37975,
                  "nodeType": "Return",
                  "src": "1660:87:41"
                }
              ]
            },
            "documentation": {
              "id": 37955,
              "nodeType": "StructuredDocumentation",
              "src": "1353:163:41",
              "text": " @notice Returns the hash of the struct Proof.\n @param _proof Proof struct to hash.\n @return EIP-712 typed struct hash."
            },
            "functionSelector": "796dfbfa",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProofStructHash",
            "nameLocation": "1530:18:41",
            "parameters": {
              "id": 37959,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37958,
                  "mutability": "mutable",
                  "name": "_proof",
                  "nameLocation": "1584:6:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 37977,
                  "src": "1549:41:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                    "typeString": "struct AdminFaucetAuthModule.Proof"
                  },
                  "typeName": {
                    "id": 37957,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 37956,
                      "name": "AdminFaucetAuthModule.Proof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 38882,
                      "src": "1549:27:41"
                    },
                    "referencedDeclaration": 38882,
                    "src": "1549:27:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Proof_$38882_storage_ptr",
                      "typeString": "struct AdminFaucetAuthModule.Proof"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1548:43:41"
            },
            "returnParameters": {
              "id": 37962,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37961,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 37977,
                  "src": "1637:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37960,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1637:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1636:9:41"
            },
            "scope": 38021,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 38020,
            "nodeType": "FunctionDefinition",
            "src": "2470:610:41",
            "nodes": [],
            "body": {
              "id": 38019,
              "nodeType": "Block",
              "src": "2713:367:41",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    37995
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 37995,
                      "mutability": "mutable",
                      "name": "domainSeparator",
                      "nameLocation": "2731:15:41",
                      "nodeType": "VariableDeclaration",
                      "scope": 38019,
                      "src": "2723:23:41",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 37994,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2723:7:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 38010,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 37999,
                            "name": "EIP712_DOMAIN_TYPEHASH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37933,
                            "src": "2800:22:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 38001,
                                "name": "_name",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 37983,
                                "src": "2850:5:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 38000,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "2840:9:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 38002,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2840:16:41",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 38004,
                                "name": "_version",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 37985,
                                "src": "2884:8:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 38003,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "2874:9:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 38005,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2874:19:41",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 38006,
                            "name": "_chainid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37987,
                            "src": "2911:8:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 38007,
                            "name": "_verifyingContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37989,
                            "src": "2937:18:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 37997,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2772:3:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 37998,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "2772:10:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 38008,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2772:197:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 37996,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2749:9:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 38009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2749:230:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2723:256:41"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 38013,
                        "name": "domainSeparator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37995,
                        "src": "3029:15:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 38015,
                            "name": "_proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37981,
                            "src": "3065:6:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                              "typeString": "struct AdminFaucetAuthModule.Proof memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                              "typeString": "struct AdminFaucetAuthModule.Proof memory"
                            }
                          ],
                          "id": 38014,
                          "name": "getProofStructHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 37977,
                          "src": "3046:18:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_Proof_$38882_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (struct AdminFaucetAuthModule.Proof memory) pure returns (bytes32)"
                          }
                        },
                        "id": 38016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3046:26:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 38011,
                        "name": "ECDSAUpgradeable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40345,
                        "src": "2996:16:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ECDSAUpgradeable_$40345_$",
                          "typeString": "type(library ECDSAUpgradeable)"
                        }
                      },
                      "id": 38012,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toTypedDataHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 40344,
                      "src": "2996:32:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                      }
                    },
                    "id": 38017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2996:77:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 37993,
                  "id": 38018,
                  "nodeType": "Return",
                  "src": "2989:84:41"
                }
              ]
            },
            "documentation": {
              "id": 37978,
              "nodeType": "StructuredDocumentation",
              "src": "1760:705:41",
              "text": " @notice Computes the EIP712 digest with the given domain parameters.\n         Used for testing that different domain parameters fail.\n @param _proof             Proof struct to hash.\n @param _name              Contract name to use in the EIP712 domain.\n @param _version           Contract version to use in the EIP712 domain.\n @param _chainid           Chain ID to use in the EIP712 domain.\n @param _verifyingContract Address to use in the EIP712 domain.\n @param _verifyingContract Address to use in the EIP712 domain.\n @param _verifyingContract Address to use in the EIP712 domain.\n @return EIP-712 compatible digest."
            },
            "functionSelector": "b163a6b8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDigestWithEIP712Domain",
            "nameLocation": "2479:25:41",
            "parameters": {
              "id": 37990,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37981,
                  "mutability": "mutable",
                  "name": "_proof",
                  "nameLocation": "2549:6:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2514:41:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Proof_$38882_memory_ptr",
                    "typeString": "struct AdminFaucetAuthModule.Proof"
                  },
                  "typeName": {
                    "id": 37980,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 37979,
                      "name": "AdminFaucetAuthModule.Proof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 38882,
                      "src": "2514:27:41"
                    },
                    "referencedDeclaration": 38882,
                    "src": "2514:27:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Proof_$38882_storage_ptr",
                      "typeString": "struct AdminFaucetAuthModule.Proof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37983,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2578:5:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2565:18:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 37982,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2565:5:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37985,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "2606:8:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2593:21:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 37984,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2593:5:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37987,
                  "mutability": "mutable",
                  "name": "_chainid",
                  "nameLocation": "2632:8:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2624:16:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 37986,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2624:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37989,
                  "mutability": "mutable",
                  "name": "_verifyingContract",
                  "nameLocation": "2658:18:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2650:26:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 37988,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2650:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2504:178:41"
            },
            "returnParameters": {
              "id": 37993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37992,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 38020,
                  "src": "2704:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37991,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2704:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2703:9:41"
            },
            "scope": 38021,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "FaucetHelper",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 37921,
          "nodeType": "StructuredDocumentation",
          "src": "279:78:41",
          "text": " Simple helper contract that helps with testing the Faucet contract."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          38021
        ],
        "name": "FaucetHelper",
        "nameLocation": "367:12:41",
        "scope": 38022,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 41
}