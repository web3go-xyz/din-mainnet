{
    "methods": {
        "allowance": {
            "stateMutability": "view",
            "code": "function allowance(address owner, address spender) external view returns (uint256)",
            "inputs": {
                "owner": {
                    "type": "address"
                },
                "spender": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-allowance}."
        },
        "approve": {
            "stateMutability": "nonpayable",
            "code": "function approve(address spender, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
        },
        "balanceOf": {
            "stateMutability": "view",
            "code": "function balanceOf(address account) external view returns (uint256)",
            "inputs": {
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-balanceOf}."
        },
        "burn": {
            "stateMutability": "nonpayable",
            "code": "function burn(address _from, uint256 _amount) external nonpayable",
            "inputs": {
                "_from": {
                    "type": "address"
                },
                "_amount": {
                    "type": "uint256"
                }
            },
            "outputs": {}
        },
        "decimals": {
            "stateMutability": "view",
            "code": "function decimals() external view returns (uint8)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint8"
                }
            },
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
        },
        "decreaseAllowance": {
            "stateMutability": "nonpayable",
            "code": "function decreaseAllowance(address spender, uint256 subtractedValue) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "subtractedValue": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
        },
        "increaseAllowance": {
            "stateMutability": "nonpayable",
            "code": "function increaseAllowance(address spender, uint256 addedValue) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "addedValue": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
        },
        "l1Token": {
            "stateMutability": "view",
            "code": "function l1Token() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "l2Bridge": {
            "stateMutability": "view",
            "code": "function l2Bridge() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "mint": {
            "stateMutability": "nonpayable",
            "code": "function mint(address _to, uint256 _amount) external nonpayable",
            "inputs": {
                "_to": {
                    "type": "address"
                },
                "_amount": {
                    "type": "uint256"
                }
            },
            "outputs": {}
        },
        "name": {
            "stateMutability": "view",
            "code": "function name() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the name of the token."
        },
        "supportsInterface": {
            "stateMutability": "pure",
            "code": "function supportsInterface(bytes4 _interfaceId) external pure returns (bool)",
            "inputs": {
                "_interfaceId": {
                    "type": "bytes4"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "symbol": {
            "stateMutability": "view",
            "code": "function symbol() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the symbol of the token, usually a shorter version of the name."
        },
        "totalSupply": {
            "stateMutability": "view",
            "code": "function totalSupply() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-totalSupply}."
        },
        "transfer": {
            "stateMutability": "nonpayable",
            "code": "function transfer(address recipient, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "recipient": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
        },
        "transferFrom": {
            "stateMutability": "nonpayable",
            "code": "function transferFrom(address sender, address recipient, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "sender": {
                    "type": "address"
                },
                "recipient": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
        }
    },
    "events": {
        "Approval": {
            "code": "event Approval(address indexed owner, address indexed spender, uint256 value)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "indexed": true
                },
                "spender": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Burn": {
            "code": "event Burn(address indexed _account, uint256 _amount)",
            "inputs": {
                "_account": {
                    "type": "address",
                    "indexed": true
                },
                "_amount": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Mint": {
            "code": "event Mint(address indexed _account, uint256 _amount)",
            "inputs": {
                "_account": {
                    "type": "address",
                    "indexed": true
                },
                "_amount": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Transfer": {
            "code": "event Transfer(address indexed from, address indexed to, uint256 value)",
            "inputs": {
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "title": "OVM_ETH",
    "details": "The ETH predeploy provides an ERC20 interface for ETH deposited to Layer 2. Note that unlike on Layer 1, Layer 2 accounts do not have a balance field.",
    "name": "OVM_ETH"
}