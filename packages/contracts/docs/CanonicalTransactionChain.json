{
    "methods": {
        "MAX_ROLLUP_TX_SIZE": {
            "stateMutability": "view",
            "code": "function MAX_ROLLUP_TX_SIZE() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "MIN_ROLLUP_TX_GAS": {
            "stateMutability": "view",
            "code": "function MIN_ROLLUP_TX_GAS() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "appendSequencerBatch": {
            "stateMutability": "nonpayable",
            "code": "function appendSequencerBatch() external nonpayable",
            "inputs": {},
            "outputs": {},
            "notice": "Allows the sequencer to append a batch of transactions.",
            "details": "This function uses a custom encoding scheme for efficiency reasons. .param _shouldStartAtElement Specific batch we expect to start appending to. .param _totalElementsToAppend Total number of batch elements we expect to append. .param _contexts Array of batch contexts. .param _transactionDataFields Array of raw transaction data."
        },
        "batches": {
            "stateMutability": "view",
            "code": "function batches() external view returns (contract IChainStorageContainer)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "contract IChainStorageContainer",
                    "description": "Reference to the batch storage container."
                }
            },
            "notice": "Accesses the batch storage container."
        },
        "enqueue": {
            "stateMutability": "nonpayable",
            "code": "function enqueue(address _target, uint256 _gasLimit, bytes _data) external nonpayable",
            "inputs": {
                "_target": {
                    "type": "address",
                    "description": "Target L2 contract to send the transaction to."
                },
                "_gasLimit": {
                    "type": "uint256",
                    "description": "Gas limit for the enqueued L2 transaction."
                },
                "_data": {
                    "type": "bytes",
                    "description": "Transaction data."
                }
            },
            "outputs": {},
            "notice": "Adds a transaction to the queue."
        },
        "enqueueGasCost": {
            "stateMutability": "view",
            "code": "function enqueueGasCost() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "enqueueL2GasPrepaid": {
            "stateMutability": "view",
            "code": "function enqueueL2GasPrepaid() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "getLastBlockNumber": {
            "stateMutability": "view",
            "code": "function getLastBlockNumber() external view returns (uint40)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint40",
                    "description": "Blocknumber for the last transaction."
                }
            },
            "notice": "Returns the blocknumber of the last transaction."
        },
        "getLastTimestamp": {
            "stateMutability": "view",
            "code": "function getLastTimestamp() external view returns (uint40)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint40",
                    "description": "Timestamp for the last transaction."
                }
            },
            "notice": "Returns the timestamp of the last transaction."
        },
        "getNextQueueIndex": {
            "stateMutability": "view",
            "code": "function getNextQueueIndex() external view returns (uint40)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint40",
                    "description": "Index for the next queue element."
                }
            },
            "notice": "Returns the index of the next element to be enqueued."
        },
        "getNumPendingQueueElements": {
            "stateMutability": "view",
            "code": "function getNumPendingQueueElements() external view returns (uint40)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint40",
                    "description": "Number of pending queue elements."
                }
            },
            "notice": "Get the number of queue elements which have not yet been included."
        },
        "getQueueElement": {
            "stateMutability": "view",
            "code": "function getQueueElement(uint256 _index) external view returns (struct Lib_OVMCodec.QueueElement _element)",
            "inputs": {
                "_index": {
                    "type": "uint256",
                    "description": "Index of the queue element to access."
                }
            },
            "outputs": {
                "_element": {
                    "type": "Lib_OVMCodec.QueueElement",
                    "description": "Queue element at the given index."
                }
            },
            "notice": "Gets the queue element at a particular index."
        },
        "getQueueLength": {
            "stateMutability": "view",
            "code": "function getQueueLength() external view returns (uint40)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint40",
                    "description": "Length of the queue."
                }
            },
            "notice": "Retrieves the length of the queue, including both pending and canonical transactions."
        },
        "getTotalBatches": {
            "stateMutability": "view",
            "code": "function getTotalBatches() external view returns (uint256 _totalBatches)",
            "inputs": {},
            "outputs": {
                "_totalBatches": {
                    "type": "uint256",
                    "description": "Total submitted batches."
                }
            },
            "notice": "Retrieves the total number of batches submitted."
        },
        "getTotalElements": {
            "stateMutability": "view",
            "code": "function getTotalElements() external view returns (uint256 _totalElements)",
            "inputs": {},
            "outputs": {
                "_totalElements": {
                    "type": "uint256",
                    "description": "Total submitted elements."
                }
            },
            "notice": "Retrieves the total number of elements submitted."
        },
        "l2GasDiscountDivisor": {
            "stateMutability": "view",
            "code": "function l2GasDiscountDivisor() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "libAddressManager": {
            "stateMutability": "view",
            "code": "function libAddressManager() external view returns (contract Lib_AddressManager)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "contract Lib_AddressManager"
                }
            }
        },
        "maxTransactionGasLimit": {
            "stateMutability": "view",
            "code": "function maxTransactionGasLimit() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "resolve": {
            "stateMutability": "view",
            "code": "function resolve(string _name) external view returns (address)",
            "inputs": {
                "_name": {
                    "type": "string",
                    "description": "Name to resolve an address for."
                }
            },
            "outputs": {
                "_0": {
                    "type": "address",
                    "description": "Address associated with the given name."
                }
            },
            "notice": "Resolves the address associated with a given name."
        },
        "setGasParams": {
            "stateMutability": "nonpayable",
            "code": "function setGasParams(uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost) external nonpayable",
            "inputs": {
                "_l2GasDiscountDivisor": {
                    "type": "uint256"
                },
                "_enqueueGasCost": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "notice": "Allows the Burn Admin to update the parameters which determine the amount of gas to burn. The value of enqueueL2GasPrepaid is immediately updated as well."
        }
    },
    "events": {
        "L2GasParamsUpdated": {
            "code": "event L2GasParamsUpdated(uint256 l2GasDiscountDivisor, uint256 enqueueGasCost, uint256 enqueueL2GasPrepaid)",
            "inputs": {
                "l2GasDiscountDivisor": {
                    "type": "uint256",
                    "indexed": false
                },
                "enqueueGasCost": {
                    "type": "uint256",
                    "indexed": false
                },
                "enqueueL2GasPrepaid": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "QueueBatchAppended": {
            "code": "event QueueBatchAppended(uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
            "inputs": {
                "_startingQueueIndex": {
                    "type": "uint256",
                    "indexed": false
                },
                "_numQueueElements": {
                    "type": "uint256",
                    "indexed": false
                },
                "_totalElements": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "SequencerBatchAppended": {
            "code": "event SequencerBatchAppended(uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
            "inputs": {
                "_startingQueueIndex": {
                    "type": "uint256",
                    "indexed": false
                },
                "_numQueueElements": {
                    "type": "uint256",
                    "indexed": false
                },
                "_totalElements": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "TransactionBatchAppended": {
            "code": "event TransactionBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)",
            "inputs": {
                "_batchIndex": {
                    "type": "uint256",
                    "indexed": true
                },
                "_batchRoot": {
                    "type": "bytes32",
                    "indexed": false
                },
                "_batchSize": {
                    "type": "uint256",
                    "indexed": false
                },
                "_prevTotalElements": {
                    "type": "uint256",
                    "indexed": false
                },
                "_extraData": {
                    "type": "bytes",
                    "indexed": false
                }
            }
        },
        "TransactionEnqueued": {
            "code": "event TransactionEnqueued(address indexed _l1TxOrigin, address indexed _target, uint256 _gasLimit, bytes _data, uint256 indexed _queueIndex, uint256 _timestamp)",
            "inputs": {
                "_l1TxOrigin": {
                    "type": "address",
                    "indexed": true
                },
                "_target": {
                    "type": "address",
                    "indexed": true
                },
                "_gasLimit": {
                    "type": "uint256",
                    "indexed": false
                },
                "_data": {
                    "type": "bytes",
                    "indexed": false
                },
                "_queueIndex": {
                    "type": "uint256",
                    "indexed": true
                },
                "_timestamp": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "title": "CanonicalTransactionChain",
    "details": "The Canonical Transaction Chain (CTC) contract is an append-only log of transactions which must be applied to the rollup state. It defines the ordering of rollup transactions by writing them to the 'CTC:batches' instance of the Chain Storage Container. The CTC also allows any account to 'enqueue' an L2 transaction, which will require that the Sequencer will eventually append it to the rollup state.",
    "name": "CanonicalTransactionChain"
}