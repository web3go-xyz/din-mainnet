##################################################
#                 Getting Started                #
##################################################

# Addresses and private keys for the four accounts generated in the Getting
# Started quickstart guide.
export GS_ADMIN_ADDRESS=
export GS_ADMIN_PRIVATE_KEY=
export GS_BATCHER_ADDRESS=
export GS_BATCHER_PRIVATE_KEY=
export GS_PROPOSER_ADDRESS=
export GS_PROPOSER_PRIVATE_KEY=
export GS_SEQUENCER_ADDRESS=
export GS_SEQUENCER_PRIVATE_KEY=

##################################################
#              op-node Configuration             #
##################################################

# The kind of RPC provider, used to inform optimal transactions receipts
# fetching. Valid options: alchemy, quicknode, infura, parity, nethermind,
# debug_geth, erigon, basic, any.
export L1_RPC_KIND=

##################################################
#               Contract Deployment              #
##################################################

# RPC URL for the L1 network to interact with
export L1_RPC_URL=

# Salt used via CREATE2 to determine implementation addresses
# NOTE: If you want to deploy contracts from scratch you MUST reload this
#       variable to ensure the salt is regenerated and the contracts are
#       deployed to new addresses (otherwise deployment will fail)
export IMPL_SALT=$(openssl rand -hex 32)

# Name for the deployed network
export DEPLOYMENT_CONTEXT=getting-started

# Optional Tenderly details for simulation link during deployment
export TENDERLY_PROJECT=
export TENDERLY_USERNAME=

# Optional Etherscan API key for contract verification
export ETHERSCAN_API_KEY=

# Private key for the contract deployer account (hardhat default account)
# WARNING: Overridden if GS_ADMIN_PRIVATE_KEY is set!
export PRIVATE_KEY=0x862285c87f8715b04957e78e38f5b6102945d2af1c5962d3339d2c37a8f24302

# Use the Getting Started admin private key as deployer if set
if [ -z "$GS_ADMIN_PRIVATE_KEY" ]
then
  export PRIVATE_KEY=$GS_ADMIN_PRIVATE_KEY
fi
