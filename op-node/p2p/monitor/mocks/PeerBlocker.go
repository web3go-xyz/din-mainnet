// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"

	time "time"
)

// PeerBlocker is an autogenerated mock type for the PeerBlocker type
type PeerBlocker struct {
	mock.Mock
}

type PeerBlocker_Expecter struct {
	mock *mock.Mock
}

func (_m *PeerBlocker) EXPECT() *PeerBlocker_Expecter {
	return &PeerBlocker_Expecter{mock: &_m.Mock}
}

// BanPeer provides a mock function with given fields: _a0, _a1
func (_m *PeerBlocker) BanPeer(_a0 peer.ID, _a1 time.Time) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(peer.ID, time.Time) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PeerBlocker_BanPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanPeer'
type PeerBlocker_BanPeer_Call struct {
	*mock.Call
}

// BanPeer is a helper method to define mock.On call
//   - _a0 peer.ID
//   - _a1 time.Time
func (_e *PeerBlocker_Expecter) BanPeer(_a0 interface{}, _a1 interface{}) *PeerBlocker_BanPeer_Call {
	return &PeerBlocker_BanPeer_Call{Call: _e.mock.On("BanPeer", _a0, _a1)}
}

func (_c *PeerBlocker_BanPeer_Call) Run(run func(_a0 peer.ID, _a1 time.Time)) *PeerBlocker_BanPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID), args[1].(time.Time))
	})
	return _c
}

func (_c *PeerBlocker_BanPeer_Call) Return(_a0 error) *PeerBlocker_BanPeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerBlocker_BanPeer_Call) RunAndReturn(run func(peer.ID, time.Time) error) *PeerBlocker_BanPeer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPeerBlocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewPeerBlocker creates a new instance of PeerBlocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPeerBlocker(t mockConstructorTestingTNewPeerBlocker) *PeerBlocker {
	mock := &PeerBlocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
