// Code generated by mockery v2.28.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// PeerProtector is an autogenerated mock type for the PeerProtector type
type PeerProtector struct {
	mock.Mock
}

type PeerProtector_Expecter struct {
	mock *mock.Mock
}

func (_m *PeerProtector) EXPECT() *PeerProtector_Expecter {
	return &PeerProtector_Expecter{mock: &_m.Mock}
}

// IsProtected provides a mock function with given fields: _a0
func (_m *PeerProtector) IsProtected(_a0 peer.ID) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(peer.ID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PeerProtector_IsProtected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProtected'
type PeerProtector_IsProtected_Call struct {
	*mock.Call
}

// IsProtected is a helper method to define mock.On call
//   - _a0 peer.ID
func (_e *PeerProtector_Expecter) IsProtected(_a0 interface{}) *PeerProtector_IsProtected_Call {
	return &PeerProtector_IsProtected_Call{Call: _e.mock.On("IsProtected", _a0)}
}

func (_c *PeerProtector_IsProtected_Call) Run(run func(_a0 peer.ID)) *PeerProtector_IsProtected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(peer.ID))
	})
	return _c
}

func (_c *PeerProtector_IsProtected_Call) Return(_a0 bool) *PeerProtector_IsProtected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerProtector_IsProtected_Call) RunAndReturn(run func(peer.ID) bool) *PeerProtector_IsProtected_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPeerProtector interface {
	mock.TestingT
	Cleanup(func())
}

// NewPeerProtector creates a new instance of PeerProtector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPeerProtector(t mockConstructorTestingTNewPeerProtector) *PeerProtector {
	mock := &PeerProtector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
